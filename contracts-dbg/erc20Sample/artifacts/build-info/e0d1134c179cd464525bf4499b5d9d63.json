{
	"id": "e0d1134c179cd464525bf4499b5d9d63",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"memetoken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n\r\ncontract ReverseCramerTest is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name = \"Reverse Cramer Token\";\r\n    string private _symbol = \"REVCRAMER\";\r\n    uint8 private _decimals = 18;\r\n\r\n    uint256 private _totalSupply = 1000000 * 10**18; // Initial token supply\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    // Deflationary mechanism\r\n    uint256 private constant _burnRate = 2; // 2% burn rate on every transaction\r\n    uint256 private constant _maxBurnAmount = 5000 * 10**18; // Maximum burn amount per transaction\r\n\r\n    constructor() {\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: transfer amount must be greater than zero\");\r\n\r\n        uint256 burnAmount = amount.mul(_burnRate).div(100); // Calculate burn amount\r\n        if (burnAmount > _maxBurnAmount) {\r\n            burnAmount = _maxBurnAmount;\r\n        }\r\n\r\n        uint256 transferAmount = amount.sub(burnAmount); // Calculate transfer amount\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(transferAmount);\r\n        _totalSupply = _totalSupply.sub(burnAmount);\r\n\r\n        emit Transfer(sender, recipient, transferAmount);\r\n        emit Transfer(sender, address(0), burnAmount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ReentrancyGuard": {
					"abi": [],
					"devdoc": {
						"details": "Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 123,
								"contract": "@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard",
								"label": "_status",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0x80)\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2055  _name = name_ */\n  dup2\n  mload\n  tag_6\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2047  _name */\n  0x03\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2042:2055  _name = name_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  dup1\n  mload\n  tag_8\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2072  _symbol */\n  0x04\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2065:2082  _symbol = symbol_ */\n  0x20\n  dup5\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1976:2089  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  jump(tag_21)\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:895   */\ntag_22:\n  0x00\n    /* \"#utility.yul\":123:126   */\n  dup3\n    /* \"#utility.yul\":116:120   */\n  0x1f\n    /* \"#utility.yul\":108:114   */\n  dup4\n    /* \"#utility.yul\":104:121   */\n  add\n    /* \"#utility.yul\":100:127   */\n  slt\n    /* \"#utility.yul\":90:92   */\n  tag_24\n  jumpi\n    /* \"#utility.yul\":145:150   */\n  dup1\n    /* \"#utility.yul\":138:143   */\n  dup2\n    /* \"#utility.yul\":131:151   */\n  revert\n    /* \"#utility.yul\":90:92   */\ntag_24:\n    /* \"#utility.yul\":172:185   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":234:244   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":231:233   */\n  iszero\n  tag_26\n  jumpi\n    /* \"#utility.yul\":247:265   */\n  tag_26\n  tag_27\n  jump\t// in\ntag_26:\n    /* \"#utility.yul\":296:298   */\n  0x40\n    /* \"#utility.yul\":290:299   */\n  mload\n    /* \"#utility.yul\":318:322   */\n  0x20\n    /* \"#utility.yul\":388:390   */\n  0x1f\n    /* \"#utility.yul\":369:382   */\n  dup5\n  add\n  not(0x1f)\n    /* \"#utility.yul\":365:392   */\n  and\n    /* \"#utility.yul\":353:393   */\n  dup3\n  add\n    /* \"#utility.yul\":349:398   */\n  dup2\n  add\n    /* \"#utility.yul\":413:431   */\n  dup4\n  dup2\n  gt\n    /* \"#utility.yul\":433:455   */\n  dup4\n  dup3\n  lt\n    /* \"#utility.yul\":410:456   */\n  or\n    /* \"#utility.yul\":407:409   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":459:477   */\n  tag_29\n  tag_27\n  jump\t// in\ntag_29:\n    /* \"#utility.yul\":495:497   */\n  0x40\n    /* \"#utility.yul\":488:510   */\n  mstore\n    /* \"#utility.yul\":519:537   */\n  dup4\n  dup3\n  mstore\n    /* \"#utility.yul\":556:571   */\n  dup6\n  dup5\n  add\n    /* \"#utility.yul\":552:576   */\n  dup2\n  add\n    /* \"#utility.yul\":549:582   */\n  dup8\n  lt\n    /* \"#utility.yul\":546:548   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":599:604   */\n  dup5\n    /* \"#utility.yul\":592:597   */\n  dup6\n    /* \"#utility.yul\":585:605   */\n  revert\n    /* \"#utility.yul\":546:548   */\ntag_30:\n    /* \"#utility.yul\":625:630   */\n  dup5\n    /* \"#utility.yul\":616:630   */\n  swap3\n  pop\n    /* \"#utility.yul\":639:772   */\ntag_31:\n    /* \"#utility.yul\":653:655   */\n  dup4\n    /* \"#utility.yul\":650:651   */\n  dup4\n    /* \"#utility.yul\":647:656   */\n  lt\n    /* \"#utility.yul\":639:772   */\n  iszero\n  tag_33\n  jumpi\n    /* \"#utility.yul\":741:755   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":737:760   */\n  dup2\n  add\n    /* \"#utility.yul\":731:761   */\n  mload\n    /* \"#utility.yul\":710:724   */\n  dup3\n  dup5\n  add\n    /* \"#utility.yul\":706:729   */\n  dup3\n  add\n    /* \"#utility.yul\":699:762   */\n  mstore\n    /* \"#utility.yul\":664:674   */\n  swap2\n  dup3\n  add\n  swap2\n    /* \"#utility.yul\":639:772   */\n  jump(tag_31)\ntag_33:\n    /* \"#utility.yul\":790:792   */\n  dup4\n    /* \"#utility.yul\":787:788   */\n  dup4\n    /* \"#utility.yul\":784:793   */\n  gt\n    /* \"#utility.yul\":781:783   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":849:854   */\n  dup5\n    /* \"#utility.yul\":844:846   */\n  dup2\n    /* \"#utility.yul\":839:841   */\n  dup6\n    /* \"#utility.yul\":831:837   */\n  dup5\n    /* \"#utility.yul\":827:842   */\n  add\n    /* \"#utility.yul\":823:847   */\n  add\n    /* \"#utility.yul\":816:855   */\n  mstore\n    /* \"#utility.yul\":781:783   */\ntag_34:\n  pop\n    /* \"#utility.yul\":883:889   */\n  swap6\n    /* \"#utility.yul\":80:895   */\n  swap5\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":900:1496   */\ntag_3:\n  0x00\n  dup1\n    /* \"#utility.yul\":1060:1062   */\n  0x40\n    /* \"#utility.yul\":1048:1057   */\n  dup4\n    /* \"#utility.yul\":1039:1046   */\n  dup6\n    /* \"#utility.yul\":1035:1058   */\n  sub\n    /* \"#utility.yul\":1031:1063   */\n  slt\n    /* \"#utility.yul\":1028:1030   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":1081:1087   */\n  dup2\n    /* \"#utility.yul\":1073:1079   */\n  dup3\n    /* \"#utility.yul\":1066:1088   */\n  revert\n    /* \"#utility.yul\":1028:1030   */\ntag_36:\n    /* \"#utility.yul\":1113:1129   */\n  dup3\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1178:1192   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1175:1177   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1210:1216   */\n  dup4\n    /* \"#utility.yul\":1202:1208   */\n  dup5\n    /* \"#utility.yul\":1195:1217   */\n  revert\n    /* \"#utility.yul\":1175:1177   */\ntag_37:\n    /* \"#utility.yul\":1238:1301   */\n  tag_38\n    /* \"#utility.yul\":1293:1300   */\n  dup7\n    /* \"#utility.yul\":1284:1290   */\n  dup4\n    /* \"#utility.yul\":1273:1282   */\n  dup8\n    /* \"#utility.yul\":1269:1291   */\n  add\n    /* \"#utility.yul\":1238:1301   */\n  tag_22\n  jump\t// in\ntag_38:\n    /* \"#utility.yul\":1228:1301   */\n  swap4\n  pop\n    /* \"#utility.yul\":1347:1349   */\n  0x20\n    /* \"#utility.yul\":1336:1345   */\n  dup6\n    /* \"#utility.yul\":1332:1350   */\n  add\n    /* \"#utility.yul\":1326:1351   */\n  mload\n    /* \"#utility.yul\":1310:1351   */\n  swap2\n  pop\n    /* \"#utility.yul\":1376:1378   */\n  dup1\n    /* \"#utility.yul\":1366:1374   */\n  dup3\n    /* \"#utility.yul\":1363:1379   */\n  gt\n    /* \"#utility.yul\":1360:1362   */\n  iszero\n  tag_39\n  jumpi\n    /* \"#utility.yul\":1397:1403   */\n  dup3\n    /* \"#utility.yul\":1389:1395   */\n  dup4\n    /* \"#utility.yul\":1382:1404   */\n  revert\n    /* \"#utility.yul\":1360:1362   */\ntag_39:\n  pop\n    /* \"#utility.yul\":1425:1490   */\n  tag_40\n    /* \"#utility.yul\":1482:1489   */\n  dup6\n    /* \"#utility.yul\":1471:1479   */\n  dup3\n    /* \"#utility.yul\":1460:1469   */\n  dup7\n    /* \"#utility.yul\":1456:1480   */\n  add\n    /* \"#utility.yul\":1425:1490   */\n  tag_22\n  jump\t// in\ntag_40:\n    /* \"#utility.yul\":1415:1490   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1018:1496   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1501:1881   */\ntag_11:\n    /* \"#utility.yul\":1586:1587   */\n  0x02\n    /* \"#utility.yul\":1576:1588   */\n  dup2\n  div\n    /* \"#utility.yul\":1633:1634   */\n  0x01\n    /* \"#utility.yul\":1623:1635   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1644:1646   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1698:1702   */\n  0x7f\n    /* \"#utility.yul\":1690:1696   */\n  dup3\n    /* \"#utility.yul\":1686:1703   */\n  and\n    /* \"#utility.yul\":1676:1703   */\n  swap2\n  pop\n    /* \"#utility.yul\":1644:1646   */\ntag_42:\n    /* \"#utility.yul\":1751:1753   */\n  0x20\n    /* \"#utility.yul\":1743:1749   */\n  dup3\n    /* \"#utility.yul\":1740:1754   */\n  lt\n    /* \"#utility.yul\":1720:1738   */\n  dup2\n    /* \"#utility.yul\":1717:1755   */\n  eq\n    /* \"#utility.yul\":1714:1716   */\n  iszero\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1797:1807   */\n  0x4e487b71\n    /* \"#utility.yul\":1792:1795   */\n  0xe0\n    /* \"#utility.yul\":1788:1808   */\n  shl\n    /* \"#utility.yul\":1785:1786   */\n  0x00\n    /* \"#utility.yul\":1778:1809   */\n  mstore\n    /* \"#utility.yul\":1832:1836   */\n  0x22\n    /* \"#utility.yul\":1829:1830   */\n  0x04\n    /* \"#utility.yul\":1822:1837   */\n  mstore\n    /* \"#utility.yul\":1860:1864   */\n  0x24\n    /* \"#utility.yul\":1857:1858   */\n  0x00\n    /* \"#utility.yul\":1850:1865   */\n  revert\n    /* \"#utility.yul\":1714:1716   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1556:1881   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1886:2013   */\ntag_27:\n    /* \"#utility.yul\":1947:1957   */\n  0x4e487b71\n    /* \"#utility.yul\":1942:1945   */\n  0xe0\n    /* \"#utility.yul\":1938:1958   */\n  shl\n    /* \"#utility.yul\":1935:1936   */\n  0x00\n    /* \"#utility.yul\":1928:1959   */\n  mstore\n    /* \"#utility.yul\":1978:1982   */\n  0x41\n    /* \"#utility.yul\":1975:1976   */\n  0x04\n    /* \"#utility.yul\":1968:1983   */\n  mstore\n    /* \"#utility.yul\":2002:2006   */\n  0x24\n    /* \"#utility.yul\":1999:2000   */\n  0x00\n    /* \"#utility.yul\":1992:2007   */\n  revert\n    /* \"#utility.yul\":1918:2013   */\ntag_21:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1401:13011  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_24\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      tag_34\n      tag_35\n      jump\t// in\n    tag_34:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3727:3916  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2208:2221  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2240:2245  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2233:2245  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2154:2252  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4514:4518  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4530:4543  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4546:4558  _msgSender() */\n      tag_71\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4546:4556  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4546:4558  _msgSender() */\n      jump\t// in\n    tag_71:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4530:4558  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4577:4582  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4584:4591  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4593:4599  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4576  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4568:4600  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4617:4621  true */\n      0x01\n      swap4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4431:4628  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3329:3341  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3242:3348  function totalSupply() public view virtual override returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n    tag_32:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5317:5321  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5333:5348  address spender */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5351:5363  _msgSender() */\n      tag_77\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5351:5361  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5351:5363  _msgSender() */\n      jump\t// in\n    tag_77:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5333:5363  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5389:5393  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5395:5402  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5404:5410  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5388  _spendAllowance */\n      tag_79\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5373:5411  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5431:5435  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5437:5439  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5441:5447  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5430  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5421:5448  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5465:5469  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5190:5476  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3173:3175  18 */\n      0x12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3091:3182  function decimals() public view virtual override returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5871:6105  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5959:5963  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5975:5988  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5991:6003  _msgSender() */\n      tag_84\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5991:6001  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5991:6003  _msgSender() */\n      jump\t// in\n    tag_84:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5975:6003  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6022:6027  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6029:6036  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6066:6076  addedValue */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      tag_86\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6048:6053  owner */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6055:6062  spender */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6047  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6063  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6038:6076  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6021  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6013:6077  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_45:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3480:3487  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3506:3524  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3406:3531  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_89:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2365:2467  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2421:2434  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2453:2460  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2446:2460  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6592:7019  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6685:6689  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6701:6714  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6717:6729  _msgSender() */\n      tag_97\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6717:6727  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6717:6729  _msgSender() */\n      jump\t// in\n    tag_97:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6701:6729  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6739:6763  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      tag_98\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6776:6781  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6783:6790  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6775  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6766:6791  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6739:6791  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6829:6844  subtractedValue */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6825  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6809:6844  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6801:6886  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_101\n      jump\t// in\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6929:6934  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6936:6943  spender */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6964:6979  subtractedValue */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6961  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6945:6979  currentAllowance - subtractedValue */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6928  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6920:6980  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3727:3916  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3806:3810  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3822:3835  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3850  _msgSender() */\n      tag_104\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3848  _msgSender */\n      tag_72\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3838:3850  _msgSender() */\n      jump\t// in\n    tag_104:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3822:3850  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      tag_73\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3870:3875  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3877:3879  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3881:3887  amount */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3869  _transfer */\n      tag_81\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3860:3888  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4063:4070  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4100  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4107  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4089:4116  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3974:4123  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_72:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10635:10654  owner != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10627:10695  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_111\n      jump\t// in\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10713:10734  spender != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10705:10773  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_114\n      jump\t// in\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10795  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10802  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10811  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10784:10820  _allowances[owner][spender] = amount */\n      dup5\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap1\n      tag_115\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10814:10820  amount */\n      dup6\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10835:10867  Approval(owner, spender, amount) */\n      tag_28\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10504:10874  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11309  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      tag_117\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11322:11327  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11329:11336  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11321  allowance */\n      tag_61\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11312:11337  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11285:11337  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11367  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11351:11388  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11347:11590  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11432:11438  amount */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11428  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11412:11438  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11404:11472  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_121\n      jump\t// in\n    tag_119:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11523:11528  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11530:11537  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11558:11564  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11555  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11539:11564  currentAllowance - amount */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11522  _approve */\n      tag_74\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11514:11565  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11155:11596  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7473:8291  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7599:7617  from != address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7591:7659  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_126\n      jump\t// in\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7677:7693  to != address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7669:7733  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_129\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7744:7782  _beforeTokenTransfer(from, to, amount) */\n      tag_130\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7765:7769  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7771:7773  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7775:7781  amount */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7744:7764  _beforeTokenTransfer */\n      tag_131\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7744:7782  _beforeTokenTransfer(from, to, amount) */\n      jump\t// in\n    tag_130:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7793:7812  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7815:7830  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7848:7869  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7840:7912  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_134\n      jump\t// in\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7955  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7961  _balances[from] */\n      dup2\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7964:7984  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7946:7984  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8174  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8161:8184  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7978:7984  amount */\n      dup7\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8210:8236  Transfer(from, to, amount) */\n      tag_28\n      jump\t// in\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8284  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8267:8271  from */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8273:8275  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8277:8283  amount */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":12180:12301  function _beforeTokenTransfer(... */\n    tag_131:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:189   */\n    tag_141:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_89\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_44:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_145:\n        /* \"#utility.yul\":355:386   */\n      tag_146\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_141\n      jump\t// in\n    tag_146:\n        /* \"#utility.yul\":345:386   */\n      swap4\n        /* \"#utility.yul\":264:392   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":397:671   */\n    tag_60:\n      0x00\n      dup1\n        /* \"#utility.yul\":526:528   */\n      0x40\n        /* \"#utility.yul\":514:523   */\n      dup4\n        /* \"#utility.yul\":505:512   */\n      dup6\n        /* \"#utility.yul\":501:524   */\n      sub\n        /* \"#utility.yul\":497:529   */\n      slt\n        /* \"#utility.yul\":494:496   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":547:553   */\n      dup1\n        /* \"#utility.yul\":539:545   */\n      dup2\n        /* \"#utility.yul\":532:554   */\n      revert\n        /* \"#utility.yul\":494:496   */\n    tag_148:\n        /* \"#utility.yul\":575:606   */\n      tag_149\n        /* \"#utility.yul\":596:605   */\n      dup4\n        /* \"#utility.yul\":575:606   */\n      tag_141\n      jump\t// in\n    tag_149:\n        /* \"#utility.yul\":565:606   */\n      swap2\n      pop\n        /* \"#utility.yul\":625:665   */\n      tag_150\n        /* \"#utility.yul\":661:663   */\n      0x20\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:664   */\n      add\n        /* \"#utility.yul\":625:665   */\n      tag_141\n      jump\t// in\n    tag_150:\n        /* \"#utility.yul\":615:665   */\n      swap1\n      pop\n        /* \"#utility.yul\":484:671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":676:1018   */\n    tag_31:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":822:824   */\n      0x60\n        /* \"#utility.yul\":810:819   */\n      dup5\n        /* \"#utility.yul\":801:808   */\n      dup7\n        /* \"#utility.yul\":797:820   */\n      sub\n        /* \"#utility.yul\":793:825   */\n      slt\n        /* \"#utility.yul\":790:792   */\n      iszero\n      tag_152\n      jumpi\n        /* \"#utility.yul\":843:849   */\n      dup1\n        /* \"#utility.yul\":835:841   */\n      dup2\n        /* \"#utility.yul\":828:850   */\n      revert\n        /* \"#utility.yul\":790:792   */\n    tag_152:\n        /* \"#utility.yul\":871:902   */\n      tag_153\n        /* \"#utility.yul\":892:901   */\n      dup5\n        /* \"#utility.yul\":871:902   */\n      tag_141\n      jump\t// in\n    tag_153:\n        /* \"#utility.yul\":861:902   */\n      swap3\n      pop\n        /* \"#utility.yul\":921:961   */\n      tag_154\n        /* \"#utility.yul\":957:959   */\n      0x20\n        /* \"#utility.yul\":946:955   */\n      dup6\n        /* \"#utility.yul\":942:960   */\n      add\n        /* \"#utility.yul\":921:961   */\n      tag_141\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":911:961   */\n      swap2\n      pop\n        /* \"#utility.yul\":1008:1010   */\n      0x40\n        /* \"#utility.yul\":997:1006   */\n      dup5\n        /* \"#utility.yul\":993:1011   */\n      add\n        /* \"#utility.yul\":980:1012   */\n      calldataload\n        /* \"#utility.yul\":970:1012   */\n      swap1\n      pop\n        /* \"#utility.yul\":780:1018   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1023:1289   */\n    tag_21:\n      0x00\n      dup1\n        /* \"#utility.yul\":1152:1154   */\n      0x40\n        /* \"#utility.yul\":1140:1149   */\n      dup4\n        /* \"#utility.yul\":1131:1138   */\n      dup6\n        /* \"#utility.yul\":1127:1150   */\n      sub\n        /* \"#utility.yul\":1123:1155   */\n      slt\n        /* \"#utility.yul\":1120:1122   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1173:1179   */\n      dup2\n        /* \"#utility.yul\":1165:1171   */\n      dup3\n        /* \"#utility.yul\":1158:1180   */\n      revert\n        /* \"#utility.yul\":1120:1122   */\n    tag_156:\n        /* \"#utility.yul\":1201:1232   */\n      tag_157\n        /* \"#utility.yul\":1222:1231   */\n      dup4\n        /* \"#utility.yul\":1201:1232   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1191:1232   */\n      swap5\n        /* \"#utility.yul\":1279:1281   */\n      0x20\n        /* \"#utility.yul\":1264:1282   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1251:1283   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1110:1289   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1481   */\n    tag_24:\n        /* \"#utility.yul\":1459:1473   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1452:1474   */\n      iszero\n        /* \"#utility.yul\":1434:1475   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1422:1424   */\n      0x20\n        /* \"#utility.yul\":1407:1425   */\n      add\n      swap1\n        /* \"#utility.yul\":1389:1481   */\n      jump\t// out\n        /* \"#utility.yul\":1486:2089   */\n    tag_18:\n      0x00\n        /* \"#utility.yul\":1627:1629   */\n      0x20\n        /* \"#utility.yul\":1656:1658   */\n      dup1\n        /* \"#utility.yul\":1645:1654   */\n      dup4\n        /* \"#utility.yul\":1638:1659   */\n      mstore\n        /* \"#utility.yul\":1688:1694   */\n      dup4\n        /* \"#utility.yul\":1682:1695   */\n      mload\n        /* \"#utility.yul\":1731:1737   */\n      dup1\n        /* \"#utility.yul\":1726:1728   */\n      dup3\n        /* \"#utility.yul\":1715:1724   */\n      dup6\n        /* \"#utility.yul\":1711:1729   */\n      add\n        /* \"#utility.yul\":1704:1738   */\n      mstore\n        /* \"#utility.yul\":1756:1760   */\n      dup3\n        /* \"#utility.yul\":1769:1909   */\n    tag_160:\n        /* \"#utility.yul\":1783:1789   */\n      dup2\n        /* \"#utility.yul\":1780:1781   */\n      dup2\n        /* \"#utility.yul\":1777:1790   */\n      lt\n        /* \"#utility.yul\":1769:1909   */\n      iszero\n      tag_162\n      jumpi\n        /* \"#utility.yul\":1878:1892   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":1874:1897   */\n      dup4\n      add\n        /* \"#utility.yul\":1868:1898   */\n      mload\n        /* \"#utility.yul\":1844:1861   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":1863:1865   */\n      0x40\n        /* \"#utility.yul\":1840:1866   */\n      add\n        /* \"#utility.yul\":1833:1899   */\n      mstore\n        /* \"#utility.yul\":1798:1808   */\n      dup3\n      add\n        /* \"#utility.yul\":1769:1909   */\n      jump(tag_160)\n    tag_162:\n        /* \"#utility.yul\":1927:1933   */\n      dup2\n        /* \"#utility.yul\":1924:1925   */\n      dup2\n        /* \"#utility.yul\":1921:1934   */\n      gt\n        /* \"#utility.yul\":1918:1920   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":1997:2001   */\n      dup4\n        /* \"#utility.yul\":1992:1994   */\n      0x40\n        /* \"#utility.yul\":1983:1989   */\n      dup4\n        /* \"#utility.yul\":1972:1981   */\n      dup8\n        /* \"#utility.yul\":1968:1990   */\n      add\n        /* \"#utility.yul\":1964:1995   */\n      add\n        /* \"#utility.yul\":1957:2002   */\n      mstore\n        /* \"#utility.yul\":1918:1920   */\n    tag_163:\n      pop\n        /* \"#utility.yul\":2073:2075   */\n      0x1f\n        /* \"#utility.yul\":2052:2067   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2048:2077   */\n      and\n        /* \"#utility.yul\":2033:2078   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2080:2082   */\n      0x40\n        /* \"#utility.yul\":2029:2083   */\n      add\n      swap4\n        /* \"#utility.yul\":1607:2089   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2094:2493   */\n    tag_129:\n        /* \"#utility.yul\":2296:2298   */\n      0x20\n        /* \"#utility.yul\":2278:2299   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2335:2337   */\n      0x23\n        /* \"#utility.yul\":2315:2333   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2308:2338   */\n      mstore\n        /* \"#utility.yul\":2374:2408   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2369:2371   */\n      0x40\n        /* \"#utility.yul\":2354:2372   */\n      dup3\n      add\n        /* \"#utility.yul\":2347:2409   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2440:2442   */\n      0x60\n        /* \"#utility.yul\":2425:2443   */\n      dup3\n      add\n        /* \"#utility.yul\":2418:2451   */\n      mstore\n        /* \"#utility.yul\":2483:2486   */\n      0x80\n        /* \"#utility.yul\":2468:2487   */\n      add\n      swap1\n        /* \"#utility.yul\":2268:2493   */\n      jump\t// out\n        /* \"#utility.yul\":2498:2896   */\n    tag_114:\n        /* \"#utility.yul\":2700:2702   */\n      0x20\n        /* \"#utility.yul\":2682:2703   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2739:2741   */\n      0x22\n        /* \"#utility.yul\":2719:2737   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2712:2742   */\n      mstore\n        /* \"#utility.yul\":2778:2812   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":2773:2775   */\n      0x40\n        /* \"#utility.yul\":2758:2776   */\n      dup3\n      add\n        /* \"#utility.yul\":2751:2813   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":2844:2846   */\n      0x60\n        /* \"#utility.yul\":2829:2847   */\n      dup3\n      add\n        /* \"#utility.yul\":2822:2854   */\n      mstore\n        /* \"#utility.yul\":2886:2889   */\n      0x80\n        /* \"#utility.yul\":2871:2890   */\n      add\n      swap1\n        /* \"#utility.yul\":2672:2896   */\n      jump\t// out\n        /* \"#utility.yul\":2901:3254   */\n    tag_121:\n        /* \"#utility.yul\":3103:3105   */\n      0x20\n        /* \"#utility.yul\":3085:3106   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3142:3144   */\n      0x1d\n        /* \"#utility.yul\":3122:3140   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3115:3145   */\n      mstore\n        /* \"#utility.yul\":3181:3212   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":3176:3178   */\n      0x40\n        /* \"#utility.yul\":3161:3179   */\n      dup3\n      add\n        /* \"#utility.yul\":3154:3213   */\n      mstore\n        /* \"#utility.yul\":3245:3247   */\n      0x60\n        /* \"#utility.yul\":3230:3248   */\n      add\n      swap1\n        /* \"#utility.yul\":3075:3254   */\n      jump\t// out\n        /* \"#utility.yul\":3259:3661   */\n    tag_134:\n        /* \"#utility.yul\":3461:3463   */\n      0x20\n        /* \"#utility.yul\":3443:3464   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3500:3502   */\n      0x26\n        /* \"#utility.yul\":3480:3498   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3473:3503   */\n      mstore\n        /* \"#utility.yul\":3539:3573   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":3534:3536   */\n      0x40\n        /* \"#utility.yul\":3519:3537   */\n      dup3\n      add\n        /* \"#utility.yul\":3512:3574   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":3605:3607   */\n      0x60\n        /* \"#utility.yul\":3590:3608   */\n      dup3\n      add\n        /* \"#utility.yul\":3583:3619   */\n      mstore\n        /* \"#utility.yul\":3651:3654   */\n      0x80\n        /* \"#utility.yul\":3636:3655   */\n      add\n      swap1\n        /* \"#utility.yul\":3433:3661   */\n      jump\t// out\n        /* \"#utility.yul\":3666:4067   */\n    tag_126:\n        /* \"#utility.yul\":3868:3870   */\n      0x20\n        /* \"#utility.yul\":3850:3871   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3907:3909   */\n      0x25\n        /* \"#utility.yul\":3887:3905   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3880:3910   */\n      mstore\n        /* \"#utility.yul\":3946:3980   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":3941:3943   */\n      0x40\n        /* \"#utility.yul\":3926:3944   */\n      dup3\n      add\n        /* \"#utility.yul\":3919:3981   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4012:4014   */\n      0x60\n        /* \"#utility.yul\":3997:4015   */\n      dup3\n      add\n        /* \"#utility.yul\":3990:4025   */\n      mstore\n        /* \"#utility.yul\":4057:4060   */\n      0x80\n        /* \"#utility.yul\":4042:4061   */\n      add\n      swap1\n        /* \"#utility.yul\":3840:4067   */\n      jump\t// out\n        /* \"#utility.yul\":4072:4472   */\n    tag_111:\n        /* \"#utility.yul\":4274:4276   */\n      0x20\n        /* \"#utility.yul\":4256:4277   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4313:4315   */\n      0x24\n        /* \"#utility.yul\":4293:4311   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4286:4316   */\n      mstore\n        /* \"#utility.yul\":4352:4386   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4347:4349   */\n      0x40\n        /* \"#utility.yul\":4332:4350   */\n      dup3\n      add\n        /* \"#utility.yul\":4325:4387   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":4418:4420   */\n      0x60\n        /* \"#utility.yul\":4403:4421   */\n      dup3\n      add\n        /* \"#utility.yul\":4396:4430   */\n      mstore\n        /* \"#utility.yul\":4462:4465   */\n      0x80\n        /* \"#utility.yul\":4447:4466   */\n      add\n      swap1\n        /* \"#utility.yul\":4246:4472   */\n      jump\t// out\n        /* \"#utility.yul\":4477:4878   */\n    tag_101:\n        /* \"#utility.yul\":4679:4681   */\n      0x20\n        /* \"#utility.yul\":4661:4682   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4718:4720   */\n      0x25\n        /* \"#utility.yul\":4698:4716   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4691:4721   */\n      mstore\n        /* \"#utility.yul\":4757:4791   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":4752:4754   */\n      0x40\n        /* \"#utility.yul\":4737:4755   */\n      dup3\n      add\n        /* \"#utility.yul\":4730:4792   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":4823:4825   */\n      0x60\n        /* \"#utility.yul\":4808:4826   */\n      dup3\n      add\n        /* \"#utility.yul\":4801:4836   */\n      mstore\n        /* \"#utility.yul\":4868:4871   */\n      0x80\n        /* \"#utility.yul\":4853:4872   */\n      add\n      swap1\n        /* \"#utility.yul\":4651:4878   */\n      jump\t// out\n        /* \"#utility.yul\":4883:5060   */\n    tag_28:\n        /* \"#utility.yul\":5029:5054   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5017:5019   */\n      0x20\n        /* \"#utility.yul\":5002:5020   */\n      add\n      swap1\n        /* \"#utility.yul\":4984:5060   */\n      jump\t// out\n        /* \"#utility.yul\":5065:5249   */\n    tag_37:\n        /* \"#utility.yul\":5237:5241   */\n      0xff\n        /* \"#utility.yul\":5225:5242   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5207:5243   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5195:5197   */\n      0x20\n        /* \"#utility.yul\":5180:5198   */\n      add\n      swap1\n        /* \"#utility.yul\":5162:5249   */\n      jump\t// out\n        /* \"#utility.yul\":5254:5483   */\n    tag_88:\n      0x00\n        /* \"#utility.yul\":5325:5326   */\n      dup3\n        /* \"#utility.yul\":5321:5327   */\n      not\n        /* \"#utility.yul\":5318:5319   */\n      dup3\n        /* \"#utility.yul\":5315:5328   */\n      gt\n        /* \"#utility.yul\":5312:5314   */\n      iszero\n      tag_174\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5351:5384   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5407:5411   */\n      0x11\n        /* \"#utility.yul\":5404:5405   */\n      0x04\n        /* \"#utility.yul\":5397:5412   */\n      mstore\n        /* \"#utility.yul\":5437:5441   */\n      0x24\n        /* \"#utility.yul\":5358:5361   */\n      dup2\n        /* \"#utility.yul\":5425:5442   */\n      revert\n        /* \"#utility.yul\":5312:5314   */\n    tag_174:\n      pop\n        /* \"#utility.yul\":5468:5477   */\n      add\n      swap1\n        /* \"#utility.yul\":5302:5483   */\n      jump\t// out\n        /* \"#utility.yul\":5488:5868   */\n    tag_65:\n        /* \"#utility.yul\":5573:5574   */\n      0x02\n        /* \"#utility.yul\":5563:5575   */\n      dup2\n      div\n        /* \"#utility.yul\":5620:5621   */\n      0x01\n        /* \"#utility.yul\":5610:5622   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5631:5633   */\n      tag_176\n      jumpi\n        /* \"#utility.yul\":5685:5689   */\n      0x7f\n        /* \"#utility.yul\":5677:5683   */\n      dup3\n        /* \"#utility.yul\":5673:5690   */\n      and\n        /* \"#utility.yul\":5663:5690   */\n      swap2\n      pop\n        /* \"#utility.yul\":5631:5633   */\n    tag_176:\n        /* \"#utility.yul\":5738:5740   */\n      0x20\n        /* \"#utility.yul\":5730:5736   */\n      dup3\n        /* \"#utility.yul\":5727:5741   */\n      lt\n        /* \"#utility.yul\":5707:5725   */\n      dup2\n        /* \"#utility.yul\":5704:5742   */\n      eq\n        /* \"#utility.yul\":5701:5703   */\n      iszero\n      tag_177\n      jumpi\n        /* \"#utility.yul\":5784:5794   */\n      0x4e487b71\n        /* \"#utility.yul\":5779:5782   */\n      0xe0\n        /* \"#utility.yul\":5775:5795   */\n      shl\n        /* \"#utility.yul\":5772:5773   */\n      0x00\n        /* \"#utility.yul\":5765:5796   */\n      mstore\n        /* \"#utility.yul\":5819:5823   */\n      0x22\n        /* \"#utility.yul\":5816:5817   */\n      0x04\n        /* \"#utility.yul\":5809:5824   */\n      mstore\n        /* \"#utility.yul\":5847:5851   */\n      0x24\n        /* \"#utility.yul\":5844:5845   */\n      0x00\n        /* \"#utility.yul\":5837:5852   */\n      revert\n        /* \"#utility.yul\":5701:5703   */\n    tag_177:\n      pop\n        /* \"#utility.yul\":5543:5868   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220374e45a48c2c48ad0ecd7c35a6668683ed15f0ef4c0ba4b17ed4e99b25b17cea64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2015:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "80:815:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "129:24:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "138:5:8"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "145:5:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "131:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "131:20:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "131:20:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "108:6:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "116:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "104:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "104:17:8"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "123:3:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "100:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "100:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "93:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "93:35:8"
															},
															"nodeType": "YulIf",
															"src": "90:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "162:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "172:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "172:13:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "166:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "194:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "212:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "216:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "208:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "208:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "220:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "204:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "204:18:8"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "198:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "245:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "247:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "247:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "247:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "237:2:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "241:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "234:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "234:10:8"
															},
															"nodeType": "YulIf",
															"src": "231:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "276:23:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "296:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "290:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "290:9:8"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "280:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "308:14:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "318:4:8",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "312:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "331:67:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "357:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "373:2:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "377:4:8",
																								"type": "",
																								"value": "0x1f"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "369:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "369:13:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "388:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "384:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "384:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "365:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "365:27:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "353:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "353:40:8"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "395:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "349:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "349:49:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "335:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "457:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "459:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "459:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "459:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "416:10:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "428:2:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "413:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "413:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "436:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "448:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "433:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "433:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "410:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "410:46:8"
															},
															"nodeType": "YulIf",
															"src": "407:2:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "495:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "499:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "488:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "488:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "488:22:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "526:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "534:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "519:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "519:18:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "519:18:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "583:24:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "592:5:8"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "599:5:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "585:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "585:20:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "585:20:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "560:6:8"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "568:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "556:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "556:15:8"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "573:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "552:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "552:24:8"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "578:3:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "549:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "549:33:8"
															},
															"nodeType": "YulIf",
															"src": "546:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "616:14:8",
															"value": {
																"name": "array",
																"nodeType": "YulIdentifier",
																"src": "625:5:8"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "620:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "685:87:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "714:6:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "722:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "710:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "710:14:8"
																						},
																						{
																							"name": "_3",
																							"nodeType": "YulIdentifier",
																							"src": "726:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "706:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "706:23:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "745:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "753:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "741:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "741:14:8"
																								},
																								{
																									"name": "_3",
																									"nodeType": "YulIdentifier",
																									"src": "757:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "737:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "737:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "731:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "731:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "699:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "699:63:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "699:63:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "650:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "653:2:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "647:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "647:9:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "657:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "659:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "668:1:8"
																				},
																				{
																					"name": "_3",
																					"nodeType": "YulIdentifier",
																					"src": "671:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "664:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "664:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "659:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "643:3:8",
																"statements": []
															},
															"src": "639:133:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "802:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "831:6:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "839:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "827:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "827:15:8"
																						},
																						{
																							"name": "_3",
																							"nodeType": "YulIdentifier",
																							"src": "844:2:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "823:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "823:24:8"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "849:5:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "816:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "816:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "816:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "787:1:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "790:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "784:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "784:9:8"
															},
															"nodeType": "YulIf",
															"src": "781:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "874:15:8",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "883:6:8"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "874:5:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_t_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "54:6:8",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "62:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "70:5:8",
														"type": ""
													}
												],
												"src": "14:881:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1018:478:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1064:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1073:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1081:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1066:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1066:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1066:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1039:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1048:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1035:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1035:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1060:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1031:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1031:32:8"
															},
															"nodeType": "YulIf",
															"src": "1028:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1099:30:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1119:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1113:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1113:16:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1103:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1138:28:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1156:2:8",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1160:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1152:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1152:10:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1164:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1148:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1148:18:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1142:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1193:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1202:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1210:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1195:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1195:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1195:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1181:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1189:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1178:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1178:14:8"
															},
															"nodeType": "YulIf",
															"src": "1175:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1228:73:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1273:9:8"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1284:6:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1269:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1269:22:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1293:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1238:30:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1238:63:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1228:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1310:41:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1336:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1347:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1332:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1332:18:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1326:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1326:25:8"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1314:8:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1380:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1389:6:8"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "1397:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1382:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1382:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1382:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1366:8:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1376:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1363:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1363:16:8"
															},
															"nodeType": "YulIf",
															"src": "1360:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1415:75:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1460:9:8"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1471:8:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1456:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1456:24:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1482:7:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1425:30:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1425:65:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1415:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "976:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "987:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "999:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1007:6:8",
														"type": ""
													}
												],
												"src": "900:596:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1556:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1566:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1580:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1586:1:8",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "1576:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1576:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1566:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1597:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1627:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1633:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1623:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1623:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1601:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1674:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1676:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1690:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1698:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1686:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1686:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1676:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1654:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1647:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1647:26:8"
															},
															"nodeType": "YulIf",
															"src": "1644:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1764:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1785:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1792:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1797:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1788:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1788:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1778:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1778:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1778:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1829:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1832:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1822:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1822:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1822:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1857:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1860:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1850:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1850:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1850:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1720:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1743:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1751:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1740:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1740:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1717:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:38:8"
															},
															"nodeType": "YulIf",
															"src": "1714:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1536:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1545:6:8",
														"type": ""
													}
												],
												"src": "1501:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1918:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1935:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1942:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1947:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1938:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1938:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1928:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1928:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1928:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1975:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1978:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1968:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1968:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1968:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1999:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2002:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1992:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1992:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1992:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "1886:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let _3 := 0x20\n        let newFreePtr := add(add(memPtr, and(add(_1, 0x1f), not(31))), _3)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        if gt(add(add(offset, _1), _3), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _3) }\n        {\n            mstore(add(add(memPtr, i), _3), mload(add(add(offset, i), _3)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _3), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_t_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_t_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60806040523480156200001157600080fd5b5060405162000b9a38038062000b9a8339810160408190526200003491620001b9565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b50505062000273565b828054620000769062000220565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c6200025d565b6040516020601f8401601f19168201810183811183821017156200016457620001646200025d565b60405283825285840181018710156200017b578485fd5b8492505b838310156200019e57858301810151828401820152918201916200017f565b83831115620001af57848185840101525b5095945050505050565b60008060408385031215620001cc578182fd5b82516001600160401b0380821115620001e3578384fd5b620001f1868387016200010e565b9350602085015191508082111562000207578283fd5b5062000216858286016200010e565b9150509250929050565b6002810460018216806200023557607f821691505b602082108114156200025757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61091780620002836000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610648565b60405180910390f35b6100df6100da366004610614565b610222565b6040516100c3919061063d565b6100f4610244565b6040516100c3919061086b565b6100df61010f3660046105d9565b61024a565b61011c610278565b6040516100c39190610874565b6100df610137366004610614565b61027d565b6100f461014a366004610586565b6102a9565b6100b66102c8565b6100df610165366004610614565b6102d7565b6100df610178366004610614565b610328565b6100f461018b3660046105a7565b610340565b60606003805461019f906108a6565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108a6565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b60008061022d61036b565b905061023a81858561036f565b5060019392505050565b60025490565b60008061025561036b565b9050610262858285610423565b61026d85858561046d565b506001949350505050565b601290565b60008061028861036b565b905061023a81858561029a8589610340565b6102a49190610882565b61036f565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f906108a6565b6000806102e261036b565b905060006102f08286610340565b90508381101561031b5760405162461bcd60e51b815260040161031290610826565b60405180910390fd5b61026d828686840361036f565b60008061033361036b565b905061023a81858561046d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166103955760405162461bcd60e51b8152600401610312906107e2565b6001600160a01b0382166103bb5760405162461bcd60e51b8152600401610312906106de565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061041690859061086b565b60405180910390a3505050565b600061042f8484610340565b90506000198114610467578181101561045a5760405162461bcd60e51b815260040161031290610720565b610467848484840361036f565b50505050565b6001600160a01b0383166104935760405162461bcd60e51b81526004016103129061079d565b6001600160a01b0382166104b95760405162461bcd60e51b81526004016103129061069b565b6104c483838361056a565b6001600160a01b038316600090815260208190526040902054818110156104fd5760405162461bcd60e51b815260040161031290610757565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061055b90869061086b565b60405180910390a36104678484845b505050565b80356001600160a01b03811681146102c357600080fd5b600060208284031215610597578081fd5b6105a08261056f565b9392505050565b600080604083850312156105b9578081fd5b6105c28361056f565b91506105d06020840161056f565b90509250929050565b6000806000606084860312156105ed578081fd5b6105f68461056f565b92506106046020850161056f565b9150604084013590509250925092565b60008060408385031215610626578182fd5b61062f8361056f565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561067457858101830151858201604001528201610658565b818111156106855783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108a157634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806108ba57607f821691505b602082108114156108db57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220374e45a48c2c48ad0ecd7c35a6668683ed15f0ef4c0ba4b17ed4e99b25b17cea64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB9A CODESIZE SUB DUP1 PUSH3 0xB9A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1B9 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x273 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x220 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x25D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x1F NOT AND DUP3 ADD DUP2 ADD DUP4 DUP2 GT DUP4 DUP3 LT OR ISZERO PUSH3 0x164 JUMPI PUSH3 0x164 PUSH3 0x25D JUMP JUMPDEST PUSH1 0x40 MSTORE DUP4 DUP3 MSTORE DUP6 DUP5 ADD DUP2 ADD DUP8 LT ISZERO PUSH3 0x17B JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP3 POP JUMPDEST DUP4 DUP4 LT ISZERO PUSH3 0x19E JUMPI DUP6 DUP4 ADD DUP2 ADD MLOAD DUP3 DUP5 ADD DUP3 ADD MSTORE SWAP2 DUP3 ADD SWAP2 PUSH3 0x17F JUMP JUMPDEST DUP4 DUP4 GT ISZERO PUSH3 0x1AF JUMPI DUP5 DUP2 DUP6 DUP5 ADD ADD MSTORE JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1CC JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1E3 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F1 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x207 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x216 DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x235 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x257 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x917 DUP1 PUSH3 0x283 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x63D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH2 0x11C PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x874 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x27D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x586 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2C8 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x328 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x5A7 JUMP JUMPDEST PUSH2 0x340 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8A6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x8A6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22D PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x36F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x255 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x262 DUP6 DUP3 DUP6 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x26D DUP6 DUP6 DUP6 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x288 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x29A DUP6 DUP10 PUSH2 0x340 JUMP JUMPDEST PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E2 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F0 DUP3 DUP7 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x826 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26D DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x36F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x333 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x416 SWAP1 DUP6 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F DUP5 DUP5 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x467 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x720 JUMP JUMPDEST PUSH2 0x467 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x36F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x69B JUMP JUMPDEST PUSH2 0x4C4 DUP4 DUP4 DUP4 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x757 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x55B SWAP1 DUP7 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x467 DUP5 DUP5 DUP5 JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x597 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5A0 DUP3 PUSH2 0x56F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5B9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5C2 DUP4 PUSH2 0x56F JUMP JUMPDEST SWAP2 POP PUSH2 0x5D0 PUSH1 0x20 DUP5 ADD PUSH2 0x56F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5ED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5F6 DUP5 PUSH2 0x56F JUMP JUMPDEST SWAP3 POP PUSH2 0x604 PUSH1 0x20 DUP6 ADD PUSH2 0x56F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x626 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x62F DUP4 PUSH2 0x56F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x674 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x658 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x685 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x8BA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0x4E GASLIMIT LOG4 DUP13 0x2C 0x48 0xAD 0xE 0xCD PUSH29 0x35A6668683ED15F0EF4C0BA4B17ED4E99B25B17CEA64736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "1401:11610:2:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2042:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2065:17:2;;;;:7;;:17;;;;;:::i;:::-;;1976:113;;1401:11610;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:11610:2;;;-1:-1:-1;1401:11610:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:881:8;;123:3;116:4;108:6;104:17;100:27;90:2;;145:5;138;131:20;90:2;172:13;;-1:-1:-1;;;;;234:10:8;;;231:2;;;247:18;;:::i;:::-;296:2;290:9;318:4;388:2;369:13;;-1:-1:-1;;365:27:8;353:40;;349:49;;413:18;;;433:22;;;410:46;407:2;;;459:18;;:::i;:::-;495:2;488:22;519:18;;;556:15;;;552:24;;549:33;-1:-1:-1;546:2:8;;;599:5;592;585:20;546:2;625:5;616:14;;639:133;653:2;650:1;647:9;639:133;;;741:14;;;737:23;;731:30;710:14;;;706:23;;699:63;664:10;;;;639:133;;;790:2;787:1;784:9;781:2;;;849:5;844:2;839;831:6;827:15;823:24;816:39;781:2;-1:-1:-1;883:6:8;80:815;-1:-1:-1;;;;;80:815:8:o;900:596::-;;;1060:2;1048:9;1039:7;1035:23;1031:32;1028:2;;;1081:6;1073;1066:22;1028:2;1113:16;;-1:-1:-1;;;;;1178:14:8;;;1175:2;;;1210:6;1202;1195:22;1175:2;1238:63;1293:7;1284:6;1273:9;1269:22;1238:63;:::i;:::-;1228:73;;1347:2;1336:9;1332:18;1326:25;1310:41;;1376:2;1366:8;1363:16;1360:2;;;1397:6;1389;1382:22;1360:2;;1425:65;1482:7;1471:8;1460:9;1456:24;1425:65;:::i;:::-;1415:75;;;1018:478;;;;;:::o;1501:380::-;1586:1;1576:12;;1633:1;1623:12;;;1644:2;;1698:4;1690:6;1686:17;1676:27;;1644:2;1751;1743:6;1740:14;1720:18;1717:38;1714:2;;;1797:10;1792:3;1788:20;1785:1;1778:31;1832:4;1829:1;1822:15;1860:4;1857:1;1850:15;1714:2;;1556:325;;;:::o;1886:127::-;1947:10;1942:3;1938:20;1935:1;1928:31;1978:4;1975:1;1968:15;2002:4;1999:1;1992:15;1918:95;1401:11610:2;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5870:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:8"
															},
															"nodeType": "YulIf",
															"src": "113:2:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:8",
														"type": ""
													}
												],
												"src": "14:175:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:8"
															},
															"nodeType": "YulIf",
															"src": "274:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:8",
														"type": ""
													}
												],
												"src": "194:198:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:187:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "530:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:8"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "547:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "532:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "532:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "532:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "505:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "514:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "501:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "501:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "526:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "497:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "497:32:8"
															},
															"nodeType": "YulIf",
															"src": "494:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "565:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "596:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "575:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "575:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "565:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "615:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "625:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "625:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "615:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "442:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "453:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "465:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "473:6:8",
														"type": ""
													}
												],
												"src": "397:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "780:238:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "826:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:8"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "843:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "828:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "828:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "828:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "801:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "810:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "797:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "797:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "822:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "793:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:32:8"
															},
															"nodeType": "YulIf",
															"src": "790:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "861:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "892:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "871:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "871:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "861:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "911:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "946:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "957:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "942:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "942:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "921:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "970:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "997:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1008:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "993:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "993:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "980:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "970:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "730:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "741:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "753:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "761:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "769:6:8",
														"type": ""
													}
												],
												"src": "676:342:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1110:179:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1165:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1173:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1158:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1131:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1140:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1127:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1127:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1152:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1123:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:32:8"
															},
															"nodeType": "YulIf",
															"src": "1120:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1191:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1222:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1201:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1201:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1191:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1241:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1268:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1279:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1264:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1264:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1251:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1241:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1079:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1091:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1099:6:8",
														"type": ""
													}
												],
												"src": "1023:266:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1389:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1399:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1411:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1422:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1407:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1407:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1399:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1441:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1466:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1459:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1459:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1452:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1452:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1434:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1434:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1434:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1358:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1369:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1380:4:8",
														"type": ""
													}
												],
												"src": "1294:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1607:482:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1617:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1627:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1621:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1645:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1656:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1638:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1638:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1638:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1668:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1688:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1682:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1682:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1672:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1715:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1726:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1711:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1711:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1731:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1704:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1704:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1704:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1747:13:8",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1756:4:8"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1751:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1819:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1848:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1859:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1844:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1844:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1863:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1840:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1840:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "1882:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1890:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1878:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1878:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1894:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1874:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1874:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1868:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1868:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1833:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1833:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1833:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1780:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1783:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1777:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1777:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1791:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1793:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1802:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1805:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1798:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1798:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1793:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1773:3:8",
																"statements": []
															},
															"src": "1769:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1943:69:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "1972:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "1983:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1968:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1968:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1992:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1964:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1964:31:8"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "1997:4:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1957:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1957:45:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1957:45:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1924:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1927:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1921:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1921:13:8"
															},
															"nodeType": "YulIf",
															"src": "1918:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2021:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2037:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2056:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2064:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2052:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2052:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2073:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2069:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2069:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2048:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2048:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2033:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2033:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2080:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2029:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2029:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2021:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1576:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1587:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1598:4:8",
														"type": ""
													}
												],
												"src": "1486:603:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2268:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2285:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2296:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2278:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2278:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2278:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2319:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2330:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2315:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2315:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2335:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2308:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2308:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2358:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2369:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2354:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2354:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2374:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2347:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2347:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2347:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2429:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2440:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2425:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2425:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2445:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2418:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2418:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2418:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2460:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2472:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2483:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2468:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2460:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2245:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2259:4:8",
														"type": ""
													}
												],
												"src": "2094:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2672:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2689:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2700:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2682:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2682:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2723:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2734:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2719:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2719:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2739:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2712:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2712:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2712:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2762:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2773:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2758:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2758:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2778:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2751:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2751:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2751:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2833:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2844:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2829:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2829:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2849:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2822:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2822:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2822:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2863:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2875:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2886:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2871:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2871:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2863:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2649:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2663:4:8",
														"type": ""
													}
												],
												"src": "2498:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3075:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3092:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3103:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3085:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3085:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3085:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3126:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3137:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3122:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3122:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3142:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3115:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3115:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3115:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3165:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3176:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3161:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3161:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3181:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3154:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3154:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3154:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3222:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3234:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3245:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3230:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3230:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3222:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3052:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3066:4:8",
														"type": ""
													}
												],
												"src": "2901:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3433:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3450:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3461:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3443:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3443:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3443:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3484:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3495:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3480:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3480:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3500:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3473:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3473:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3473:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3523:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3534:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3519:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3519:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3539:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3512:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3512:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3512:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3594:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3605:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3590:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3590:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3610:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3583:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3583:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3583:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3628:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3640:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3651:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3636:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3636:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3628:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3410:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3424:4:8",
														"type": ""
													}
												],
												"src": "3259:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3840:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3857:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3868:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3850:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3850:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3850:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3891:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3902:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3887:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3887:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3907:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3880:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3880:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3880:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3930:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3941:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3926:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3926:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3946:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3919:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3919:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3919:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4001:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4012:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3997:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3997:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4017:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3990:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3990:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3990:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4034:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4046:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4057:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4042:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4042:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4034:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3817:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3831:4:8",
														"type": ""
													}
												],
												"src": "3666:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4246:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4263:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4274:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4256:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4256:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4256:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4297:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4308:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4293:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4293:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4313:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4286:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4286:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4286:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4336:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4347:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4332:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4332:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4352:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4325:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4325:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4325:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4407:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4418:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4403:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4403:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4423:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4396:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4396:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4396:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4439:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4451:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4462:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4447:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4447:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4439:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4223:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4237:4:8",
														"type": ""
													}
												],
												"src": "4072:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4651:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4668:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4679:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4661:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4661:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4661:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4702:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4713:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4698:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4698:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4718:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4691:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4691:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4691:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4741:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4752:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4737:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4737:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4757:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4730:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4730:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4730:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4812:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4823:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4808:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4808:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4828:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4801:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4801:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4801:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4845:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4857:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4868:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4853:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4853:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4845:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4628:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4642:4:8",
														"type": ""
													}
												],
												"src": "4477:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4984:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4994:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5006:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5017:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5002:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5002:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4994:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5036:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5047:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5029:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5029:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5029:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4953:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4964:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4975:4:8",
														"type": ""
													}
												],
												"src": "4883:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5162:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5172:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5184:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5195:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5180:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5180:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5172:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5214:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5229:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5237:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5225:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5225:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5207:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5207:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5207:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5131:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5142:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5153:4:8",
														"type": ""
													}
												],
												"src": "5065:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5302:181:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5337:115:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5358:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5367:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5372:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5363:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5363:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5351:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5351:33:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5351:33:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5404:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5407:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5397:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5397:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5397:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "5432:3:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5437:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5425:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5425:17:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5425:17:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5318:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5325:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5321:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5321:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5315:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5315:13:8"
															},
															"nodeType": "YulIf",
															"src": "5312:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5461:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5472:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5475:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5468:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5468:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5461:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5285:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5288:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5294:3:8",
														"type": ""
													}
												],
												"src": "5254:229:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5543:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5553:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5567:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5573:1:8",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5563:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5563:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5553:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5584:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5614:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5620:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5610:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5610:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5588:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5661:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5663:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5677:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5685:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5673:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5673:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5663:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5641:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5634:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5634:26:8"
															},
															"nodeType": "YulIf",
															"src": "5631:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5751:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5772:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5779:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5784:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5775:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5775:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5765:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5765:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5765:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5816:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5819:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5809:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5809:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5809:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5844:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5847:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5837:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5837:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5837:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5707:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5730:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5738:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5727:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5727:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5704:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5704:38:8"
															},
															"nodeType": "YulIf",
															"src": "5701:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5523:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5532:6:8",
														"type": ""
													}
												],
												"src": "5488:380:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012957806370a082311461013c57806395d89b411461014f578063a457c2d714610157578063a9059cbb1461016a578063dd62ed3e1461017d576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ec57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b6610190565b6040516100c39190610648565b60405180910390f35b6100df6100da366004610614565b610222565b6040516100c3919061063d565b6100f4610244565b6040516100c3919061086b565b6100df61010f3660046105d9565b61024a565b61011c610278565b6040516100c39190610874565b6100df610137366004610614565b61027d565b6100f461014a366004610586565b6102a9565b6100b66102c8565b6100df610165366004610614565b6102d7565b6100df610178366004610614565b610328565b6100f461018b3660046105a7565b610340565b60606003805461019f906108a6565b80601f01602080910402602001604051908101604052809291908181526020018280546101cb906108a6565b80156102185780601f106101ed57610100808354040283529160200191610218565b820191906000526020600020905b8154815290600101906020018083116101fb57829003601f168201915b5050505050905090565b60008061022d61036b565b905061023a81858561036f565b5060019392505050565b60025490565b60008061025561036b565b9050610262858285610423565b61026d85858561046d565b506001949350505050565b601290565b60008061028861036b565b905061023a81858561029a8589610340565b6102a49190610882565b61036f565b6001600160a01b0381166000908152602081905260409020545b919050565b60606004805461019f906108a6565b6000806102e261036b565b905060006102f08286610340565b90508381101561031b5760405162461bcd60e51b815260040161031290610826565b60405180910390fd5b61026d828686840361036f565b60008061033361036b565b905061023a81858561046d565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166103955760405162461bcd60e51b8152600401610312906107e2565b6001600160a01b0382166103bb5760405162461bcd60e51b8152600401610312906106de565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061041690859061086b565b60405180910390a3505050565b600061042f8484610340565b90506000198114610467578181101561045a5760405162461bcd60e51b815260040161031290610720565b610467848484840361036f565b50505050565b6001600160a01b0383166104935760405162461bcd60e51b81526004016103129061079d565b6001600160a01b0382166104b95760405162461bcd60e51b81526004016103129061069b565b6104c483838361056a565b6001600160a01b038316600090815260208190526040902054818110156104fd5760405162461bcd60e51b815260040161031290610757565b6001600160a01b0380851660008181526020819052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061055b90869061086b565b60405180910390a36104678484845b505050565b80356001600160a01b03811681146102c357600080fd5b600060208284031215610597578081fd5b6105a08261056f565b9392505050565b600080604083850312156105b9578081fd5b6105c28361056f565b91506105d06020840161056f565b90509250929050565b6000806000606084860312156105ed578081fd5b6105f68461056f565b92506106046020850161056f565b9150604084013590509250925092565b60008060408385031215610626578182fd5b61062f8361056f565b946020939093013593505050565b901515815260200190565b6000602080835283518082850152825b8181101561067457858101830151858201604001528201610658565b818111156106855783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b6020808252601d908201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604082015260600190565b60208082526026908201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604082015265616c616e636560d01b606082015260800190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526025908201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604082015264207a65726f60d81b606082015260800190565b90815260200190565b60ff91909116815260200190565b600082198211156108a157634e487b7160e01b81526011600452602481fd5b500190565b6002810460018216806108ba57607f821691505b602082108114156108db57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220374e45a48c2c48ad0ecd7c35a6668683ed15f0ef4c0ba4b17ed4e99b25b17cea64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x129 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x14F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x157 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x17D JUMPI PUSH2 0xA9 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEC JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x648 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x63D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x244 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x5D9 JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH2 0x11C PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x874 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x137 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x27D JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x14A CALLDATASIZE PUSH1 0x4 PUSH2 0x586 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2C8 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x165 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x2D7 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x328 JUMP JUMPDEST PUSH2 0xF4 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x5A7 JUMP JUMPDEST PUSH2 0x340 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8A6 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1CB SWAP1 PUSH2 0x8A6 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x218 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1ED JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1FB JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x22D PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x36F JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x255 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x262 DUP6 DUP3 DUP6 PUSH2 0x423 JUMP JUMPDEST PUSH2 0x26D DUP6 DUP6 DUP6 PUSH2 0x46D JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x12 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x288 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x29A DUP6 DUP10 PUSH2 0x340 JUMP JUMPDEST PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x882 JUMP JUMPDEST PUSH2 0x36F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x19F SWAP1 PUSH2 0x8A6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2E2 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x2F0 DUP3 DUP7 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x31B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x826 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x26D DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x36F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x333 PUSH2 0x36B JUMP JUMPDEST SWAP1 POP PUSH2 0x23A DUP2 DUP6 DUP6 PUSH2 0x46D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x395 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x7E2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x6DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x416 SWAP1 DUP6 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x42F DUP5 DUP5 PUSH2 0x340 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x467 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x45A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x720 JUMP JUMPDEST PUSH2 0x467 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x36F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x493 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4B9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x69B JUMP JUMPDEST PUSH2 0x4C4 DUP4 DUP4 DUP4 PUSH2 0x56A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x312 SWAP1 PUSH2 0x757 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x55B SWAP1 DUP7 SWAP1 PUSH2 0x86B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x467 DUP5 DUP5 DUP5 JUMPDEST POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x597 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5A0 DUP3 PUSH2 0x56F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x5B9 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5C2 DUP4 PUSH2 0x56F JUMP JUMPDEST SWAP2 POP PUSH2 0x5D0 PUSH1 0x20 DUP5 ADD PUSH2 0x56F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x5ED JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x5F6 DUP5 PUSH2 0x56F JUMP JUMPDEST SWAP3 POP PUSH2 0x604 PUSH1 0x20 DUP6 ADD PUSH2 0x56F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x626 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x62F DUP4 PUSH2 0x56F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x674 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x658 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x685 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x8A1 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x8BA JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x8DB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0x4E GASLIMIT LOG4 DUP13 0x2C 0x48 0xAD 0xE 0xCD PUSH29 0x35A6668683ED15F0EF4C0BA4B17ED4E99B25B17CEA64736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "1401:11610:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;3242:106::-;;;:::i;:::-;;;;;;;:::i;5190:286::-;;;;;;:::i;:::-;;:::i;3091:91::-;;;:::i;:::-;;;;;;;:::i;5871:234::-;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;;:::i;2365:102::-;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;;:::i;2154:98::-;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;4530:13;4546:12;:10;:12::i;:::-;4530:28;;4568:32;4577:5;4584:7;4593:6;4568:8;:32::i;:::-;-1:-1:-1;4617:4:2;;4431:197;-1:-1:-1;;;4431:197:2:o;3242:106::-;3329:12;;3242:106;:::o;5190:286::-;5317:4;5333:15;5351:12;:10;:12::i;:::-;5333:30;;5373:38;5389:4;5395:7;5404:6;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:2;;5190:286;-1:-1:-1;;;;5190:286:2:o;3091:91::-;3173:2;3091:91;:::o;5871:234::-;5959:4;5975:13;5991:12;:10;:12::i;:::-;5975:28;;6013:64;6022:5;6029:7;6066:10;6038:25;6048:5;6055:7;6038:9;:25::i;:::-;:38;;;;:::i;:::-;6013:8;:64::i;3406:125::-;-1:-1:-1;;;;;3506:18:2;;3480:7;3506:18;;;;;;;;;;;3406:125;;;;:::o;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;6685:4;6701:13;6717:12;:10;:12::i;:::-;6701:28;;6739:24;6766:25;6776:5;6783:7;6766:9;:25::i;:::-;6739:52;;6829:15;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:2;;;;;;;:::i;:::-;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;3822:13;3838:12;:10;:12::i;:::-;3822:28;;3860;3870:5;3877:2;3881:6;3860:9;:28::i;3974:149::-;-1:-1:-1;;;;;4089:18:2;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149::o;640:96:5:-;719:10;640:96;:::o;10504:370:2:-;-1:-1:-1;;;;;10635:19:2;;10627:68;;;;-1:-1:-1;;;10627:68:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;10713:21:2;;10705:68;;;;-1:-1:-1;;;10705:68:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;10784:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;10835:32;;;;;10814:6;;10835:32;:::i;:::-;;;;;;;;10504:370;;;:::o;11155:441::-;11285:24;11312:25;11322:5;11329:7;11312:9;:25::i;:::-;11285:52;;-1:-1:-1;;11351:16:2;:37;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:2;;;;;;;:::i;:::-;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11155:441;;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:2;;7591:68;;;;-1:-1:-1;;;7591:68:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;7677:16:2;;7669:64;;;;-1:-1:-1;;;7669:64:2;;;;;;;:::i;:::-;7744:38;7765:4;7771:2;7775:6;7744:20;:38::i;:::-;-1:-1:-1;;;;;7815:15:2;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:2;;;;;;;:::i;:::-;-1:-1:-1;;;;;7946:15:2;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;;;;;7978:6;;8210:26;:::i;:::-;;;;;;;;8247:37;8267:4;8273:2;8277:6;12180:121;;;;:::o;14:175:8:-;84:20;;-1:-1:-1;;;;;133:31:8;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;:::-;345:41;264:128;-1:-1:-1;;;264:128:8:o;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:8:o;1294:187::-;1459:14;;1452:22;1434:41;;1422:2;1407:18;;1389:92::o;1486:603::-;;1627:2;1656;1645:9;1638:21;1688:6;1682:13;1731:6;1726:2;1715:9;1711:18;1704:34;1756:4;1769:140;1783:6;1780:1;1777:13;1769:140;;;1878:14;;;1874:23;;1868:30;1844:17;;;1863:2;1840:26;1833:66;1798:10;;1769:140;;;1927:6;1924:1;1921:13;1918:2;;;1997:4;1992:2;1983:6;1972:9;1968:22;1964:31;1957:45;1918:2;-1:-1:-1;2073:2:8;2052:15;-1:-1:-1;;2048:29:8;2033:45;;;;2080:2;2029:54;;1607:482;-1:-1:-1;;;1607:482:8:o;2094:399::-;2296:2;2278:21;;;2335:2;2315:18;;;2308:30;2374:34;2369:2;2354:18;;2347:62;-1:-1:-1;;;2440:2:8;2425:18;;2418:33;2483:3;2468:19;;2268:225::o;2498:398::-;2700:2;2682:21;;;2739:2;2719:18;;;2712:30;2778:34;2773:2;2758:18;;2751:62;-1:-1:-1;;;2844:2:8;2829:18;;2822:32;2886:3;2871:19;;2672:224::o;2901:353::-;3103:2;3085:21;;;3142:2;3122:18;;;3115:30;3181:31;3176:2;3161:18;;3154:59;3245:2;3230:18;;3075:179::o;3259:402::-;3461:2;3443:21;;;3500:2;3480:18;;;3473:30;3539:34;3534:2;3519:18;;3512:62;-1:-1:-1;;;3605:2:8;3590:18;;3583:36;3651:3;3636:19;;3433:228::o;3666:401::-;3868:2;3850:21;;;3907:2;3887:18;;;3880:30;3946:34;3941:2;3926:18;;3919:62;-1:-1:-1;;;4012:2:8;3997:18;;3990:35;4057:3;4042:19;;3840:227::o;4072:400::-;4274:2;4256:21;;;4313:2;4293:18;;;4286:30;4352:34;4347:2;4332:18;;4325:62;-1:-1:-1;;;4418:2:8;4403:18;;4396:34;4462:3;4447:19;;4246:226::o;4477:401::-;4679:2;4661:21;;;4718:2;4698:18;;;4691:30;4757:34;4752:2;4737:18;;4730:62;-1:-1:-1;;;4823:2:8;4808:18;;4801:35;4868:3;4853:19;;4651:227::o;4883:177::-;5029:25;;;5017:2;5002:18;;4984:76::o;5065:184::-;5237:4;5225:17;;;;5207:36;;5195:2;5180:18;;5162:87::o;5254:229::-;;5325:1;5321:6;5318:1;5315:13;5312:2;;;-1:-1:-1;;;5351:33:8;;5407:4;5404:1;5397:15;5437:4;5358:3;5425:17;5312:2;-1:-1:-1;5468:9:8;;5302:181::o;5488:380::-;5573:1;5563:12;;5620:1;5610:12;;;5631:2;;5685:4;5677:6;5673:17;5663:27;;5631:2;5738;5730:6;5727:14;5707:18;5704:38;5701:2;;;5784:10;5779:3;5775:20;5772:1;5765:31;5819:4;5816:1;5809:15;5847:4;5844:1;5837:15;5701:2;;5543:325;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "465400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22619",
								"balanceOf(address)": "infinite",
								"decimals()": "329",
								"decreaseAllowance(address,uint256)": "23711",
								"increaseAllowance(address,uint256)": "23673",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1073",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "15",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CODESIZE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SUB",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSHSIZE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "tag",
									"source": 2,
									"value": "2"
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2047,
									"name": "PUSH",
									"source": 2,
									"value": "3"
								},
								{
									"begin": 2042,
									"end": 2047,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "tag",
									"source": 2,
									"value": "6"
								},
								{
									"begin": 2042,
									"end": 2055,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "PUSH",
									"source": 2,
									"value": "4"
								},
								{
									"begin": 2065,
									"end": 2072,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "DUP5",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "tag",
									"source": 2,
									"value": "8"
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 2065,
									"end": 2082,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1976,
									"end": 2089,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "21"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "7"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SLOAD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "11"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "10"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "KECCAK256",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DIV",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "13"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "1F"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "LT",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "FF"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "NOT",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "AND",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP4",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "OR",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "14"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP6",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "MLOAD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "20"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "15"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "16"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP2",
									"source": 2
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2,
									"value": "[in]"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SWAP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2,
									"value": "[out]"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "18"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "tag",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP3",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "GT",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "17"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP2",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "SSTORE",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "ADD",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "19"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "JUMP",
									"source": 2
								},
								{
									"begin": 14,
									"end": 895,
									"name": "tag",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 14,
									"end": 895,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 14,
									"end": 895,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 123,
									"end": 126,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 116,
									"end": 120,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 108,
									"end": 114,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 104,
									"end": 121,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 100,
									"end": 127,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 90,
									"end": 92,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 90,
									"end": 92,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 145,
									"end": 150,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 138,
									"end": 143,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 131,
									"end": 151,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 90,
									"end": 92,
									"name": "tag",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 90,
									"end": 92,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 172,
									"end": 185,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 172,
									"end": 185,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 234,
									"end": 244,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 234,
									"end": 244,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 234,
									"end": 244,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 231,
									"end": 233,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 231,
									"end": 233,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 231,
									"end": 233,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 247,
									"end": 265,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "tag",
									"source": 8,
									"value": "26"
								},
								{
									"begin": 247,
									"end": 265,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 296,
									"end": 298,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 290,
									"end": 299,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 318,
									"end": 322,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 388,
									"end": 390,
									"name": "PUSH",
									"source": 8,
									"value": "1F"
								},
								{
									"begin": 369,
									"end": 382,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 369,
									"end": 382,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 365,
									"end": 392,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 353,
									"end": 393,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 353,
									"end": 393,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 349,
									"end": 398,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 349,
									"end": 398,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 413,
									"end": 431,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 413,
									"end": 431,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 413,
									"end": 431,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 433,
									"end": 455,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 433,
									"end": 455,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 433,
									"end": 455,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 410,
									"end": 456,
									"name": "OR",
									"source": 8
								},
								{
									"begin": 407,
									"end": 409,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 407,
									"end": 409,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 407,
									"end": 409,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 459,
									"end": 477,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "tag",
									"source": 8,
									"value": "29"
								},
								{
									"begin": 459,
									"end": 477,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 495,
									"end": 497,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 488,
									"end": 510,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 519,
									"end": 537,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 519,
									"end": 537,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 519,
									"end": 537,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 556,
									"end": 571,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 556,
									"end": 571,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 556,
									"end": 571,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 552,
									"end": 576,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 552,
									"end": 576,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 549,
									"end": 582,
									"name": "DUP8",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "LT",
									"source": -1
								},
								{
									"begin": 546,
									"end": 548,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 546,
									"end": 548,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 546,
									"end": 548,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 599,
									"end": 604,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 592,
									"end": 597,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 585,
									"end": 605,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 546,
									"end": 548,
									"name": "tag",
									"source": 8,
									"value": "30"
								},
								{
									"begin": 546,
									"end": 548,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 625,
									"end": 630,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 616,
									"end": 630,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 616,
									"end": 630,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 639,
									"end": 772,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 653,
									"end": 655,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 650,
									"end": 651,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 647,
									"end": 656,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 639,
									"end": 772,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 639,
									"end": 772,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "33"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 741,
									"end": 755,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 741,
									"end": 755,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 741,
									"end": 755,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 737,
									"end": 760,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 737,
									"end": 760,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 731,
									"end": 761,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 710,
									"end": 724,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 710,
									"end": 724,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 710,
									"end": 724,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 706,
									"end": 729,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 706,
									"end": 729,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 699,
									"end": 762,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 664,
									"end": 674,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 664,
									"end": 674,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 664,
									"end": 674,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 664,
									"end": 674,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 639,
									"end": 772,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMP",
									"source": 8
								},
								{
									"begin": 639,
									"end": 772,
									"name": "tag",
									"source": 8,
									"value": "33"
								},
								{
									"begin": 639,
									"end": 772,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 790,
									"end": 792,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 787,
									"end": 788,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 784,
									"end": 793,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 781,
									"end": 783,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 781,
									"end": 783,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 781,
									"end": 783,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 849,
									"end": 854,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 844,
									"end": 846,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 839,
									"end": 841,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 831,
									"end": 837,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 827,
									"end": 842,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 823,
									"end": 847,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 816,
									"end": 855,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 781,
									"end": 783,
									"name": "tag",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 781,
									"end": 783,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 883,
									"end": 889,
									"name": "SWAP6",
									"source": 8
								},
								{
									"begin": 80,
									"end": 895,
									"name": "SWAP5",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 80,
									"end": 895,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "tag",
									"source": 8,
									"value": "3"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 900,
									"end": 1496,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1060,
									"end": 1062,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1048,
									"end": 1057,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1039,
									"end": 1046,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1035,
									"end": 1058,
									"name": "SUB",
									"source": 8
								},
								{
									"begin": 1031,
									"end": 1063,
									"name": "SLT",
									"source": 8
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1081,
									"end": 1087,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1073,
									"end": 1079,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1066,
									"end": 1088,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "tag",
									"source": 8,
									"value": "36"
								},
								{
									"begin": 1028,
									"end": 1030,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1113,
									"end": 1129,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1113,
									"end": 1129,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1178,
									"end": 1192,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1210,
									"end": 1216,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1202,
									"end": 1208,
									"name": "DUP5",
									"source": 8
								},
								{
									"begin": 1195,
									"end": 1217,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "tag",
									"source": 8,
									"value": "37"
								},
								{
									"begin": 1175,
									"end": 1177,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1293,
									"end": 1300,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1284,
									"end": 1290,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1273,
									"end": 1282,
									"name": "DUP8",
									"source": 8
								},
								{
									"begin": 1269,
									"end": 1291,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "tag",
									"source": 8,
									"value": "38"
								},
								{
									"begin": 1238,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1228,
									"end": 1301,
									"name": "SWAP4",
									"source": 8
								},
								{
									"begin": 1228,
									"end": 1301,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1347,
									"end": 1349,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1336,
									"end": 1345,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1332,
									"end": 1350,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1326,
									"end": 1351,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 1310,
									"end": 1351,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1310,
									"end": 1351,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1376,
									"end": 1378,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1366,
									"end": 1374,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1363,
									"end": 1379,
									"name": "GT",
									"source": 8
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1397,
									"end": 1403,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1389,
									"end": 1395,
									"name": "DUP4",
									"source": 8
								},
								{
									"begin": 1382,
									"end": 1404,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "tag",
									"source": 8,
									"value": "39"
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1360,
									"end": 1362,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1482,
									"end": 1489,
									"name": "DUP6",
									"source": 8
								},
								{
									"begin": 1471,
									"end": 1479,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1460,
									"end": 1469,
									"name": "DUP7",
									"source": 8
								},
								{
									"begin": 1456,
									"end": 1480,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "JUMP",
									"source": 8,
									"value": "[in]"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "tag",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1425,
									"end": 1490,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1415,
									"end": 1490,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP3",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1018,
									"end": 1496,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1501,
									"end": 1881,
									"name": "tag",
									"source": 8,
									"value": "11"
								},
								{
									"begin": 1501,
									"end": 1881,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1586,
									"end": 1587,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 1576,
									"end": 1588,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1576,
									"end": 1588,
									"name": "DIV",
									"source": 8
								},
								{
									"begin": 1633,
									"end": 1634,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1623,
									"end": 1635,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "42"
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1698,
									"end": 1702,
									"name": "PUSH",
									"source": 8,
									"value": "7F"
								},
								{
									"begin": 1690,
									"end": 1696,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1686,
									"end": 1703,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 1676,
									"end": 1703,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1676,
									"end": 1703,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "tag",
									"source": 8,
									"value": "42"
								},
								{
									"begin": 1644,
									"end": 1646,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1751,
									"end": 1753,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 1743,
									"end": 1749,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1740,
									"end": 1754,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 1720,
									"end": 1738,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1717,
									"end": 1755,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1797,
									"end": 1807,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1792,
									"end": 1795,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1788,
									"end": 1808,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 1785,
									"end": 1786,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1778,
									"end": 1809,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1832,
									"end": 1836,
									"name": "PUSH",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 1829,
									"end": 1830,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1822,
									"end": 1837,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1860,
									"end": 1864,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1857,
									"end": 1858,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1850,
									"end": 1865,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "tag",
									"source": 8,
									"value": "43"
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1714,
									"end": 1716,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 1556,
									"end": 1881,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 1886,
									"end": 2013,
									"name": "tag",
									"source": 8,
									"value": "27"
								},
								{
									"begin": 1886,
									"end": 2013,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1947,
									"end": 1957,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 1942,
									"end": 1945,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 1938,
									"end": 1958,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 1935,
									"end": 1936,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1928,
									"end": 1959,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1978,
									"end": 1982,
									"name": "PUSH",
									"source": 8,
									"value": "41"
								},
								{
									"begin": 1975,
									"end": 1976,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 1968,
									"end": 1983,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 2002,
									"end": 2006,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 1999,
									"end": 2000,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1992,
									"end": 2007,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 1918,
									"end": 2013,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 1918,
									"end": 2013,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1401,
									"end": 13011,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220374e45a48c2c48ad0ecd7c35a6668683ed15f0ef4c0ba4b17ed4e99b25b17cea64736f6c63430008000033",
									".code": [
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1401,
											"end": 13011,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "24"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "tag",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2208,
											"end": 2221,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2240,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2233,
											"end": 2245,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2154,
											"end": 2252,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4514,
											"end": 4518,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4530,
											"end": 4543,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4546,
											"end": 4558,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4546,
											"end": 4556,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 4546,
											"end": 4558,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4546,
											"end": 4558,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 4546,
											"end": 4558,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4530,
											"end": 4558,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4530,
											"end": 4558,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 4577,
											"end": 4582,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4584,
											"end": 4591,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4593,
											"end": 4599,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4568,
											"end": 4576,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 4568,
											"end": 4600,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4617,
											"end": 4621,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4617,
											"end": 4621,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4431,
											"end": 4628,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "PUSH",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 3329,
											"end": 3341,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3242,
											"end": 3348,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5317,
											"end": 5321,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5333,
											"end": 5348,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 5351,
											"end": 5361,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 5351,
											"end": 5363,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5333,
											"end": 5363,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5333,
											"end": 5363,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5389,
											"end": 5393,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5395,
											"end": 5402,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 5404,
											"end": 5410,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5373,
											"end": 5388,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5373,
											"end": 5411,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5431,
											"end": 5435,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5437,
											"end": 5439,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5441,
											"end": 5447,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5421,
											"end": 5430,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5421,
											"end": 5448,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5465,
											"end": 5469,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5190,
											"end": 5476,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "tag",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3173,
											"end": 3175,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3091,
											"end": 3182,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 5871,
											"end": 6105,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5959,
											"end": 5963,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 5975,
											"end": 5988,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 5991,
											"end": 6003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 5991,
											"end": 6001,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 5991,
											"end": 6003,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 5991,
											"end": 6003,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 5991,
											"end": 6003,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5975,
											"end": 6003,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 5975,
											"end": 6003,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6013,
											"end": 6077,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 6022,
											"end": 6027,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6029,
											"end": 6036,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6066,
											"end": 6076,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6048,
											"end": 6053,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6055,
											"end": 6062,
											"name": "DUP10",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6047,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6038,
											"end": 6063,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6038,
											"end": 6076,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6013,
											"end": 6021,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6013,
											"end": 6077,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3480,
											"end": 3487,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3506,
											"end": 3524,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "tag",
											"source": 2,
											"value": "89"
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3406,
											"end": 3531,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2365,
											"end": 2467,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2421,
											"end": 2434,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2453,
											"end": 2460,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2446,
											"end": 2460,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 6592,
											"end": 7019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6685,
											"end": 6689,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6701,
											"end": 6714,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6717,
											"end": 6729,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 6717,
											"end": 6727,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 6717,
											"end": 6729,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6717,
											"end": 6729,
											"name": "tag",
											"source": 2,
											"value": "97"
										},
										{
											"begin": 6717,
											"end": 6729,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6701,
											"end": 6729,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6701,
											"end": 6729,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6739,
											"end": 6763,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 6776,
											"end": 6781,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6783,
											"end": 6790,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6766,
											"end": 6775,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 6766,
											"end": 6791,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6739,
											"end": 6791,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 6829,
											"end": 6844,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6809,
											"end": 6825,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 6809,
											"end": 6844,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "101"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 6801,
											"end": 6886,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6920,
											"end": 6980,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 6929,
											"end": 6934,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 6936,
											"end": 6943,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6964,
											"end": 6979,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 6945,
											"end": 6961,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 6945,
											"end": 6979,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 6920,
											"end": 6928,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6920,
											"end": 6980,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 3727,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3806,
											"end": 3810,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3822,
											"end": 3835,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 3838,
											"end": 3848,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "tag",
											"source": 2,
											"value": "104"
										},
										{
											"begin": 3838,
											"end": 3850,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3822,
											"end": 3850,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3822,
											"end": 3850,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 3860,
											"end": 3888,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 3870,
											"end": 3875,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3877,
											"end": 3879,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3881,
											"end": 3887,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 3860,
											"end": 3869,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 3860,
											"end": 3888,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4063,
											"end": 4070,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4100,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4107,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4089,
											"end": 4116,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3974,
											"end": 4123,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10635,
											"end": 10654,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "111"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 10627,
											"end": 10695,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "114"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 10705,
											"end": 10773,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10795,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10802,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10811,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10784,
											"end": 10820,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10814,
											"end": 10820,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 10814,
											"end": 10820,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "tag",
											"source": 2,
											"value": "115"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 10835,
											"end": 10867,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 10504,
											"end": 10874,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11285,
											"end": 11309,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11322,
											"end": 11327,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11329,
											"end": 11336,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11312,
											"end": 11321,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11312,
											"end": 11337,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11285,
											"end": 11337,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11351,
											"end": 11367,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11351,
											"end": 11388,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11347,
											"end": 11590,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11432,
											"end": 11438,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11412,
											"end": 11428,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 11412,
											"end": 11438,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "121"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 11404,
											"end": 11472,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11523,
											"end": 11528,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11530,
											"end": 11537,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11558,
											"end": 11564,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11555,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11539,
											"end": 11564,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11514,
											"end": 11522,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 11514,
											"end": 11565,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11155,
											"end": 11596,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 7473,
											"end": 8291,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7599,
											"end": 7617,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "126"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7591,
											"end": 7659,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7677,
											"end": 7693,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "129"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 7669,
											"end": 7733,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7744,
											"end": 7782,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 7765,
											"end": 7769,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7771,
											"end": 7773,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7775,
											"end": 7781,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7744,
											"end": 7764,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 7744,
											"end": 7782,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7744,
											"end": 7782,
											"name": "tag",
											"source": 2,
											"value": "130"
										},
										{
											"begin": 7744,
											"end": 7782,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7793,
											"end": 7812,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7815,
											"end": 7830,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7848,
											"end": 7869,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "134"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 7840,
											"end": 7912,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7955,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7961,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7964,
											"end": 7984,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7946,
											"end": 7984,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8174,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8161,
											"end": 8184,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7978,
											"end": 7984,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7978,
											"end": 7984,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "28"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "JUMP",
											"source": 2,
											"value": "[in]"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8210,
											"end": 8236,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8247,
											"end": 8284,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 8267,
											"end": 8271,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8273,
											"end": 8275,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 8277,
											"end": 8283,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "tag",
											"source": 2,
											"value": "131"
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12180,
											"end": 12301,
											"name": "JUMP",
											"source": 2,
											"value": "[out]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "89"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 345,
											"end": 386,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 264,
											"end": 392,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 264,
											"end": 392,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 397,
											"end": 671,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 526,
											"end": 528,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 514,
											"end": 523,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 505,
											"end": 512,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 501,
											"end": 524,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 497,
											"end": 529,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 547,
											"end": 553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 532,
											"end": 554,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 596,
											"end": 605,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "tag",
											"source": 8,
											"value": "149"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 565,
											"end": 606,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 565,
											"end": 606,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 661,
											"end": 663,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 646,
											"end": 664,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 615,
											"end": 665,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 615,
											"end": 665,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 824,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 810,
											"end": 819,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 801,
											"end": 808,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 797,
											"end": 820,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 793,
											"end": 825,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 828,
											"end": 850,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "tag",
											"source": 8,
											"value": "152"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 892,
											"end": 901,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 861,
											"end": 902,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 861,
											"end": 902,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 957,
											"end": 959,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 946,
											"end": 955,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "tag",
											"source": 8,
											"value": "154"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 911,
											"end": 961,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 911,
											"end": 961,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1008,
											"end": 1010,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 993,
											"end": 1011,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 980,
											"end": 1012,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1152,
											"end": 1154,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1140,
											"end": 1149,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1131,
											"end": 1138,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1127,
											"end": 1150,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1123,
											"end": 1155,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1173,
											"end": 1179,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1158,
											"end": 1180,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1222,
											"end": 1231,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "141"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1191,
											"end": 1232,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1279,
											"end": 1281,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1289,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "tag",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 1294,
											"end": 1481,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1459,
											"end": 1473,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1452,
											"end": 1474,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1434,
											"end": 1475,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1422,
											"end": 1424,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1407,
											"end": 1425,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1389,
											"end": 1481,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1486,
											"end": 2089,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1627,
											"end": 1629,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1656,
											"end": 1658,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1645,
											"end": 1654,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1659,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1688,
											"end": 1694,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1682,
											"end": 1695,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1731,
											"end": 1737,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1726,
											"end": 1728,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1715,
											"end": 1724,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1711,
											"end": 1729,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1704,
											"end": 1738,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1756,
											"end": 1760,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1783,
											"end": 1789,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1780,
											"end": 1781,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1777,
											"end": 1790,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1878,
											"end": 1892,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1874,
											"end": 1897,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1868,
											"end": 1898,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1844,
											"end": 1861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1863,
											"end": 1865,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1840,
											"end": 1866,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1833,
											"end": 1899,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1798,
											"end": 1808,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "tag",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 1769,
											"end": 1909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1927,
											"end": 1933,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1924,
											"end": 1925,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1921,
											"end": 1934,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1997,
											"end": 2001,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1992,
											"end": 1994,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 1989,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1972,
											"end": 1981,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 1968,
											"end": 1990,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1964,
											"end": 1995,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1957,
											"end": 2002,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 1918,
											"end": 1920,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2073,
											"end": 2075,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2052,
											"end": 2067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2048,
											"end": 2077,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2033,
											"end": 2078,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2080,
											"end": 2082,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2083,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1607,
											"end": 2089,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "tag",
											"source": 8,
											"value": "129"
										},
										{
											"begin": 2094,
											"end": 2493,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2296,
											"end": 2298,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2278,
											"end": 2299,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2335,
											"end": 2337,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2315,
											"end": 2333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2338,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2374,
											"end": 2408,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2369,
											"end": 2371,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2354,
											"end": 2372,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2347,
											"end": 2409,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2440,
											"end": 2442,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2425,
											"end": 2443,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2418,
											"end": 2451,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2483,
											"end": 2486,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2468,
											"end": 2487,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2268,
											"end": 2493,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "tag",
											"source": 8,
											"value": "114"
										},
										{
											"begin": 2498,
											"end": 2896,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2700,
											"end": 2702,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2682,
											"end": 2703,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2739,
											"end": 2741,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2719,
											"end": 2737,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2712,
											"end": 2742,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2778,
											"end": 2812,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 2773,
											"end": 2775,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2758,
											"end": 2776,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2751,
											"end": 2813,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2844,
											"end": 2846,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2829,
											"end": 2847,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2822,
											"end": 2854,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2886,
											"end": 2889,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2871,
											"end": 2890,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2672,
											"end": 2896,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2901,
											"end": 3254,
											"name": "tag",
											"source": 8,
											"value": "121"
										},
										{
											"begin": 2901,
											"end": 3254,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3103,
											"end": 3105,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3085,
											"end": 3106,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3142,
											"end": 3144,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3122,
											"end": 3140,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3115,
											"end": 3145,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3181,
											"end": 3212,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 3176,
											"end": 3178,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3161,
											"end": 3179,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3154,
											"end": 3213,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3245,
											"end": 3247,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3230,
											"end": 3248,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3230,
											"end": 3248,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3075,
											"end": 3254,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3259,
											"end": 3661,
											"name": "tag",
											"source": 8,
											"value": "134"
										},
										{
											"begin": 3259,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3461,
											"end": 3463,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3443,
											"end": 3464,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3500,
											"end": 3502,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3480,
											"end": 3498,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3473,
											"end": 3503,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3539,
											"end": 3573,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 3534,
											"end": 3536,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3519,
											"end": 3537,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3537,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3512,
											"end": 3574,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3605,
											"end": 3607,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3590,
											"end": 3608,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3590,
											"end": 3608,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3583,
											"end": 3619,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3651,
											"end": 3654,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3636,
											"end": 3655,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3636,
											"end": 3655,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3433,
											"end": 3661,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3666,
											"end": 4067,
											"name": "tag",
											"source": 8,
											"value": "126"
										},
										{
											"begin": 3666,
											"end": 4067,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3868,
											"end": 3870,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3850,
											"end": 3871,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3907,
											"end": 3909,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3887,
											"end": 3905,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3880,
											"end": 3910,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3980,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 3941,
											"end": 3943,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3926,
											"end": 3944,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3926,
											"end": 3944,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3919,
											"end": 3981,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4012,
											"end": 4014,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3997,
											"end": 4015,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3997,
											"end": 4015,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3990,
											"end": 4025,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4057,
											"end": 4060,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4042,
											"end": 4061,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4042,
											"end": 4061,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3840,
											"end": 4067,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4072,
											"end": 4472,
											"name": "tag",
											"source": 8,
											"value": "111"
										},
										{
											"begin": 4072,
											"end": 4472,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4274,
											"end": 4276,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4256,
											"end": 4277,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4313,
											"end": 4315,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4293,
											"end": 4311,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4286,
											"end": 4316,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4352,
											"end": 4386,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4347,
											"end": 4349,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4325,
											"end": 4387,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4418,
											"end": 4420,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4403,
											"end": 4421,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4396,
											"end": 4430,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4462,
											"end": 4465,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4447,
											"end": 4466,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4447,
											"end": 4466,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4246,
											"end": 4472,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4477,
											"end": 4878,
											"name": "tag",
											"source": 8,
											"value": "101"
										},
										{
											"begin": 4477,
											"end": 4878,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4679,
											"end": 4681,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4661,
											"end": 4682,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4718,
											"end": 4720,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4698,
											"end": 4716,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4691,
											"end": 4721,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4757,
											"end": 4791,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 4752,
											"end": 4754,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4737,
											"end": 4755,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4737,
											"end": 4755,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4730,
											"end": 4792,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4823,
											"end": 4825,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4808,
											"end": 4826,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4808,
											"end": 4826,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4801,
											"end": 4836,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4868,
											"end": 4871,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4853,
											"end": 4872,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4853,
											"end": 4872,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4651,
											"end": 4878,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4883,
											"end": 5060,
											"name": "tag",
											"source": 8,
											"value": "28"
										},
										{
											"begin": 4883,
											"end": 5060,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5029,
											"end": 5054,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5017,
											"end": 5019,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5002,
											"end": 5020,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5002,
											"end": 5020,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4984,
											"end": 5060,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5065,
											"end": 5249,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 5065,
											"end": 5249,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5237,
											"end": 5241,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5225,
											"end": 5242,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5225,
											"end": 5242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5225,
											"end": 5242,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5225,
											"end": 5242,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5207,
											"end": 5243,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5207,
											"end": 5243,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5195,
											"end": 5197,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5180,
											"end": 5198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5180,
											"end": 5198,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5162,
											"end": 5249,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5254,
											"end": 5483,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 5254,
											"end": 5483,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5254,
											"end": 5483,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5325,
											"end": 5326,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5321,
											"end": 5327,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5318,
											"end": 5319,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5315,
											"end": 5328,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5312,
											"end": 5314,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5312,
											"end": 5314,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 5312,
											"end": 5314,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5351,
											"end": 5384,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5351,
											"end": 5384,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5407,
											"end": 5411,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 5404,
											"end": 5405,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5397,
											"end": 5412,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5437,
											"end": 5441,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5358,
											"end": 5361,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5425,
											"end": 5442,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5312,
											"end": 5314,
											"name": "tag",
											"source": 8,
											"value": "174"
										},
										{
											"begin": 5312,
											"end": 5314,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5468,
											"end": 5477,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5468,
											"end": 5477,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5302,
											"end": 5483,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5488,
											"end": 5868,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 5488,
											"end": 5868,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5573,
											"end": 5574,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 5563,
											"end": 5575,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5563,
											"end": 5575,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5620,
											"end": 5621,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5610,
											"end": 5622,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5631,
											"end": 5633,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 5631,
											"end": 5633,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5685,
											"end": 5689,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 5677,
											"end": 5683,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5673,
											"end": 5690,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5663,
											"end": 5690,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5663,
											"end": 5690,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5631,
											"end": 5633,
											"name": "tag",
											"source": 8,
											"value": "176"
										},
										{
											"begin": 5631,
											"end": 5633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5738,
											"end": 5740,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5730,
											"end": 5736,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5727,
											"end": 5741,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 5707,
											"end": 5725,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5704,
											"end": 5742,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5784,
											"end": 5794,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 5779,
											"end": 5782,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 5775,
											"end": 5795,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 5772,
											"end": 5773,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5765,
											"end": 5796,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5819,
											"end": 5823,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 5816,
											"end": 5817,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5809,
											"end": 5824,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5847,
											"end": 5851,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5844,
											"end": 5845,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5837,
											"end": 5852,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5701,
											"end": 5703,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5868,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5868,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5868,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5868,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 182,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 188,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 190,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 192,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 194,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"SafeMath": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":482:6782  library SafeMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220cead2db02db5e2fd494b5c9b84b0a193411033d84cd23e888b93f01d44b1913a64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cead2db02db5e2fd494b5c9b84b0a193411033d84cd23e888b93f01d44b1913a64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE 0xAD 0x2D 0xB0 0x2D 0xB5 0xE2 REVERT 0x49 0x4B 0x5C SWAP12 DUP5 0xB0 LOG1 SWAP4 COINBASE LT CALLER 0xD8 0x4C 0xD2 RETURNDATACOPY DUP9 DUP12 SWAP4 CREATE SAR DIFFICULTY 0xB1 SWAP2 GASPRICE PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "482:6300:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;482:6300:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cead2db02db5e2fd494b5c9b84b0a193411033d84cd23e888b93f01d44b1913a64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCE 0xAD 0x2D 0xB0 0x2D 0xB5 0xE2 REVERT 0x49 0x4B 0x5C SWAP12 DUP5 0xB0 LOG1 SWAP4 COINBASE LT CALLER 0xD8 0x4C 0xD2 RETURNDATACOPY DUP9 DUP12 SWAP4 CREATE SAR DIFFICULTY 0xB1 SWAP2 GASPRICE PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "482:6300:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 482,
									"end": 6782,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220cead2db02db5e2fd494b5c9b84b0a193411033d84cd23e888b93f01d44b1913a64736f6c63430008000033",
									".code": [
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 482,
											"end": 6782,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":\"SafeMath\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"memetoken.sol": {
				"ReverseCramerTest": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"memetoken.sol\":446:491  string private _name = \"Reverse Cramer Token\" */\n  0xc0\n    /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\n  0x40\n    /* \"memetoken.sol\":446:491  string private _name = \"Reverse Cramer Token\" */\n  mstore\n  0x14\n    /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\n  0x80\n    /* \"memetoken.sol\":446:491  string private _name = \"Reverse Cramer Token\" */\n  dup2\n  swap1\n  mstore\n  0x52657665727365204372616d657220546f6b656e000000000000000000000000\n  0xa0\n  swap1\n  dup2\n  mstore\n  tag_1\n  swap2\n  0x01\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"memetoken.sol\":498:534  string private _symbol = \"REVCRAMER\" */\n  0x40\n  dup1\n  mload\n  dup1\n  dup3\n  add\n  swap1\n  swap2\n  mstore\n  0x09\n  dup1\n  dup3\n  mstore\n  shl(0xb9, 0x2922ab21a920a6a2a9)\n  0x20\n  swap1\n  swap3\n  add\n  swap2\n  dup3\n  mstore\n  tag_3\n  swap2\n  0x02\n  swap2\n  tag_2\n  jump\t// in\ntag_3:\n  pop\n    /* \"memetoken.sol\":541:569  uint8 private _decimals = 18 */\n  0x03\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"memetoken.sol\":567:569  18 */\n  0x12\n    /* \"memetoken.sol\":541:569  uint8 private _decimals = 18 */\n  or\n  swap1\n  sstore\n    /* \"memetoken.sol\":609:625  1000000 * 10**18 */\n  0xd3c21bcecceda1000000\n    /* \"memetoken.sol\":578:625  uint256 private _totalSupply = 1000000 * 10**18 */\n  0x04\n  sstore\n    /* \"memetoken.sol\":1002:1137  constructor() {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_4\n  jumpi\n  0x00\n  dup1\n  revert\ntag_4:\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  tag_8\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  tag_9\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:965  _msgSender */\n  tag_10\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":955:967  _msgSender() */\n  jump\t// in\ntag_9:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:954  _transferOwnership */\n  tag_11\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":936:968  _transferOwnership(_msgSender()) */\n  jump\t// in\ntag_8:\n    /* \"memetoken.sol\":1053:1065  _totalSupply */\n  sload(0x04)\n    /* \"memetoken.sol\":1027:1036  _balances */\n  0x05\n    /* \"memetoken.sol\":1027:1050  _balances[_msgSender()] */\n  0x00\n    /* \"memetoken.sol\":1037:1049  _msgSender() */\n  tag_13\n    /* \"memetoken.sol\":1037:1047  _msgSender */\n  tag_10\n    /* \"memetoken.sol\":1037:1049  _msgSender() */\n  jump\t// in\ntag_13:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"memetoken.sol\":1027:1050  _balances[_msgSender()] */\n  and\n  dup2\n  mstore\n  0x20\n  dup2\n  add\n  swap2\n  swap1\n  swap2\n  mstore\n  0x40\n  add\n  0x00\n  keccak256\n    /* \"memetoken.sol\":1027:1065  _balances[_msgSender()] = _totalSupply */\n  sstore\n    /* \"memetoken.sol\":1102:1114  _msgSender() */\n  tag_14\n    /* \"memetoken.sol\":1102:1112  _msgSender */\n  tag_10\n    /* \"memetoken.sol\":1102:1114  _msgSender() */\n  jump\t// in\ntag_14:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"memetoken.sol\":1081:1129  Transfer(address(0), _msgSender(), _totalSupply) */\n  and\n    /* \"memetoken.sol\":1098:1099  0 */\n  0x00\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"memetoken.sol\":1081:1129  Transfer(address(0), _msgSender(), _totalSupply) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"memetoken.sol\":1116:1128  _totalSupply */\n  sload(0x04)\n    /* \"memetoken.sol\":1081:1129  Transfer(address(0), _msgSender(), _totalSupply) */\n  mload(0x40)\n  tag_15\n  swap2\n  swap1\n  tag_16\n  jump\t// in\ntag_15:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\n  jump(tag_31)\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\ntag_10:\n    /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n  caller\n    /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\ntag_11:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  dup5\n  sstore\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n  swap2\n  swap1\n  swap3\n  and\n  swap3\n  dup4\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n  swap1\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  pop\n  jump\t// out\n    /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\ntag_2:\n  dup3\n  dup1\n  sload\n  tag_20\n  swap1\n  tag_21\n  jump\t// in\ntag_20:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_23\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_26)\ntag_23:\n  dup3\n  0x1f\n  lt\n  tag_24\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_26)\ntag_24:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_26\n  jumpi\n  swap2\n  dup3\n  add\ntag_25:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_26\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_25)\ntag_26:\n  pop\n  tag_27\n  swap3\n  swap2\n  pop\n  tag_28\n  jump\t// in\ntag_27:\n  pop\n  swap1\n  jump\t// out\ntag_28:\ntag_29:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_27\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_29)\n    /* \"#utility.yul\":14:191   */\ntag_16:\n    /* \"#utility.yul\":160:185   */\n  swap1\n  dup2\n  mstore\n    /* \"#utility.yul\":148:150   */\n  0x20\n    /* \"#utility.yul\":133:151   */\n  add\n  swap1\n    /* \"#utility.yul\":115:191   */\n  jump\t// out\n    /* \"#utility.yul\":196:576   */\ntag_21:\n    /* \"#utility.yul\":281:282   */\n  0x02\n    /* \"#utility.yul\":271:283   */\n  dup2\n  div\n    /* \"#utility.yul\":328:329   */\n  0x01\n    /* \"#utility.yul\":318:330   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":339:341   */\n  tag_34\n  jumpi\n    /* \"#utility.yul\":393:397   */\n  0x7f\n    /* \"#utility.yul\":385:391   */\n  dup3\n    /* \"#utility.yul\":381:398   */\n  and\n    /* \"#utility.yul\":371:398   */\n  swap2\n  pop\n    /* \"#utility.yul\":339:341   */\ntag_34:\n    /* \"#utility.yul\":446:448   */\n  0x20\n    /* \"#utility.yul\":438:444   */\n  dup3\n    /* \"#utility.yul\":435:449   */\n  lt\n    /* \"#utility.yul\":415:433   */\n  dup2\n    /* \"#utility.yul\":412:450   */\n  eq\n    /* \"#utility.yul\":409:411   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":492:502   */\n  0x4e487b71\n    /* \"#utility.yul\":487:490   */\n  0xe0\n    /* \"#utility.yul\":483:503   */\n  shl\n    /* \"#utility.yul\":480:481   */\n  0x00\n    /* \"#utility.yul\":473:504   */\n  mstore\n    /* \"#utility.yul\":527:531   */\n  0x22\n    /* \"#utility.yul\":524:525   */\n  0x04\n    /* \"#utility.yul\":517:532   */\n  mstore\n    /* \"#utility.yul\":555:559   */\n  0x24\n    /* \"#utility.yul\":552:553   */\n  0x00\n    /* \"#utility.yul\":545:560   */\n  revert\n    /* \"#utility.yul\":409:411   */\ntag_35:\n  pop\n    /* \"#utility.yul\":251:576   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_31:\n    /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"memetoken.sol\":358:4265  contract ReverseCramerTest is IERC20, Ownable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_17\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_18\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_16\n      jumpi\n      jump(tag_2)\n    tag_18:\n      dup1\n      0x715018a6\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_12\n      jumpi\n      jump(tag_2)\n    tag_17:\n      dup1\n      0x23b872dd\n      gt\n      tag_19\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      jump(tag_2)\n    tag_19:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"memetoken.sol\":1145:1228  function name() public view returns (string memory) {\r... */\n    tag_3:\n      tag_20\n      tag_21\n      jump\t// in\n    tag_20:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_22:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"memetoken.sol\":1983:2144  function approve(address spender, uint256 amount) public override returns (bool) {\r... */\n    tag_4:\n      tag_24\n      tag_25\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_25:\n      tag_27\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_29\n      jump\t// in\n        /* \"memetoken.sol\":1422:1522  function totalSupply() public view override returns (uint256) {\r... */\n    tag_5:\n      tag_30\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n        /* \"memetoken.sol\":2152:2465  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r... */\n    tag_6:\n      tag_24\n      tag_35\n      calldatasize\n      0x04\n      tag_36\n      jump\t// in\n    tag_35:\n      tag_37\n      jump\t// in\n        /* \"memetoken.sol\":1331:1414  function decimals() public view returns (uint8) {\r... */\n    tag_7:\n      tag_39\n      tag_40\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_42\n      jump\t// in\n        /* \"memetoken.sol\":2473:2683  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r... */\n    tag_8:\n      tag_24\n      tag_44\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_44:\n      tag_45\n      jump\t// in\n        /* \"memetoken.sol\":1530:1649  function balanceOf(address account) public view override returns (uint256) {\r... */\n    tag_9:\n      tag_30\n      tag_48\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_48:\n      tag_50\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_10:\n      tag_52\n      tag_53\n      jump\t// in\n    tag_52:\n      stop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_11:\n      tag_54\n      tag_55\n      jump\t// in\n    tag_54:\n      mload(0x40)\n      tag_22\n      swap2\n      swap1\n      tag_57\n      jump\t// in\n        /* \"memetoken.sol\":1236:1323  function symbol() public view returns (string memory) {\r... */\n    tag_12:\n      tag_20\n      tag_59\n      jump\t// in\n        /* \"memetoken.sol\":2691:2952  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r... */\n    tag_13:\n      tag_24\n      tag_62\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n        /* \"memetoken.sol\":1657:1824  function transfer(address recipient, uint256 amount) public override returns (bool) {\r... */\n    tag_14:\n      tag_24\n      tag_66\n      calldatasize\n      0x04\n      tag_26\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n        /* \"memetoken.sol\":1832:1975  function allowance(address owner, address spender) public view override returns (uint256) {\r... */\n    tag_15:\n      tag_30\n      tag_70\n      calldatasize\n      0x04\n      tag_71\n      jump\t// in\n    tag_70:\n      tag_72\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_16:\n      tag_52\n      tag_75\n      calldatasize\n      0x04\n      tag_49\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n        /* \"memetoken.sol\":1145:1228  function name() public view returns (string memory) {\r... */\n    tag_21:\n        /* \"memetoken.sol\":1182:1195  string memory */\n      0x60\n        /* \"memetoken.sol\":1215:1220  _name */\n      0x01\n        /* \"memetoken.sol\":1208:1220  return _name */\n      dup1\n      sload\n      tag_78\n      swap1\n      tag_79\n      jump\t// in\n    tag_78:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_80\n      swap1\n      tag_79\n      jump\t// in\n    tag_80:\n      dup1\n      iszero\n      tag_81\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_82\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_81)\n    tag_82:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_83:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_83\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_81:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"memetoken.sol\":1145:1228  function name() public view returns (string memory) {\r... */\n      swap1\n      jump\t// out\n        /* \"memetoken.sol\":1983:2144  function approve(address spender, uint256 amount) public override returns (bool) {\r... */\n    tag_27:\n        /* \"memetoken.sol\":2058:2062  bool */\n      0x00\n        /* \"memetoken.sol\":2075:2114  _approve(_msgSender(), spender, amount) */\n      tag_85\n        /* \"memetoken.sol\":2084:2096  _msgSender() */\n      tag_86\n        /* \"memetoken.sol\":2084:2094  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2084:2096  _msgSender() */\n      jump\t// in\n    tag_86:\n        /* \"memetoken.sol\":2098:2105  spender */\n      dup5\n        /* \"memetoken.sol\":2107:2113  amount */\n      dup5\n        /* \"memetoken.sol\":2075:2083  _approve */\n      tag_88\n        /* \"memetoken.sol\":2075:2114  _approve(_msgSender(), spender, amount) */\n      jump\t// in\n    tag_85:\n      pop\n        /* \"memetoken.sol\":2132:2136  true */\n      0x01\n        /* \"memetoken.sol\":1983:2144  function approve(address spender, uint256 amount) public override returns (bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"memetoken.sol\":1422:1522  function totalSupply() public view override returns (uint256) {\r... */\n    tag_31:\n        /* \"memetoken.sol\":1502:1514  _totalSupply */\n      sload(0x04)\n        /* \"memetoken.sol\":1422:1522  function totalSupply() public view override returns (uint256) {\r... */\n      swap1\n      jump\t// out\n        /* \"memetoken.sol\":2152:2465  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r... */\n    tag_37:\n        /* \"memetoken.sol\":2250:2254  bool */\n      0x00\n        /* \"memetoken.sol\":2267:2303  _transfer(sender, recipient, amount) */\n      tag_91\n        /* \"memetoken.sol\":2277:2283  sender */\n      dup5\n        /* \"memetoken.sol\":2285:2294  recipient */\n      dup5\n        /* \"memetoken.sol\":2296:2302  amount */\n      dup5\n        /* \"memetoken.sol\":2267:2276  _transfer */\n      tag_92\n        /* \"memetoken.sol\":2267:2303  _transfer(sender, recipient, amount) */\n      jump\t// in\n    tag_91:\n        /* \"memetoken.sol\":2314:2435  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      tag_93\n        /* \"memetoken.sol\":2323:2329  sender */\n      dup5\n        /* \"memetoken.sol\":2331:2343  _msgSender() */\n      tag_94\n        /* \"memetoken.sol\":2331:2341  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2331:2343  _msgSender() */\n      jump\t// in\n    tag_94:\n        /* \"memetoken.sol\":2345:2434  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      tag_95\n        /* \"memetoken.sol\":2383:2389  amount */\n      dup6\n        /* \"memetoken.sol\":2345:2434  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x28\n      dup2\n      mstore\n      0x20\n      add\n      data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330\n      0x28\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":2345:2364  _allowances[sender] */\n      dup11\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":2345:2356  _allowances */\n      0x06\n        /* \"memetoken.sol\":2345:2364  _allowances[sender] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      swap1\n        /* \"memetoken.sol\":2365:2377  _msgSender() */\n      tag_96\n        /* \"memetoken.sol\":2365:2375  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2365:2377  _msgSender() */\n      jump\t// in\n    tag_96:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":2345:2378  _allowances[sender][_msgSender()] */\n      and\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n      sload\n      swap2\n        /* \"memetoken.sol\":2345:2434  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      swap1\n        /* \"memetoken.sol\":2345:2382  _allowances[sender][_msgSender()].sub */\n      tag_97\n        /* \"memetoken.sol\":2345:2434  _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\") */\n      jump\t// in\n    tag_95:\n        /* \"memetoken.sol\":2314:2322  _approve */\n      tag_88\n        /* \"memetoken.sol\":2314:2435  _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\")) */\n      jump\t// in\n    tag_93:\n      pop\n        /* \"memetoken.sol\":2453:2457  true */\n      0x01\n        /* \"memetoken.sol\":2152:2465  function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"memetoken.sol\":1331:1414  function decimals() public view returns (uint8) {\r... */\n    tag_40:\n        /* \"memetoken.sol\":1397:1406  _decimals */\n      and(0xff, sload(0x03))\n        /* \"memetoken.sol\":1331:1414  function decimals() public view returns (uint8) {\r... */\n      swap1\n      jump\t// out\n        /* \"memetoken.sol\":2473:2683  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r... */\n    tag_45:\n        /* \"memetoken.sol\":2553:2557  bool */\n      0x00\n        /* \"memetoken.sol\":2570:2653  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)) */\n      tag_85\n        /* \"memetoken.sol\":2579:2591  _msgSender() */\n      tag_101\n        /* \"memetoken.sol\":2579:2589  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2579:2591  _msgSender() */\n      jump\t// in\n    tag_101:\n        /* \"memetoken.sol\":2593:2600  spender */\n      dup5\n        /* \"memetoken.sol\":2602:2652  _allowances[_msgSender()][spender].add(addedValue) */\n      tag_95\n        /* \"memetoken.sol\":2641:2651  addedValue */\n      dup6\n        /* \"memetoken.sol\":2602:2613  _allowances */\n      0x06\n        /* \"memetoken.sol\":2602:2627  _allowances[_msgSender()] */\n      0x00\n        /* \"memetoken.sol\":2614:2626  _msgSender() */\n      tag_103\n        /* \"memetoken.sol\":2614:2624  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2614:2626  _msgSender() */\n      jump\t// in\n    tag_103:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":2602:2627  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"memetoken.sol\":2602:2636  _allowances[_msgSender()][spender] */\n      swap2\n      dup13\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"memetoken.sol\":2602:2640  _allowances[_msgSender()][spender].add */\n      tag_104\n        /* \"memetoken.sol\":2602:2652  _allowances[_msgSender()][spender].add(addedValue) */\n      jump\t// in\n        /* \"memetoken.sol\":1530:1649  function balanceOf(address account) public view override returns (uint256) {\r... */\n    tag_50:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":1623:1641  _balances[account] */\n      dup2\n      and\n        /* \"memetoken.sol\":1596:1603  uint256 */\n      0x00\n        /* \"memetoken.sol\":1623:1641  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":1623:1632  _balances */\n      0x05\n        /* \"memetoken.sol\":1623:1641  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"memetoken.sol\":1530:1649  function balanceOf(address account) public view override returns (uint256) {\r... */\n    tag_105:\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n    tag_53:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_107\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_108\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_107:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      tag_110\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1922:1923  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1913  _transferOwnership */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1895:1925  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_110:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1831:1932  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n    tag_55:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1247:1254  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1279  _owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1201:1286  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"memetoken.sol\":1236:1323  function symbol() public view returns (string memory) {\r... */\n    tag_59:\n        /* \"memetoken.sol\":1275:1288  string memory */\n      0x60\n        /* \"memetoken.sol\":1308:1315  _symbol */\n      0x02\n        /* \"memetoken.sol\":1301:1315  return _symbol */\n      dup1\n      sload\n      tag_78\n      swap1\n      tag_79\n      jump\t// in\n        /* \"memetoken.sol\":2691:2952  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r... */\n    tag_63:\n        /* \"memetoken.sol\":2776:2780  bool */\n      0x00\n        /* \"memetoken.sol\":2793:2922  _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")) */\n      tag_85\n        /* \"memetoken.sol\":2802:2814  _msgSender() */\n      tag_121\n        /* \"memetoken.sol\":2802:2812  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2802:2814  _msgSender() */\n      jump\t// in\n    tag_121:\n        /* \"memetoken.sol\":2816:2823  spender */\n      dup5\n        /* \"memetoken.sol\":2825:2921  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_95\n        /* \"memetoken.sol\":2864:2879  subtractedValue */\n      dup6\n        /* \"memetoken.sol\":2825:2921  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x25\n      dup2\n      mstore\n      0x20\n      add\n      data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8\n      0x25\n      swap2\n      codecopy\n        /* \"memetoken.sol\":2825:2836  _allowances */\n      0x06\n        /* \"memetoken.sol\":2825:2850  _allowances[_msgSender()] */\n      0x00\n        /* \"memetoken.sol\":2837:2849  _msgSender() */\n      tag_123\n        /* \"memetoken.sol\":2837:2847  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":2837:2849  _msgSender() */\n      jump\t// in\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":2825:2850  _allowances[_msgSender()] */\n      swap1\n      dup2\n      and\n      dup3\n      mstore\n      0x20\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n      0x40\n      swap2\n      dup3\n      add\n      0x00\n      swap1\n      dup2\n      keccak256\n        /* \"memetoken.sol\":2825:2859  _allowances[_msgSender()][spender] */\n      swap2\n      dup14\n      and\n      dup2\n      mstore\n      swap3\n      mstore\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"memetoken.sol\":2825:2921  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      swap1\n        /* \"memetoken.sol\":2825:2863  _allowances[_msgSender()][spender].sub */\n      tag_97\n        /* \"memetoken.sol\":2825:2921  _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\") */\n      jump\t// in\n        /* \"memetoken.sol\":1657:1824  function transfer(address recipient, uint256 amount) public override returns (bool) {\r... */\n    tag_67:\n        /* \"memetoken.sol\":1735:1739  bool */\n      0x00\n        /* \"memetoken.sol\":1752:1794  _transfer(_msgSender(), recipient, amount) */\n      tag_85\n        /* \"memetoken.sol\":1762:1774  _msgSender() */\n      tag_126\n        /* \"memetoken.sol\":1762:1772  _msgSender */\n      tag_87\n        /* \"memetoken.sol\":1762:1774  _msgSender() */\n      jump\t// in\n    tag_126:\n        /* \"memetoken.sol\":1776:1785  recipient */\n      dup5\n        /* \"memetoken.sol\":1787:1793  amount */\n      dup5\n        /* \"memetoken.sol\":1752:1761  _transfer */\n      tag_92\n        /* \"memetoken.sol\":1752:1794  _transfer(_msgSender(), recipient, amount) */\n      jump\t// in\n        /* \"memetoken.sol\":1832:1975  function allowance(address owner, address spender) public view override returns (uint256) {\r... */\n    tag_72:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":1940:1958  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"memetoken.sol\":1913:1920  uint256 */\n      0x00\n        /* \"memetoken.sol\":1940:1958  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":1940:1951  _allowances */\n      0x06\n        /* \"memetoken.sol\":1940:1958  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"memetoken.sol\":1940:1967  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"memetoken.sol\":1832:1975  function allowance(address owner, address spender) public view override returns (uint256) {\r... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      tag_129\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1105  _checkOwner */\n      tag_108\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1094:1107  _checkOwner() */\n      jump\t// in\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2169:2191  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2161:2234  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_131\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_133\n      jump\t// in\n    tag_132:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_131:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      tag_134\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2263:2271  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2262  _transferOwnership */\n      tag_111\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2244:2272  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_134:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2081:2279  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n    tag_87:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":640:736  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"memetoken.sol\":3924:4262  function _approve(address owner, address spender, uint256 amount) internal {\r... */\n    tag_88:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":4018:4037  owner != address(0) */\n      dup4\n      and\n        /* \"memetoken.sol\":4010:4078  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_137\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_139\n      jump\t// in\n    tag_137:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":4097:4118  spender != address(0) */\n      dup3\n      and\n        /* \"memetoken.sol\":4089:4157  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_140\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_142\n      jump\t// in\n    tag_140:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":4170:4188  _allowances[owner] */\n      dup1\n      dup5\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"memetoken.sol\":4170:4181  _allowances */\n      0x06\n        /* \"memetoken.sol\":4170:4188  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"memetoken.sol\":4170:4197  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      swap1\n      swap2\n      mstore\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"memetoken.sol\":4170:4206  _allowances[owner][spender] = amount */\n      dup5\n      swap1\n      sstore\n        /* \"memetoken.sol\":4222:4254  Approval(owner, spender, amount) */\n      mload\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap1\n      tag_143\n      swap1\n        /* \"memetoken.sol\":4200:4206  amount */\n      dup6\n      swap1\n        /* \"memetoken.sol\":4222:4254  Approval(owner, spender, amount) */\n      tag_33\n      jump\t// in\n    tag_143:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"memetoken.sol\":3924:4262  function _approve(address owner, address spender, uint256 amount) internal {\r... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"memetoken.sol\":2960:3916  function _transfer(address sender, address recipient, uint256 amount) internal {\r... */\n    tag_92:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3058:3078  sender != address(0) */\n      dup4\n      and\n        /* \"memetoken.sol\":3050:3120  require(sender != address(0), \"ERC20: transfer from the zero address\") */\n      tag_145\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_147\n      jump\t// in\n    tag_145:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3139:3162  recipient != address(0) */\n      dup3\n      and\n        /* \"memetoken.sol\":3131:3202  require(recipient != address(0), \"ERC20: transfer to the zero address\") */\n      tag_148\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_150\n      jump\t// in\n    tag_148:\n        /* \"memetoken.sol\":3230:3231  0 */\n      0x00\n        /* \"memetoken.sol\":3221:3227  amount */\n      dup2\n        /* \"memetoken.sol\":3221:3231  amount > 0 */\n      gt\n        /* \"memetoken.sol\":3213:3284  require(amount > 0, \"ERC20: transfer amount must be greater than zero\") */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_153\n      jump\t// in\n    tag_151:\n        /* \"memetoken.sol\":3297:3315  uint256 burnAmount */\n      0x00\n        /* \"memetoken.sol\":3318:3348  amount.mul(_burnRate).div(100) */\n      tag_154\n        /* \"memetoken.sol\":3344:3347  100 */\n      0x64\n        /* \"memetoken.sol\":3318:3339  amount.mul(_burnRate) */\n      tag_155\n        /* \"memetoken.sol\":3318:3324  amount */\n      dup5\n        /* \"memetoken.sol\":854:855  2 */\n      0x02\n        /* \"memetoken.sol\":3318:3328  amount.mul */\n      tag_156\n        /* \"memetoken.sol\":3318:3339  amount.mul(_burnRate) */\n      jump\t// in\n    tag_155:\n        /* \"memetoken.sol\":3318:3343  amount.mul(_burnRate).div */\n      swap1\n      tag_157\n        /* \"memetoken.sol\":3318:3348  amount.mul(_burnRate).div(100) */\n      jump\t// in\n    tag_154:\n        /* \"memetoken.sol\":3297:3348  uint256 burnAmount = amount.mul(_burnRate).div(100) */\n      swap1\n      pop\n        /* \"memetoken.sol\":941:954  5000 * 10**18 */\n      0x010f0cf064dd59200000\n        /* \"memetoken.sol\":3388:3398  burnAmount */\n      dup2\n        /* \"memetoken.sol\":3388:3415  burnAmount > _maxBurnAmount */\n      gt\n        /* \"memetoken.sol\":3384:3471  if (burnAmount > _maxBurnAmount) {\r... */\n      iszero\n      tag_158\n      jumpi\n      pop\n        /* \"memetoken.sol\":941:954  5000 * 10**18 */\n      0x010f0cf064dd59200000\n        /* \"memetoken.sol\":3384:3471  if (burnAmount > _maxBurnAmount) {\r... */\n    tag_158:\n        /* \"memetoken.sol\":3483:3505  uint256 transferAmount */\n      0x00\n        /* \"memetoken.sol\":3508:3530  amount.sub(burnAmount) */\n      tag_159\n        /* \"memetoken.sol\":3508:3514  amount */\n      dup4\n        /* \"memetoken.sol\":3519:3529  burnAmount */\n      dup4\n        /* \"memetoken.sol\":3508:3518  amount.sub */\n      tag_160\n        /* \"memetoken.sol\":3508:3530  amount.sub(burnAmount) */\n      jump\t// in\n    tag_159:\n        /* \"memetoken.sol\":3483:3530  uint256 transferAmount = amount.sub(burnAmount) */\n      swap1\n      pop\n        /* \"memetoken.sol\":3592:3663  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_161\n        /* \"memetoken.sol\":3614:3620  amount */\n      dup4\n        /* \"memetoken.sol\":3592:3663  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6\n      0x26\n      swap2\n      codecopy\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3592:3609  _balances[sender] */\n      dup9\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":3592:3601  _balances */\n      0x05\n        /* \"memetoken.sol\":3592:3609  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap2\n        /* \"memetoken.sol\":3592:3663  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap1\n        /* \"memetoken.sol\":3592:3613  _balances[sender].sub */\n      tag_97\n        /* \"memetoken.sol\":3592:3663  _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      jump\t// in\n    tag_161:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3572:3589  _balances[sender] */\n      dup1\n      dup8\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":3572:3581  _balances */\n      0x05\n        /* \"memetoken.sol\":3572:3589  _balances[sender] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"memetoken.sol\":3572:3663  _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\") */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"memetoken.sol\":3697:3717  _balances[recipient] */\n      swap1\n      dup7\n      and\n      dup2\n      mstore\n      keccak256\n      sload\n        /* \"memetoken.sol\":3697:3737  _balances[recipient].add(transferAmount) */\n      tag_162\n      swap1\n        /* \"memetoken.sol\":3722:3736  transferAmount */\n      dup3\n        /* \"memetoken.sol\":3697:3721  _balances[recipient].add */\n      tag_104\n        /* \"memetoken.sol\":3697:3737  _balances[recipient].add(transferAmount) */\n      jump\t// in\n    tag_162:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3674:3694  _balances[recipient] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"memetoken.sol\":3674:3683  _balances */\n      0x05\n        /* \"memetoken.sol\":3674:3694  _balances[recipient] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"memetoken.sol\":3674:3737  _balances[recipient] = _balances[recipient].add(transferAmount) */\n      sstore\n        /* \"memetoken.sol\":3763:3775  _totalSupply */\n      sload(0x04)\n        /* \"memetoken.sol\":3763:3791  _totalSupply.sub(burnAmount) */\n      tag_163\n      swap1\n        /* \"memetoken.sol\":3780:3790  burnAmount */\n      dup4\n        /* \"memetoken.sol\":3763:3779  _totalSupply.sub */\n      tag_160\n        /* \"memetoken.sol\":3763:3791  _totalSupply.sub(burnAmount) */\n      jump\t// in\n    tag_163:\n        /* \"memetoken.sol\":3748:3760  _totalSupply */\n      0x04\n        /* \"memetoken.sol\":3748:3791  _totalSupply = _totalSupply.sub(burnAmount) */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"memetoken.sol\":3826:3835  recipient */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3809:3852  Transfer(sender, recipient, transferAmount) */\n      and\n        /* \"memetoken.sol\":3818:3824  sender */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3809:3852  Transfer(sender, recipient, transferAmount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"memetoken.sol\":3837:3851  transferAmount */\n      dup4\n        /* \"memetoken.sol\":3809:3852  Transfer(sender, recipient, transferAmount) */\n      mload(0x40)\n      tag_164\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_164:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"memetoken.sol\":3893:3894  0 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3868:3908  Transfer(sender, address(0), burnAmount) */\n      and\n        /* \"memetoken.sol\":3877:3883  sender */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"memetoken.sol\":3868:3908  Transfer(sender, address(0), burnAmount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"memetoken.sol\":3897:3907  burnAmount */\n      dup5\n        /* \"memetoken.sol\":3868:3908  Transfer(sender, address(0), burnAmount) */\n      mload(0x40)\n      tag_165\n      swap2\n      swap1\n      tag_33\n      jump\t// in\n    tag_165:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"memetoken.sol\":2960:3916  function _transfer(address sender, address recipient, uint256 amount) internal {\r... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":4959:5190  function sub(... */\n    tag_97:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5075:5082  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5134:5146  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5126:5132  b <= a */\n      dup5\n      dup5\n      gt\n      iszero\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5118:5147  require(b <= a, errorMessage) */\n      tag_167\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap2\n      swap1\n      tag_23\n      jump\t// in\n    tag_167:\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":5168:5173  a - b */\n      swap1\n      sub\n      swap1\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":4959:5190  function sub(... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_104:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2813:2820  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2843:2844  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2840  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2839:2844  a + b */\n      tag_171\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2832:2844  return a + b */\n      swap4\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":2755:2851  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1359:1489  function _checkOwner() internal view virtual {... */\n    tag_108:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      tag_173\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1443  _msgSender */\n      tag_87\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1433:1445  _msgSender() */\n      jump\t// in\n    tag_173:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      tag_174\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1427  owner */\n      tag_55\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1429  owner() */\n      jump\t// in\n    tag_174:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1422:1445  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1414:1482  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_110\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_132\n      swap1\n      tag_177\n      jump\t// in\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_111:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2541:2558  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2525:2531  _owner */\n      swap2\n      swap1\n      swap3\n      and\n      swap3\n      dup4\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2506:2522  address oldOwner */\n      swap1\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2573:2613  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2433:2620  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3465:3561  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_156:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3523:3530  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3553:3554  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3550  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3549:3554  a * b */\n      tag_181\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3850:3946  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3908:3915  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3934:3939  a / b */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3938:3939  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3934:3935  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3934:3939  a / b */\n      tag_184\n      jump\t// in\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3122:3218  function sub(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_160:\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3180:3187  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3211  a - b */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3210:3211  b */\n      dup3\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3207  a */\n      dup5\n        /* \"@openzeppelin/contracts/utils/math/SafeMath.sol\":3206:3211  a - b */\n      tag_187\n      jump\t// in\n        /* \"#utility.yul\":14:189   */\n    tag_189:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_105\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_49:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_193\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_193:\n        /* \"#utility.yul\":355:386   */\n      tag_170\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_189\n      jump\t// in\n        /* \"#utility.yul\":397:671   */\n    tag_71:\n      0x00\n      dup1\n        /* \"#utility.yul\":526:528   */\n      0x40\n        /* \"#utility.yul\":514:523   */\n      dup4\n        /* \"#utility.yul\":505:512   */\n      dup6\n        /* \"#utility.yul\":501:524   */\n      sub\n        /* \"#utility.yul\":497:529   */\n      slt\n        /* \"#utility.yul\":494:496   */\n      iszero\n      tag_196\n      jumpi\n        /* \"#utility.yul\":547:553   */\n      dup1\n        /* \"#utility.yul\":539:545   */\n      dup2\n        /* \"#utility.yul\":532:554   */\n      revert\n        /* \"#utility.yul\":494:496   */\n    tag_196:\n        /* \"#utility.yul\":575:606   */\n      tag_197\n        /* \"#utility.yul\":596:605   */\n      dup4\n        /* \"#utility.yul\":575:606   */\n      tag_189\n      jump\t// in\n    tag_197:\n        /* \"#utility.yul\":565:606   */\n      swap2\n      pop\n        /* \"#utility.yul\":625:665   */\n      tag_198\n        /* \"#utility.yul\":661:663   */\n      0x20\n        /* \"#utility.yul\":650:659   */\n      dup5\n        /* \"#utility.yul\":646:664   */\n      add\n        /* \"#utility.yul\":625:665   */\n      tag_189\n      jump\t// in\n    tag_198:\n        /* \"#utility.yul\":615:665   */\n      swap1\n      pop\n        /* \"#utility.yul\":484:671   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":676:1018   */\n    tag_36:\n      0x00\n      dup1\n      0x00\n        /* \"#utility.yul\":822:824   */\n      0x60\n        /* \"#utility.yul\":810:819   */\n      dup5\n        /* \"#utility.yul\":801:808   */\n      dup7\n        /* \"#utility.yul\":797:820   */\n      sub\n        /* \"#utility.yul\":793:825   */\n      slt\n        /* \"#utility.yul\":790:792   */\n      iszero\n      tag_200\n      jumpi\n        /* \"#utility.yul\":843:849   */\n      dup1\n        /* \"#utility.yul\":835:841   */\n      dup2\n        /* \"#utility.yul\":828:850   */\n      revert\n        /* \"#utility.yul\":790:792   */\n    tag_200:\n        /* \"#utility.yul\":871:902   */\n      tag_201\n        /* \"#utility.yul\":892:901   */\n      dup5\n        /* \"#utility.yul\":871:902   */\n      tag_189\n      jump\t// in\n    tag_201:\n        /* \"#utility.yul\":861:902   */\n      swap3\n      pop\n        /* \"#utility.yul\":921:961   */\n      tag_202\n        /* \"#utility.yul\":957:959   */\n      0x20\n        /* \"#utility.yul\":946:955   */\n      dup6\n        /* \"#utility.yul\":942:960   */\n      add\n        /* \"#utility.yul\":921:961   */\n      tag_189\n      jump\t// in\n    tag_202:\n        /* \"#utility.yul\":911:961   */\n      swap2\n      pop\n        /* \"#utility.yul\":1008:1010   */\n      0x40\n        /* \"#utility.yul\":997:1006   */\n      dup5\n        /* \"#utility.yul\":993:1011   */\n      add\n        /* \"#utility.yul\":980:1012   */\n      calldataload\n        /* \"#utility.yul\":970:1012   */\n      swap1\n      pop\n        /* \"#utility.yul\":780:1018   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1023:1289   */\n    tag_26:\n      0x00\n      dup1\n        /* \"#utility.yul\":1152:1154   */\n      0x40\n        /* \"#utility.yul\":1140:1149   */\n      dup4\n        /* \"#utility.yul\":1131:1138   */\n      dup6\n        /* \"#utility.yul\":1127:1150   */\n      sub\n        /* \"#utility.yul\":1123:1155   */\n      slt\n        /* \"#utility.yul\":1120:1122   */\n      iszero\n      tag_204\n      jumpi\n        /* \"#utility.yul\":1173:1179   */\n      dup2\n        /* \"#utility.yul\":1165:1171   */\n      dup3\n        /* \"#utility.yul\":1158:1180   */\n      revert\n        /* \"#utility.yul\":1120:1122   */\n    tag_204:\n        /* \"#utility.yul\":1201:1232   */\n      tag_205\n        /* \"#utility.yul\":1222:1231   */\n      dup4\n        /* \"#utility.yul\":1201:1232   */\n      tag_189\n      jump\t// in\n    tag_205:\n        /* \"#utility.yul\":1191:1232   */\n      swap5\n        /* \"#utility.yul\":1279:1281   */\n      0x20\n        /* \"#utility.yul\":1264:1282   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1251:1283   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1110:1289   */\n      jump\t// out\n        /* \"#utility.yul\":1294:1497   */\n    tag_57:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1458:1490   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1440:1491   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1428:1430   */\n      0x20\n        /* \"#utility.yul\":1413:1431   */\n      add\n      swap1\n        /* \"#utility.yul\":1395:1497   */\n      jump\t// out\n        /* \"#utility.yul\":1502:1689   */\n    tag_29:\n        /* \"#utility.yul\":1667:1681   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1660:1682   */\n      iszero\n        /* \"#utility.yul\":1642:1683   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1630:1632   */\n      0x20\n        /* \"#utility.yul\":1615:1633   */\n      add\n      swap1\n        /* \"#utility.yul\":1597:1689   */\n      jump\t// out\n        /* \"#utility.yul\":1694:2297   */\n    tag_23:\n      0x00\n        /* \"#utility.yul\":1835:1837   */\n      0x20\n        /* \"#utility.yul\":1864:1866   */\n      dup1\n        /* \"#utility.yul\":1853:1862   */\n      dup4\n        /* \"#utility.yul\":1846:1867   */\n      mstore\n        /* \"#utility.yul\":1896:1902   */\n      dup4\n        /* \"#utility.yul\":1890:1903   */\n      mload\n        /* \"#utility.yul\":1939:1945   */\n      dup1\n        /* \"#utility.yul\":1934:1936   */\n      dup3\n        /* \"#utility.yul\":1923:1932   */\n      dup6\n        /* \"#utility.yul\":1919:1937   */\n      add\n        /* \"#utility.yul\":1912:1946   */\n      mstore\n        /* \"#utility.yul\":1964:1968   */\n      dup3\n        /* \"#utility.yul\":1977:2117   */\n    tag_209:\n        /* \"#utility.yul\":1991:1997   */\n      dup2\n        /* \"#utility.yul\":1988:1989   */\n      dup2\n        /* \"#utility.yul\":1985:1998   */\n      lt\n        /* \"#utility.yul\":1977:2117   */\n      iszero\n      tag_211\n      jumpi\n        /* \"#utility.yul\":2086:2100   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":2082:2105   */\n      dup4\n      add\n        /* \"#utility.yul\":2076:2106   */\n      mload\n        /* \"#utility.yul\":2052:2069   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":2071:2073   */\n      0x40\n        /* \"#utility.yul\":2048:2074   */\n      add\n        /* \"#utility.yul\":2041:2107   */\n      mstore\n        /* \"#utility.yul\":2006:2016   */\n      dup3\n      add\n        /* \"#utility.yul\":1977:2117   */\n      jump(tag_209)\n    tag_211:\n        /* \"#utility.yul\":2135:2141   */\n      dup2\n        /* \"#utility.yul\":2132:2133   */\n      dup2\n        /* \"#utility.yul\":2129:2142   */\n      gt\n        /* \"#utility.yul\":2126:2128   */\n      iszero\n      tag_212\n      jumpi\n        /* \"#utility.yul\":2205:2209   */\n      dup4\n        /* \"#utility.yul\":2200:2202   */\n      0x40\n        /* \"#utility.yul\":2191:2197   */\n      dup4\n        /* \"#utility.yul\":2180:2189   */\n      dup8\n        /* \"#utility.yul\":2176:2198   */\n      add\n        /* \"#utility.yul\":2172:2203   */\n      add\n        /* \"#utility.yul\":2165:2210   */\n      mstore\n        /* \"#utility.yul\":2126:2128   */\n    tag_212:\n      pop\n        /* \"#utility.yul\":2281:2283   */\n      0x1f\n        /* \"#utility.yul\":2260:2275   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":2256:2285   */\n      and\n        /* \"#utility.yul\":2241:2286   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":2288:2290   */\n      0x40\n        /* \"#utility.yul\":2237:2291   */\n      add\n      swap4\n        /* \"#utility.yul\":1815:2297   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2302:2701   */\n    tag_150:\n        /* \"#utility.yul\":2504:2506   */\n      0x20\n        /* \"#utility.yul\":2486:2507   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2543:2545   */\n      0x23\n        /* \"#utility.yul\":2523:2541   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2516:2546   */\n      mstore\n        /* \"#utility.yul\":2582:2616   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":2577:2579   */\n      0x40\n        /* \"#utility.yul\":2562:2580   */\n      dup3\n      add\n        /* \"#utility.yul\":2555:2617   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":2648:2650   */\n      0x60\n        /* \"#utility.yul\":2633:2651   */\n      dup3\n      add\n        /* \"#utility.yul\":2626:2659   */\n      mstore\n        /* \"#utility.yul\":2691:2694   */\n      0x80\n        /* \"#utility.yul\":2676:2695   */\n      add\n      swap1\n        /* \"#utility.yul\":2476:2701   */\n      jump\t// out\n        /* \"#utility.yul\":2706:3108   */\n    tag_133:\n        /* \"#utility.yul\":2908:2910   */\n      0x20\n        /* \"#utility.yul\":2890:2911   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":2947:2949   */\n      0x26\n        /* \"#utility.yul\":2927:2945   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":2920:2950   */\n      mstore\n        /* \"#utility.yul\":2986:3020   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":2981:2983   */\n      0x40\n        /* \"#utility.yul\":2966:2984   */\n      dup3\n      add\n        /* \"#utility.yul\":2959:3021   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":3052:3054   */\n      0x60\n        /* \"#utility.yul\":3037:3055   */\n      dup3\n      add\n        /* \"#utility.yul\":3030:3066   */\n      mstore\n        /* \"#utility.yul\":3098:3101   */\n      0x80\n        /* \"#utility.yul\":3083:3102   */\n      add\n      swap1\n        /* \"#utility.yul\":2880:3108   */\n      jump\t// out\n        /* \"#utility.yul\":3113:3511   */\n    tag_142:\n        /* \"#utility.yul\":3315:3317   */\n      0x20\n        /* \"#utility.yul\":3297:3318   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3354:3356   */\n      0x22\n        /* \"#utility.yul\":3334:3352   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3327:3357   */\n      mstore\n        /* \"#utility.yul\":3393:3427   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":3388:3390   */\n      0x40\n        /* \"#utility.yul\":3373:3391   */\n      dup3\n      add\n        /* \"#utility.yul\":3366:3428   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":3459:3461   */\n      0x60\n        /* \"#utility.yul\":3444:3462   */\n      dup3\n      add\n        /* \"#utility.yul\":3437:3469   */\n      mstore\n        /* \"#utility.yul\":3501:3504   */\n      0x80\n        /* \"#utility.yul\":3486:3505   */\n      add\n      swap1\n        /* \"#utility.yul\":3287:3511   */\n      jump\t// out\n        /* \"#utility.yul\":3516:3928   */\n    tag_153:\n        /* \"#utility.yul\":3718:3720   */\n      0x20\n        /* \"#utility.yul\":3700:3721   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3757:3759   */\n      0x30\n        /* \"#utility.yul\":3737:3755   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3730:3760   */\n      mstore\n        /* \"#utility.yul\":3796:3830   */\n      0x45524332303a207472616e7366657220616d6f756e74206d7573742062652067\n        /* \"#utility.yul\":3791:3793   */\n      0x40\n        /* \"#utility.yul\":3776:3794   */\n      dup3\n      add\n        /* \"#utility.yul\":3769:3831   */\n      mstore\n      shl(0x80, 0x726561746572207468616e207a65726f)\n        /* \"#utility.yul\":3862:3864   */\n      0x60\n        /* \"#utility.yul\":3847:3865   */\n      dup3\n      add\n        /* \"#utility.yul\":3840:3886   */\n      mstore\n        /* \"#utility.yul\":3918:3921   */\n      0x80\n        /* \"#utility.yul\":3903:3922   */\n      add\n      swap1\n        /* \"#utility.yul\":3690:3928   */\n      jump\t// out\n        /* \"#utility.yul\":3933:4289   */\n    tag_177:\n        /* \"#utility.yul\":4135:4137   */\n      0x20\n        /* \"#utility.yul\":4117:4138   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4154:4172   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":4147:4177   */\n      mstore\n        /* \"#utility.yul\":4213:4247   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":4208:4210   */\n      0x40\n        /* \"#utility.yul\":4193:4211   */\n      dup3\n      add\n        /* \"#utility.yul\":4186:4248   */\n      mstore\n        /* \"#utility.yul\":4280:4282   */\n      0x60\n        /* \"#utility.yul\":4265:4283   */\n      add\n      swap1\n        /* \"#utility.yul\":4107:4289   */\n      jump\t// out\n        /* \"#utility.yul\":4294:4695   */\n    tag_147:\n        /* \"#utility.yul\":4496:4498   */\n      0x20\n        /* \"#utility.yul\":4478:4499   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4535:4537   */\n      0x25\n        /* \"#utility.yul\":4515:4533   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4508:4538   */\n      mstore\n        /* \"#utility.yul\":4574:4608   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4569:4571   */\n      0x40\n        /* \"#utility.yul\":4554:4572   */\n      dup3\n      add\n        /* \"#utility.yul\":4547:4609   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4640:4642   */\n      0x60\n        /* \"#utility.yul\":4625:4643   */\n      dup3\n      add\n        /* \"#utility.yul\":4618:4653   */\n      mstore\n        /* \"#utility.yul\":4685:4688   */\n      0x80\n        /* \"#utility.yul\":4670:4689   */\n      add\n      swap1\n        /* \"#utility.yul\":4468:4695   */\n      jump\t// out\n        /* \"#utility.yul\":4700:5100   */\n    tag_139:\n        /* \"#utility.yul\":4902:4904   */\n      0x20\n        /* \"#utility.yul\":4884:4905   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4941:4943   */\n      0x24\n        /* \"#utility.yul\":4921:4939   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4914:4944   */\n      mstore\n        /* \"#utility.yul\":4980:5014   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":4975:4977   */\n      0x40\n        /* \"#utility.yul\":4960:4978   */\n      dup3\n      add\n        /* \"#utility.yul\":4953:5015   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":5046:5048   */\n      0x60\n        /* \"#utility.yul\":5031:5049   */\n      dup3\n      add\n        /* \"#utility.yul\":5024:5058   */\n      mstore\n        /* \"#utility.yul\":5090:5093   */\n      0x80\n        /* \"#utility.yul\":5075:5094   */\n      add\n      swap1\n        /* \"#utility.yul\":4874:5100   */\n      jump\t// out\n        /* \"#utility.yul\":5105:5282   */\n    tag_33:\n        /* \"#utility.yul\":5251:5276   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x20\n        /* \"#utility.yul\":5224:5242   */\n      add\n      swap1\n        /* \"#utility.yul\":5206:5282   */\n      jump\t// out\n        /* \"#utility.yul\":5287:5471   */\n    tag_42:\n        /* \"#utility.yul\":5459:5463   */\n      0xff\n        /* \"#utility.yul\":5447:5464   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":5429:5465   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5417:5419   */\n      0x20\n        /* \"#utility.yul\":5402:5420   */\n      add\n      swap1\n        /* \"#utility.yul\":5384:5471   */\n      jump\t// out\n        /* \"#utility.yul\":5476:5604   */\n    tag_171:\n      0x00\n        /* \"#utility.yul\":5547:5548   */\n      dup3\n        /* \"#utility.yul\":5543:5549   */\n      not\n        /* \"#utility.yul\":5540:5541   */\n      dup3\n        /* \"#utility.yul\":5537:5550   */\n      gt\n        /* \"#utility.yul\":5534:5536   */\n      iszero\n      tag_224\n      jumpi\n        /* \"#utility.yul\":5553:5571   */\n      tag_224\n      tag_225\n      jump\t// in\n    tag_224:\n      pop\n        /* \"#utility.yul\":5589:5598   */\n      add\n      swap1\n        /* \"#utility.yul\":5524:5604   */\n      jump\t// out\n        /* \"#utility.yul\":5609:5826   */\n    tag_184:\n      0x00\n        /* \"#utility.yul\":5675:5676   */\n      dup3\n        /* \"#utility.yul\":5665:5667   */\n      tag_227\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":5700:5731   */\n      dup2\n      mstore\n        /* \"#utility.yul\":5754:5758   */\n      0x12\n        /* \"#utility.yul\":5751:5752   */\n      0x04\n        /* \"#utility.yul\":5744:5759   */\n      mstore\n        /* \"#utility.yul\":5782:5786   */\n      0x24\n        /* \"#utility.yul\":5707:5708   */\n      dup2\n        /* \"#utility.yul\":5772:5787   */\n      revert\n        /* \"#utility.yul\":5665:5667   */\n    tag_227:\n      pop\n        /* \"#utility.yul\":5811:5820   */\n      div\n      swap1\n        /* \"#utility.yul\":5655:5826   */\n      jump\t// out\n        /* \"#utility.yul\":5831:5999   */\n    tag_181:\n      0x00\n        /* \"#utility.yul\":5937:5938   */\n      dup2\n        /* \"#utility.yul\":5933:5934   */\n      0x00\n        /* \"#utility.yul\":5929:5935   */\n      not\n        /* \"#utility.yul\":5925:5939   */\n      div\n        /* \"#utility.yul\":5922:5923   */\n      dup4\n        /* \"#utility.yul\":5919:5940   */\n      gt\n        /* \"#utility.yul\":5914:5915   */\n      dup3\n        /* \"#utility.yul\":5907:5916   */\n      iszero\n        /* \"#utility.yul\":5900:5917   */\n      iszero\n        /* \"#utility.yul\":5896:5941   */\n      and\n        /* \"#utility.yul\":5893:5895   */\n      iszero\n      tag_230\n      jumpi\n        /* \"#utility.yul\":5944:5962   */\n      tag_230\n      tag_225\n      jump\t// in\n    tag_230:\n      pop\n        /* \"#utility.yul\":5984:5993   */\n      mul\n      swap1\n        /* \"#utility.yul\":5883:5999   */\n      jump\t// out\n        /* \"#utility.yul\":6004:6129   */\n    tag_187:\n      0x00\n        /* \"#utility.yul\":6072:6073   */\n      dup3\n        /* \"#utility.yul\":6069:6070   */\n      dup3\n        /* \"#utility.yul\":6066:6074   */\n      lt\n        /* \"#utility.yul\":6063:6065   */\n      iszero\n      tag_233\n      jumpi\n        /* \"#utility.yul\":6077:6095   */\n      tag_233\n      tag_225\n      jump\t// in\n    tag_233:\n      pop\n        /* \"#utility.yul\":6114:6123   */\n      sub\n      swap1\n        /* \"#utility.yul\":6053:6129   */\n      jump\t// out\n        /* \"#utility.yul\":6134:6514   */\n    tag_79:\n        /* \"#utility.yul\":6219:6220   */\n      0x02\n        /* \"#utility.yul\":6209:6221   */\n      dup2\n      div\n        /* \"#utility.yul\":6266:6267   */\n      0x01\n        /* \"#utility.yul\":6256:6268   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":6277:6279   */\n      tag_235\n      jumpi\n        /* \"#utility.yul\":6331:6335   */\n      0x7f\n        /* \"#utility.yul\":6323:6329   */\n      dup3\n        /* \"#utility.yul\":6319:6336   */\n      and\n        /* \"#utility.yul\":6309:6336   */\n      swap2\n      pop\n        /* \"#utility.yul\":6277:6279   */\n    tag_235:\n        /* \"#utility.yul\":6384:6386   */\n      0x20\n        /* \"#utility.yul\":6376:6382   */\n      dup3\n        /* \"#utility.yul\":6373:6387   */\n      lt\n        /* \"#utility.yul\":6353:6371   */\n      dup2\n        /* \"#utility.yul\":6350:6388   */\n      eq\n        /* \"#utility.yul\":6347:6349   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":6430:6440   */\n      0x4e487b71\n        /* \"#utility.yul\":6425:6428   */\n      0xe0\n        /* \"#utility.yul\":6421:6441   */\n      shl\n        /* \"#utility.yul\":6418:6419   */\n      0x00\n        /* \"#utility.yul\":6411:6442   */\n      mstore\n        /* \"#utility.yul\":6465:6469   */\n      0x22\n        /* \"#utility.yul\":6462:6463   */\n      0x04\n        /* \"#utility.yul\":6455:6470   */\n      mstore\n        /* \"#utility.yul\":6493:6497   */\n      0x24\n        /* \"#utility.yul\":6490:6491   */\n      0x00\n        /* \"#utility.yul\":6483:6498   */\n      revert\n        /* \"#utility.yul\":6347:6349   */\n    tag_236:\n      pop\n        /* \"#utility.yul\":6189:6514   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6519:6646   */\n    tag_225:\n        /* \"#utility.yul\":6580:6590   */\n      0x4e487b71\n        /* \"#utility.yul\":6575:6578   */\n      0xe0\n        /* \"#utility.yul\":6571:6591   */\n      shl\n        /* \"#utility.yul\":6568:6569   */\n      0x00\n        /* \"#utility.yul\":6561:6592   */\n      mstore\n        /* \"#utility.yul\":6611:6615   */\n      0x11\n        /* \"#utility.yul\":6608:6609   */\n      0x04\n        /* \"#utility.yul\":6601:6616   */\n      mstore\n        /* \"#utility.yul\":6635:6639   */\n      0x24\n        /* \"#utility.yul\":6632:6633   */\n      0x00\n        /* \"#utility.yul\":6625:6640   */\n      revert\n    stop\n    data_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6 45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365\n    data_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330 45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365\n    data_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8 45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f\n\n    auxdata: 0xa26469706673582212204f2e71cfc02479edbc366567d711fd2dd50ce131639b43a37e0a28a13e91489a64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:578:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "115:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "125:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "137:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "148:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "133:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "133:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "125:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "167:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "178:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "160:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "160:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "160:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "84:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "95:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "106:4:8",
														"type": ""
													}
												],
												"src": "14:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "251:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "261:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "275:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "281:1:8",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "271:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "271:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "261:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "292:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "322:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "328:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "318:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "296:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "369:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "371:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "385:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "393:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "381:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "381:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "371:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "349:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "342:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "342:26:8"
															},
															"nodeType": "YulIf",
															"src": "339:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "459:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "480:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "487:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "492:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "483:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "483:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "473:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "473:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "473:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "524:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "527:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "517:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "517:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "517:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "552:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "555:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "545:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "545:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "545:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "415:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "438:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "446:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "435:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "435:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "412:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "412:38:8"
															},
															"nodeType": "YulIf",
															"src": "409:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "231:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "240:6:8",
														"type": ""
													}
												],
												"src": "196:380:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60c0604052601460808190527f52657665727365204372616d657220546f6b656e00000000000000000000000060a09081526200004091600191906200018f565b50604080518082019091526009808252682922ab21a920a6a2a960b91b602090920191825262000073916002916200018f565b506003805460ff1916601217905569d3c21bcecceda10000006004553480156200009c57600080fd5b50620000b1620000ab6200013b565b6200013f565b60045460056000620000c26200013b565b6001600160a01b03168152602081019190915260400160002055620000e66200013b565b6001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6004546040516200012d919062000235565b60405180910390a36200027b565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200019d906200023e565b90600052602060002090601f016020900481019282620001c157600085556200020c565b82601f10620001dc57805160ff19168380011785556200020c565b828001600101855582156200020c579182015b828111156200020c578251825591602001919060010190620001ef565b506200021a9291506200021e565b5090565b5b808211156200021a57600081556001016200021f565b90815260200190565b6002810460018216806200025357607f821691505b602082108114156200027557634e487b7160e01b600052602260045260246000fd5b50919050565b610cf5806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063a457c2d711610066578063a457c2d7146101b7578063a9059cbb146101ca578063dd62ed3e146101dd578063f2fde38b146101f0576100ea565b8063715018a6146101905780638da5cb5b1461019a57806395d89b41146101af576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806370a082311461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f7610203565b604051610104919061094a565b60405180910390f35b61012061011b366004610902565b610295565b604051610104919061093f565b6101356102b2565b6040516101049190610b76565b6101206101503660046108c7565b6102b8565b61015d61033f565b6040516101049190610b7f565b610120610178366004610902565b610348565b61013561018b36600461087b565b610396565b6101986103b5565b005b6101a26103c9565b604051610104919061092b565b6100f76103d8565b6101206101c5366004610902565b6103e7565b6101206101d8366004610902565b61044f565b6101356101eb366004610895565b610463565b6101986101fe36600461087b565b61048e565b60606001805461021290610bfb565b80601f016020809104026020016040519081016040528092919081815260200182805461023e90610bfb565b801561028b5780601f106102605761010080835404028352916020019161028b565b820191906000526020600020905b81548152906001019060200180831161026e57829003601f168201915b5050505050905090565b60006102a96102a26104d1565b84846104d5565b50600192915050565b60045490565b60006102c5848484610589565b610335846102d16104d1565b61033085604051806060016040528060288152602001610c73602891396001600160a01b038a1660009081526006602052604081209061030f6104d1565b6001600160a01b031681526020810191909152604001600020549190610772565b6104d5565b5060019392505050565b60035460ff1690565b60006102a96103556104d1565b8461033085600660006103666104d1565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061079e565b6001600160a01b0381166000908152600560205260409020545b919050565b6103bd6107b1565b6103c760006107f0565b565b6000546001600160a01b031690565b60606002805461021290610bfb565b60006102a96103f46104d1565b8461033085604051806060016040528060258152602001610c9b602591396006600061041e6104d1565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610772565b60006102a961045c6104d1565b8484610589565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6104966107b1565b6001600160a01b0381166104c55760405162461bcd60e51b81526004016104bc906109e0565b60405180910390fd5b6104ce816107f0565b50565b3390565b6001600160a01b0383166104fb5760405162461bcd60e51b81526004016104bc90610b32565b6001600160a01b0382166105215760405162461bcd60e51b81526004016104bc90610a26565b6001600160a01b0380841660008181526006602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061057c908590610b76565b60405180910390a3505050565b6001600160a01b0383166105af5760405162461bcd60e51b81526004016104bc90610aed565b6001600160a01b0382166105d55760405162461bcd60e51b81526004016104bc9061099d565b600081116105f55760405162461bcd60e51b81526004016104bc90610a68565b600061060d6064610607846002610840565b9061084c565b905069010f0cf064dd5920000081111561062e575069010f0cf064dd592000005b600061063a8383610858565b905061067983604051806060016040528060268152602001610c4d602691396001600160a01b0388166000908152600560205260409020549190610772565b6001600160a01b0380871660009081526005602052604080822093909355908616815220546106a8908261079e565b6001600160a01b0385166000908152600560205260409020556004546106ce9083610858565b600481905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107179190610b76565b60405180910390a360006001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107639190610b76565b60405180910390a35050505050565b600081848411156107965760405162461bcd60e51b81526004016104bc919061094a565b505050900390565b60006107aa8284610b8d565b9392505050565b6107b96104d1565b6001600160a01b03166107ca6103c9565b6001600160a01b0316146103c75760405162461bcd60e51b81526004016104bc90610ab8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107aa8284610bc5565b60006107aa8284610ba5565b60006107aa8284610be4565b80356001600160a01b03811681146103b057600080fd5b60006020828403121561088c578081fd5b6107aa82610864565b600080604083850312156108a7578081fd5b6108b083610864565b91506108be60208401610864565b90509250929050565b6000806000606084860312156108db578081fd5b6108e484610864565b92506108f260208501610864565b9150604084013590509250925092565b60008060408385031215610914578182fd5b61091d83610864565b946020939093013593505050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b818110156109765785810183015185820160400152820161095a565b818111156109875783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526030908201527f45524332303a207472616e7366657220616d6f756e74206d757374206265206760408201526f726561746572207468616e207a65726f60801b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b60008219821115610ba057610ba0610c36565b500190565b600082610bc057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610bdf57610bdf610c36565b500290565b600082821015610bf657610bf6610c36565b500390565b600281046001821680610c0f57607f821691505b60208210811415610c3057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204f2e71cfc02479edbc366567d711fd2dd50ce131639b43a37e0a28a13e91489a64736f6c63430008000033",
							"opcodes": "PUSH1 0xC0 PUSH1 0x40 MSTORE PUSH1 0x14 PUSH1 0x80 DUP2 SWAP1 MSTORE PUSH32 0x52657665727365204372616D657220546F6B656E000000000000000000000000 PUSH1 0xA0 SWAP1 DUP2 MSTORE PUSH3 0x40 SWAP2 PUSH1 0x1 SWAP2 SWAP1 PUSH3 0x18F JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x9 DUP1 DUP3 MSTORE PUSH9 0x2922AB21A920A6A2A9 PUSH1 0xB9 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH3 0x73 SWAP2 PUSH1 0x2 SWAP2 PUSH3 0x18F JUMP JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x12 OR SWAP1 SSTORE PUSH10 0xD3C21BCECCEDA1000000 PUSH1 0x4 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x9C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0xB1 PUSH3 0xAB PUSH3 0x13B JUMP JUMPDEST PUSH3 0x13F JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 PUSH1 0x0 PUSH3 0xC2 PUSH3 0x13B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH3 0xE6 PUSH3 0x13B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH3 0x12D SWAP2 SWAP1 PUSH3 0x235 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 0x27B JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x19D SWAP1 PUSH3 0x23E JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x1C1 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x20C JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x1DC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x20C JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x20C JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x20C JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x1EF JUMP JUMPDEST POP PUSH3 0x21A SWAP3 SWAP2 POP PUSH3 0x21E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x21A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x21F JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x253 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x275 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xCF5 DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1F0 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AF JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x94A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C7 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x33F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xB7F JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x348 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x396 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x3B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A2 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x92B JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x463 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x212 SWAP1 PUSH2 0xBFB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23E SWAP1 PUSH2 0xBFB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x28B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x260 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x28B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x2A2 PUSH2 0x4D1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4D5 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5 DUP5 DUP5 DUP5 PUSH2 0x589 JUMP JUMPDEST PUSH2 0x335 DUP5 PUSH2 0x2D1 PUSH2 0x4D1 JUMP JUMPDEST PUSH2 0x330 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC73 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x30F PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x355 PUSH2 0x4D1 JUMP JUMPDEST DUP5 PUSH2 0x330 DUP6 PUSH1 0x6 PUSH1 0x0 PUSH2 0x366 PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3BD PUSH2 0x7B1 JUMP JUMPDEST PUSH2 0x3C7 PUSH1 0x0 PUSH2 0x7F0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x212 SWAP1 PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x3F4 PUSH2 0x4D1 JUMP JUMPDEST DUP5 PUSH2 0x330 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC9B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x6 PUSH1 0x0 PUSH2 0x41E PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x45C PUSH2 0x4D1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x496 PUSH2 0x7B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x9E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4CE DUP2 PUSH2 0x7F0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xB32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x521 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x57C SWAP1 DUP6 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60D PUSH1 0x64 PUSH2 0x607 DUP5 PUSH1 0x2 PUSH2 0x840 JUMP JUMPDEST SWAP1 PUSH2 0x84C JUMP JUMPDEST SWAP1 POP PUSH10 0x10F0CF064DD59200000 DUP2 GT ISZERO PUSH2 0x62E JUMPI POP PUSH10 0x10F0CF064DD59200000 JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP4 DUP4 PUSH2 0x858 JUMP JUMPDEST SWAP1 POP PUSH2 0x679 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4D PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x6A8 SWAP1 DUP3 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 SLOAD PUSH2 0x6CE SWAP1 DUP4 PUSH2 0x858 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x717 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP2 SWAP1 PUSH2 0x94A JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xB8D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7B9 PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CA PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBE4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7AA DUP3 PUSH2 0x864 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8B0 DUP4 PUSH2 0x864 JUMP JUMPDEST SWAP2 POP PUSH2 0x8BE PUSH1 0x20 DUP5 ADD PUSH2 0x864 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E4 DUP5 PUSH2 0x864 JUMP JUMPDEST SWAP3 POP PUSH2 0x8F2 PUSH1 0x20 DUP6 ADD PUSH2 0x864 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x914 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x91D DUP4 PUSH2 0x864 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x976 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x95A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x987 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E74206D7573742062652067 PUSH1 0x40 DUP3 ADD MSTORE PUSH16 0x726561746572207468616E207A65726F PUSH1 0x80 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xBA0 JUMPI PUSH2 0xBA0 PUSH2 0xC36 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xBDF JUMPI PUSH2 0xBDF PUSH2 0xC36 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBF6 PUSH2 0xC36 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xC0F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xC30 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212204F2E PUSH18 0xCFC02479EDBC366567D711FD2DD50CE13163 SWAP12 NUMBER LOG3 PUSH31 0xA28A13E91489A64736F6C6343000800003300000000000000000000000000 ",
							"sourceMap": "446:45:7:-:0;358:3907;446:45;;358:3907;446:45;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;498:36:7;;;;;;;;;;;;;-1:-1:-1;;;498:36:7;;;;;;;;;;;;:::i;:::-;-1:-1:-1;541:28:7;;;-1:-1:-1;;541:28:7;567:2;541:28;;;609:16;578:47;;1002:135;;;;;;;;;-1:-1:-1;936:32:0;955:12;:10;:12::i;:::-;936:18;:32::i;:::-;1053:12:7;;1027:9;:23;1037:12;:10;:12::i;:::-;-1:-1:-1;;;;;1027:23:7;;;;;;;;;;;;-1:-1:-1;1027:23:7;:38;1102:12;:10;:12::i;:::-;-1:-1:-1;;;;;1081:48:7;1098:1;-1:-1:-1;;;;;1081:48:7;;1116:12;;1081:48;;;;;;:::i;:::-;;;;;;;;358:3907;;640:96:5;719:10;640:96;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2433:187;;:::o;358:3907:7:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;358:3907:7;;;-1:-1:-1;358:3907:7;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:8;160:25;;;148:2;133:18;;115:76::o;196:380::-;281:1;271:12;;328:1;318:12;;;339:2;;393:4;385:6;381:17;371:27;;339:2;446;438:6;435:14;415:18;412:38;409:2;;;492:10;487:3;483:20;480:1;473:31;527:4;524:1;517:15;555:4;552:1;545:15;409:2;;251:325;;;:::o;:::-;358:3907:7;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6648:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:8"
															},
															"nodeType": "YulIf",
															"src": "113:2:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:8",
														"type": ""
													}
												],
												"src": "14:175:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:8"
															},
															"nodeType": "YulIf",
															"src": "274:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:8",
														"type": ""
													}
												],
												"src": "194:198:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:187:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "530:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "539:6:8"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "547:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "532:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "532:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "532:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "505:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "514:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "501:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "501:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "526:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "497:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "497:32:8"
															},
															"nodeType": "YulIf",
															"src": "494:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "565:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "596:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "575:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "575:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "565:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "615:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "661:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "646:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "646:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "625:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "625:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "615:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "442:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "453:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "465:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "473:6:8",
														"type": ""
													}
												],
												"src": "397:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "780:238:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "826:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "835:6:8"
																				},
																				{
																					"name": "value2",
																					"nodeType": "YulIdentifier",
																					"src": "843:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "828:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "828:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "828:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "801:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "810:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "797:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "797:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "822:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "793:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "793:32:8"
															},
															"nodeType": "YulIf",
															"src": "790:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "861:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "892:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "871:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "871:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "861:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "911:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "946:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "957:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "942:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "942:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "921:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "911:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "970:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "997:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1008:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "993:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "993:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "980:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "980:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "970:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "730:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "741:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "753:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "761:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "769:6:8",
														"type": ""
													}
												],
												"src": "676:342:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1110:179:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1156:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1165:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1173:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1158:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1158:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1158:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1131:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1140:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1127:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1127:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1152:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1123:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:32:8"
															},
															"nodeType": "YulIf",
															"src": "1120:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1191:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1222:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "1201:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1201:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1191:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1241:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1268:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1279:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1264:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1264:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1251:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1251:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1241:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1068:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1079:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1091:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1099:6:8",
														"type": ""
													}
												],
												"src": "1023:266:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1395:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1405:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1417:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1428:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1413:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1413:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1405:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1447:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1462:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1478:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1483:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1474:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1474:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1487:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1470:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1470:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1458:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1458:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1440:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1440:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1440:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1364:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1375:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1386:4:8",
														"type": ""
													}
												],
												"src": "1294:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1597:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1607:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1619:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1630:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1615:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1615:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1607:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1649:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1674:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1667:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1667:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1660:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1660:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1642:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1642:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1642:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1566:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1577:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1588:4:8",
														"type": ""
													}
												],
												"src": "1502:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1815:482:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1825:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1835:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1829:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1853:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1864:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1846:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1846:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1846:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1876:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1896:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1890:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1890:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1880:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1923:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1934:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1919:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1919:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1939:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1912:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1912:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1912:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1955:13:8",
															"value": {
																"name": "tail",
																"nodeType": "YulIdentifier",
																"src": "1964:4:8"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1959:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2027:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "2056:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "2067:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2052:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2052:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2071:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2048:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2048:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "2090:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "2098:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2086:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2086:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "2102:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2082:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2082:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2076:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2076:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2041:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2041:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2041:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1988:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1991:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1985:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1985:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1999:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2001:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2010:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2013:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2006:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2006:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2001:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1981:3:8",
																"statements": []
															},
															"src": "1977:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2151:69:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "2180:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "2191:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2176:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2176:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2200:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2172:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2172:31:8"
																				},
																				{
																					"name": "tail",
																					"nodeType": "YulIdentifier",
																					"src": "2205:4:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2165:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2165:45:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2165:45:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2132:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2135:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2129:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2129:13:8"
															},
															"nodeType": "YulIf",
															"src": "2126:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2229:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2245:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "2264:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2272:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2260:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2260:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2281:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "2277:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2277:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "2256:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2256:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2241:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2241:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2288:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2237:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2237:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2229:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1784:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1795:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1806:4:8",
														"type": ""
													}
												],
												"src": "1694:603:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2476:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2493:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2504:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2486:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2486:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2486:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2527:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2538:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2523:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2523:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2543:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2516:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2516:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2516:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2566:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2577:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2562:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2562:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2582:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2555:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2555:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2555:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2637:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2648:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2633:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2633:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2653:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2626:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2626:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2626:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2668:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2680:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2691:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2676:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2676:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2668:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2453:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2467:4:8",
														"type": ""
													}
												],
												"src": "2302:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2880:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2897:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2908:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2890:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2890:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2890:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2931:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2942:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2927:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2927:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2947:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2920:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2920:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2920:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2970:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2981:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2966:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2966:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2986:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2959:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2959:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2959:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3041:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3052:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3037:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3037:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3057:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3030:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3030:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3030:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3075:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3087:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3098:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3083:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3083:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3075:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2857:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2871:4:8",
														"type": ""
													}
												],
												"src": "2706:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3287:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3304:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3315:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3297:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3297:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3297:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3338:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3349:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3334:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3334:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3354:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3327:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3327:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3327:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3377:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3388:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3373:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3373:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3393:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3366:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3366:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3366:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3448:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3459:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3444:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3444:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3464:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3437:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3437:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3437:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3478:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3490:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3501:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3486:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3486:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3478:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3264:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3278:4:8",
														"type": ""
													}
												],
												"src": "3113:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3690:238:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3707:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3718:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3700:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3700:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3700:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3741:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3752:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3737:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3737:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3757:2:8",
																		"type": "",
																		"value": "48"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3730:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3730:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3730:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3780:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3791:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3776:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3776:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3796:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount must be g"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3769:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3769:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3769:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3851:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3862:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3847:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3847:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3867:18:8",
																		"type": "",
																		"value": "reater than zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3840:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3840:46:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3840:46:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3895:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3907:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3918:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3903:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3903:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3895:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_5411d640b7078a89e049550651843b3a0ae45aa28987be3a3e649daad0239f21__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3667:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3681:4:8",
														"type": ""
													}
												],
												"src": "3516:412:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4107:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4124:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4135:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4117:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4117:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4117:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4158:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4169:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4154:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4154:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4174:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4147:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4147:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4147:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4197:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4208:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4193:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4193:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4213:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4186:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4186:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4186:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4257:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4269:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4280:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4265:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4265:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4257:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4084:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4098:4:8",
														"type": ""
													}
												],
												"src": "3933:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4468:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4485:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4496:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4478:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4478:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4478:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4519:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4530:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4515:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4515:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4535:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4508:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4508:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4508:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4558:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4569:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4554:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4554:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4574:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4547:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4547:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4547:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4629:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4640:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4625:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4625:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4645:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4618:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4618:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4618:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4662:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4674:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4685:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4670:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4670:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4662:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4445:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4459:4:8",
														"type": ""
													}
												],
												"src": "4294:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4874:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4891:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4902:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4884:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4884:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4884:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4925:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4936:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4921:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4921:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4941:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4914:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4914:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4914:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4964:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4975:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4960:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4960:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4980:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4953:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4953:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4953:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5035:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5046:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5031:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5031:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5051:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5024:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5024:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5024:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5067:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5079:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5090:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5075:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5075:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5067:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4851:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4865:4:8",
														"type": ""
													}
												],
												"src": "4700:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5206:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5216:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5228:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5224:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5224:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5216:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5258:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5269:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5175:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5186:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5197:4:8",
														"type": ""
													}
												],
												"src": "5105:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5384:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5394:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5406:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5417:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5402:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5402:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5394:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5436:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5451:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5459:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5447:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5447:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5429:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5429:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5429:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5353:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5364:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5375:4:8",
														"type": ""
													}
												],
												"src": "5287:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5524:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5551:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5553:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5553:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5553:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5540:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5547:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5543:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5543:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5537:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5537:13:8"
															},
															"nodeType": "YulIf",
															"src": "5534:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5582:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5593:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5596:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5589:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5589:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5582:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5507:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5510:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5516:3:8",
														"type": ""
													}
												],
												"src": "5476:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5655:171:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5686:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "5707:1:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5714:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5719:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5710:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5710:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5700:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5700:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5700:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5751:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5754:4:8",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5744:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5744:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5744:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "5779:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5782:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5772:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5772:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5772:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5675:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5668:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5668:9:8"
															},
															"nodeType": "YulIf",
															"src": "5665:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5806:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5815:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5818:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "5811:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5811:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "5806:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5640:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5643:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "5649:1:8",
														"type": ""
													}
												],
												"src": "5609:217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5883:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5942:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5944:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5944:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5944:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5914:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "5907:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5907:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "5900:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5900:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5922:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "5933:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "5929:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "5929:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "5937:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "5925:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5925:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "5919:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5919:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5896:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5896:45:8"
															},
															"nodeType": "YulIf",
															"src": "5893:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5973:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5988:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5991:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "5984:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5984:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "5973:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5862:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5865:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "5871:7:8",
														"type": ""
													}
												],
												"src": "5831:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6053:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6075:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "6077:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6077:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6077:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6069:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6072:1:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "6066:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6066:8:8"
															},
															"nodeType": "YulIf",
															"src": "6063:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6106:17:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6118:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6121:1:8"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6114:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6114:9:8"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "6106:4:8"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6035:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6038:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "6044:4:8",
														"type": ""
													}
												],
												"src": "6004:125:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6189:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6199:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6213:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6219:1:8",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "6209:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6209:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "6199:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6230:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "6260:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6266:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "6256:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6256:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "6234:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6307:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6309:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6323:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6331:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6319:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6319:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6309:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6287:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6280:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6280:26:8"
															},
															"nodeType": "YulIf",
															"src": "6277:2:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6397:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6418:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6425:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6430:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6421:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6421:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6411:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6411:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6411:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6462:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6465:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6455:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6455:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6455:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6490:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6493:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6483:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6483:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6483:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6353:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6376:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6384:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6373:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6373:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6350:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6350:38:8"
															},
															"nodeType": "YulIf",
															"src": "6347:2:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "6169:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "6178:6:8",
														"type": ""
													}
												],
												"src": "6134:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6551:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6568:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6575:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6580:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6571:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6571:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6561:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6561:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6561:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6608:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6611:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6601:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6601:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6601:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6632:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6635:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "6625:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6625:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6625:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "6519:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5411d640b7078a89e049550651843b3a0ae45aa28987be3a3e649daad0239f21__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 48)\n        mstore(add(headStart, 64), \"ERC20: transfer amount must be g\")\n        mstore(add(headStart, 96), \"reater than zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063715018a61161008c578063a457c2d711610066578063a457c2d7146101b7578063a9059cbb146101ca578063dd62ed3e146101dd578063f2fde38b146101f0576100ea565b8063715018a6146101905780638da5cb5b1461019a57806395d89b41146101af576100ea565b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016a57806370a082311461017d576100ea565b806306fdde03146100ef578063095ea7b31461010d57806318160ddd1461012d575b600080fd5b6100f7610203565b604051610104919061094a565b60405180910390f35b61012061011b366004610902565b610295565b604051610104919061093f565b6101356102b2565b6040516101049190610b76565b6101206101503660046108c7565b6102b8565b61015d61033f565b6040516101049190610b7f565b610120610178366004610902565b610348565b61013561018b36600461087b565b610396565b6101986103b5565b005b6101a26103c9565b604051610104919061092b565b6100f76103d8565b6101206101c5366004610902565b6103e7565b6101206101d8366004610902565b61044f565b6101356101eb366004610895565b610463565b6101986101fe36600461087b565b61048e565b60606001805461021290610bfb565b80601f016020809104026020016040519081016040528092919081815260200182805461023e90610bfb565b801561028b5780601f106102605761010080835404028352916020019161028b565b820191906000526020600020905b81548152906001019060200180831161026e57829003601f168201915b5050505050905090565b60006102a96102a26104d1565b84846104d5565b50600192915050565b60045490565b60006102c5848484610589565b610335846102d16104d1565b61033085604051806060016040528060288152602001610c73602891396001600160a01b038a1660009081526006602052604081209061030f6104d1565b6001600160a01b031681526020810191909152604001600020549190610772565b6104d5565b5060019392505050565b60035460ff1690565b60006102a96103556104d1565b8461033085600660006103666104d1565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061079e565b6001600160a01b0381166000908152600560205260409020545b919050565b6103bd6107b1565b6103c760006107f0565b565b6000546001600160a01b031690565b60606002805461021290610bfb565b60006102a96103f46104d1565b8461033085604051806060016040528060258152602001610c9b602591396006600061041e6104d1565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610772565b60006102a961045c6104d1565b8484610589565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b6104966107b1565b6001600160a01b0381166104c55760405162461bcd60e51b81526004016104bc906109e0565b60405180910390fd5b6104ce816107f0565b50565b3390565b6001600160a01b0383166104fb5760405162461bcd60e51b81526004016104bc90610b32565b6001600160a01b0382166105215760405162461bcd60e51b81526004016104bc90610a26565b6001600160a01b0380841660008181526006602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061057c908590610b76565b60405180910390a3505050565b6001600160a01b0383166105af5760405162461bcd60e51b81526004016104bc90610aed565b6001600160a01b0382166105d55760405162461bcd60e51b81526004016104bc9061099d565b600081116105f55760405162461bcd60e51b81526004016104bc90610a68565b600061060d6064610607846002610840565b9061084c565b905069010f0cf064dd5920000081111561062e575069010f0cf064dd592000005b600061063a8383610858565b905061067983604051806060016040528060268152602001610c4d602691396001600160a01b0388166000908152600560205260409020549190610772565b6001600160a01b0380871660009081526005602052604080822093909355908616815220546106a8908261079e565b6001600160a01b0385166000908152600560205260409020556004546106ce9083610858565b600481905550836001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516107179190610b76565b60405180910390a360006001600160a01b0316856001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107639190610b76565b60405180910390a35050505050565b600081848411156107965760405162461bcd60e51b81526004016104bc919061094a565b505050900390565b60006107aa8284610b8d565b9392505050565b6107b96104d1565b6001600160a01b03166107ca6103c9565b6001600160a01b0316146103c75760405162461bcd60e51b81526004016104bc90610ab8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107aa8284610bc5565b60006107aa8284610ba5565b60006107aa8284610be4565b80356001600160a01b03811681146103b057600080fd5b60006020828403121561088c578081fd5b6107aa82610864565b600080604083850312156108a7578081fd5b6108b083610864565b91506108be60208401610864565b90509250929050565b6000806000606084860312156108db578081fd5b6108e484610864565b92506108f260208501610864565b9150604084013590509250925092565b60008060408385031215610914578182fd5b61091d83610864565b946020939093013593505050565b6001600160a01b0391909116815260200190565b901515815260200190565b6000602080835283518082850152825b818110156109765785810183015185820160400152820161095a565b818111156109875783604083870101525b50601f01601f1916929092016040019392505050565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526022908201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604082015261737360f01b606082015260800190565b60208082526030908201527f45524332303a207472616e7366657220616d6f756e74206d757374206265206760408201526f726561746572207468616e207a65726f60801b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526024908201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646040820152637265737360e01b606082015260800190565b90815260200190565b60ff91909116815260200190565b60008219821115610ba057610ba0610c36565b500190565b600082610bc057634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610bdf57610bdf610c36565b500290565b600082821015610bf657610bf6610c36565b500390565b600281046001821680610c0f57607f821691505b60208210811415610c3057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212204f2e71cfc02479edbc366567d711fd2dd50ce131639b43a37e0a28a13e91489a64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1B7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1F0 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x190 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1AF JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x155 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x17D JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x12D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0x203 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x94A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x120 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x93F JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2B2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x150 CALLDATASIZE PUSH1 0x4 PUSH2 0x8C7 JUMP JUMPDEST PUSH2 0x2B8 JUMP JUMPDEST PUSH2 0x15D PUSH2 0x33F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0xB7F JUMP JUMPDEST PUSH2 0x120 PUSH2 0x178 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x348 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x18B CALLDATASIZE PUSH1 0x4 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x396 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x3B5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A2 PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x92B JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x3D8 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x3E7 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x902 JUMP JUMPDEST PUSH2 0x44F JUMP JUMPDEST PUSH2 0x135 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x463 JUMP JUMPDEST PUSH2 0x198 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x212 SWAP1 PUSH2 0xBFB JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x23E SWAP1 PUSH2 0xBFB JUMP JUMPDEST DUP1 ISZERO PUSH2 0x28B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x260 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x28B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x26E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x2A2 PUSH2 0x4D1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x4D5 JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C5 DUP5 DUP5 DUP5 PUSH2 0x589 JUMP JUMPDEST PUSH2 0x335 DUP5 PUSH2 0x2D1 PUSH2 0x4D1 JUMP JUMPDEST PUSH2 0x330 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x28 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC73 PUSH1 0x28 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP1 PUSH2 0x30F PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x355 PUSH2 0x4D1 JUMP JUMPDEST DUP5 PUSH2 0x330 DUP6 PUSH1 0x6 PUSH1 0x0 PUSH2 0x366 PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x3BD PUSH2 0x7B1 JUMP JUMPDEST PUSH2 0x3C7 PUSH1 0x0 PUSH2 0x7F0 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x2 DUP1 SLOAD PUSH2 0x212 SWAP1 PUSH2 0xBFB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x3F4 PUSH2 0x4D1 JUMP JUMPDEST DUP5 PUSH2 0x330 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x25 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC9B PUSH1 0x25 SWAP2 CODECOPY PUSH1 0x6 PUSH1 0x0 PUSH2 0x41E PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP2 DUP3 ADD PUSH1 0x0 SWAP1 DUP2 KECCAK256 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A9 PUSH2 0x45C PUSH2 0x4D1 JUMP JUMPDEST DUP5 DUP5 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x496 PUSH2 0x7B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x4C5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x9E0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4CE DUP2 PUSH2 0x7F0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4FB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xB32 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x521 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xA26 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE MLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 PUSH2 0x57C SWAP1 DUP6 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xAED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5D5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0x99D JUMP JUMPDEST PUSH1 0x0 DUP2 GT PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xA68 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x60D PUSH1 0x64 PUSH2 0x607 DUP5 PUSH1 0x2 PUSH2 0x840 JUMP JUMPDEST SWAP1 PUSH2 0x84C JUMP JUMPDEST SWAP1 POP PUSH10 0x10F0CF064DD59200000 DUP2 GT ISZERO PUSH2 0x62E JUMPI POP PUSH10 0x10F0CF064DD59200000 JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP4 DUP4 PUSH2 0x858 JUMP JUMPDEST SWAP1 POP PUSH2 0x679 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC4D PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP2 SWAP1 PUSH2 0x772 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x6A8 SWAP1 DUP3 PUSH2 0x79E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x4 SLOAD PUSH2 0x6CE SWAP1 DUP4 PUSH2 0x858 JUMP JUMPDEST PUSH1 0x4 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x717 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x763 SWAP2 SWAP1 PUSH2 0xB76 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP5 DUP5 GT ISZERO PUSH2 0x796 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP2 SWAP1 PUSH2 0x94A JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xB8D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x7B9 PUSH2 0x4D1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x7CA PUSH2 0x3C9 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3C7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4BC SWAP1 PUSH2 0xAB8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBC5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7AA DUP3 DUP5 PUSH2 0xBE4 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x3B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x88C JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x7AA DUP3 PUSH2 0x864 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x8A7 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8B0 DUP4 PUSH2 0x864 JUMP JUMPDEST SWAP2 POP PUSH2 0x8BE PUSH1 0x20 DUP5 ADD PUSH2 0x864 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x8DB JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8E4 DUP5 PUSH2 0x864 JUMP JUMPDEST SWAP3 POP PUSH2 0x8F2 PUSH1 0x20 DUP6 ADD PUSH2 0x864 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x914 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x91D DUP4 PUSH2 0x864 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x976 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x95A JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x987 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x23 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x40 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x22 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x40 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x30 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E74206D7573742062652067 PUSH1 0x40 DUP3 ADD MSTORE PUSH16 0x726561746572207468616E207A65726F PUSH1 0x80 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x24 SWAP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x40 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xBA0 JUMPI PUSH2 0xBA0 PUSH2 0xC36 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xBDF JUMPI PUSH2 0xBDF PUSH2 0xC36 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0xBF6 JUMPI PUSH2 0xBF6 PUSH2 0xC36 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0xC0F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0xC30 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE KECCAK256 PUSH21 0x72616E7366657220616D6F756E7420657863656564 PUSH20 0x2062616C616E636545524332303A207472616E73 PUSH7 0x657220616D6F75 PUSH15 0x74206578636565647320616C6C6F77 PUSH2 0x6E63 PUSH6 0x45524332303A KECCAK256 PUSH5 0x6563726561 PUSH20 0x656420616C6C6F77616E63652062656C6F77207A PUSH6 0x726FA2646970 PUSH7 0x73582212204F2E PUSH18 0xCFC02479EDBC366567D711FD2DD50CE13163 SWAP12 NUMBER LOG3 PUSH31 0xA28A13E91489A64736F6C6343000800003300000000000000000000000000 ",
							"sourceMap": "358:3907:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1145:83;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1983:161;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1422:100::-;;;:::i;:::-;;;;;;;:::i;2152:313::-;;;;;;:::i;:::-;;:::i;1331:83::-;;;:::i;:::-;;;;;;;:::i;2473:210::-;;;;;;:::i;:::-;;:::i;1530:119::-;;;;;;:::i;:::-;;:::i;1831:101:0:-;;;:::i;:::-;;1201:85;;;:::i;:::-;;;;;;;:::i;1236:87:7:-;;;:::i;2691:261::-;;;;;;:::i;:::-;;:::i;1657:167::-;;;;;;:::i;:::-;;:::i;1832:143::-;;;;;;:::i;:::-;;:::i;2081:198:0:-;;;;;;:::i;:::-;;:::i;1145:83:7:-;1182:13;1215:5;1208:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1145:83;:::o;1983:161::-;2058:4;2075:39;2084:12;:10;:12::i;:::-;2098:7;2107:6;2075:8;:39::i;:::-;-1:-1:-1;2132:4:7;1983:161;;;;:::o;1422:100::-;1502:12;;1422:100;:::o;2152:313::-;2250:4;2267:36;2277:6;2285:9;2296:6;2267:9;:36::i;:::-;2314:121;2323:6;2331:12;:10;:12::i;:::-;2345:89;2383:6;2345:89;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2345:19:7;;;;;;:11;:19;;;;;;2365:12;:10;:12::i;:::-;-1:-1:-1;;;;;2345:33:7;;;;;;;;;;;;-1:-1:-1;2345:33:7;;;:89;:37;:89::i;:::-;2314:8;:121::i;:::-;-1:-1:-1;2453:4:7;2152:313;;;;;:::o;1331:83::-;1397:9;;;;1331:83;:::o;2473:210::-;2553:4;2570:83;2579:12;:10;:12::i;:::-;2593:7;2602:50;2641:10;2602:11;:25;2614:12;:10;:12::i;:::-;-1:-1:-1;;;;;2602:25:7;;;;;;;;;;;;;;;;;-1:-1:-1;2602:25:7;;;:34;;;;;;;;;;;:38;:50::i;1530:119::-;-1:-1:-1;;;;;1623:18:7;;1596:7;1623:18;;;:9;:18;;;;;;1530:119;;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;1201:85::-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;:::o;1236:87:7:-;1275:13;1308:7;1301:14;;;;;:::i;2691:261::-;2776:4;2793:129;2802:12;:10;:12::i;:::-;2816:7;2825:96;2864:15;2825:96;;;;;;;;;;;;;;;;;:11;:25;2837:12;:10;:12::i;:::-;-1:-1:-1;;;;;2825:25:7;;;;;;;;;;;;;;;;;-1:-1:-1;2825:25:7;;;:34;;;;;;;;;;;:96;:38;:96::i;1657:167::-;1735:4;1752:42;1762:12;:10;:12::i;:::-;1776:9;1787:6;1752:9;:42::i;1832:143::-;-1:-1:-1;;;;;1940:18:7;;;1913:7;1940:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;1832:143::o;2081:198:0:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;;-1:-1:-1::0;;;2161:73:0::1;;;;;;;:::i;:::-;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;640:96:5:-;719:10;640:96;:::o;3924:338:7:-;-1:-1:-1;;;;;4018:19:7;;4010:68;;;;-1:-1:-1;;;4010:68:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;4097:21:7;;4089:68;;;;-1:-1:-1;;;4089:68:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;4170:18:7;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;;:36;;;4222:32;;;;;4200:6;;4222:32;:::i;:::-;;;;;;;;3924:338;;;:::o;2960:956::-;-1:-1:-1;;;;;3058:20:7;;3050:70;;;;-1:-1:-1;;;3050:70:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;3139:23:7;;3131:71;;;;-1:-1:-1;;;3131:71:7;;;;;;;:::i;:::-;3230:1;3221:6;:10;3213:71;;;;-1:-1:-1;;;3213:71:7;;;;;;;:::i;:::-;3297:18;3318:30;3344:3;3318:21;:6;854:1;3318:10;:21::i;:::-;:25;;:30::i;:::-;3297:51;;941:13;3388:10;:27;3384:87;;;-1:-1:-1;941:13:7;3384:87;3483:22;3508;:6;3519:10;3508;:22::i;:::-;3483:47;;3592:71;3614:6;3592:71;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3592:17:7;;;;;;:9;:17;;;;;;;:71;:21;:71::i;:::-;-1:-1:-1;;;;;3572:17:7;;;;;;;:9;:17;;;;;;:91;;;;3697:20;;;;;;;:40;;3722:14;3697:24;:40::i;:::-;-1:-1:-1;;;;;3674:20:7;;;;;;:9;:20;;;;;:63;3763:12;;:28;;3780:10;3763:16;:28::i;:::-;3748:12;:43;;;;3826:9;-1:-1:-1;;;;;3809:43:7;3818:6;-1:-1:-1;;;;;3809:43:7;;3837:14;3809:43;;;;;;:::i;:::-;;;;;;;;3893:1;-1:-1:-1;;;;;3868:40:7;3877:6;-1:-1:-1;;;;;3868:40:7;;3897:10;3868:40;;;;;;:::i;:::-;;;;;;;;2960:956;;;;;:::o;4959:231:6:-;5075:7;5134:12;5126:6;;;;5118:29;;;;-1:-1:-1;;;5118:29:6;;;;;;;;:::i;:::-;-1:-1:-1;;;5168:5:6;;;4959:231::o;2755:96::-;2813:7;2839:5;2843:1;2839;:5;:::i;:::-;2832:12;2755:96;-1:-1:-1;;;2755:96:6:o;1359:130:0:-;1433:12;:10;:12::i;:::-;-1:-1:-1;;;;;1422:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1422:23:0;;1414:68;;;;-1:-1:-1;;;1414:68:0;;;;;;;:::i;2433:187::-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2433:187;;:::o;3465:96:6:-;3523:7;3549:5;3553:1;3549;:5;:::i;3850:96::-;3908:7;3934:5;3938:1;3934;:5;:::i;3122:96::-;3180:7;3206:5;3210:1;3206;:5;:::i;14:175:8:-;84:20;;-1:-1:-1;;;;;133:31:8;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:274::-;;;526:2;514:9;505:7;501:23;497:32;494:2;;;547:6;539;532:22;494:2;575:31;596:9;575:31;:::i;:::-;565:41;;625:40;661:2;650:9;646:18;625:40;:::i;:::-;615:50;;484:187;;;;;:::o;676:342::-;;;;822:2;810:9;801:7;797:23;793:32;790:2;;;843:6;835;828:22;790:2;871:31;892:9;871:31;:::i;:::-;861:41;;921:40;957:2;946:9;942:18;921:40;:::i;:::-;911:50;;1008:2;997:9;993:18;980:32;970:42;;780:238;;;;;:::o;1023:266::-;;;1152:2;1140:9;1131:7;1127:23;1123:32;1120:2;;;1173:6;1165;1158:22;1120:2;1201:31;1222:9;1201:31;:::i;:::-;1191:41;1279:2;1264:18;;;;1251:32;;-1:-1:-1;;;1110:179:8:o;1294:203::-;-1:-1:-1;;;;;1458:32:8;;;;1440:51;;1428:2;1413:18;;1395:102::o;1502:187::-;1667:14;;1660:22;1642:41;;1630:2;1615:18;;1597:92::o;1694:603::-;;1835:2;1864;1853:9;1846:21;1896:6;1890:13;1939:6;1934:2;1923:9;1919:18;1912:34;1964:4;1977:140;1991:6;1988:1;1985:13;1977:140;;;2086:14;;;2082:23;;2076:30;2052:17;;;2071:2;2048:26;2041:66;2006:10;;1977:140;;;2135:6;2132:1;2129:13;2126:2;;;2205:4;2200:2;2191:6;2180:9;2176:22;2172:31;2165:45;2126:2;-1:-1:-1;2281:2:8;2260:15;-1:-1:-1;;2256:29:8;2241:45;;;;2288:2;2237:54;;1815:482;-1:-1:-1;;;1815:482:8:o;2302:399::-;2504:2;2486:21;;;2543:2;2523:18;;;2516:30;2582:34;2577:2;2562:18;;2555:62;-1:-1:-1;;;2648:2:8;2633:18;;2626:33;2691:3;2676:19;;2476:225::o;2706:402::-;2908:2;2890:21;;;2947:2;2927:18;;;2920:30;2986:34;2981:2;2966:18;;2959:62;-1:-1:-1;;;3052:2:8;3037:18;;3030:36;3098:3;3083:19;;2880:228::o;3113:398::-;3315:2;3297:21;;;3354:2;3334:18;;;3327:30;3393:34;3388:2;3373:18;;3366:62;-1:-1:-1;;;3459:2:8;3444:18;;3437:32;3501:3;3486:19;;3287:224::o;3516:412::-;3718:2;3700:21;;;3757:2;3737:18;;;3730:30;3796:34;3791:2;3776:18;;3769:62;-1:-1:-1;;;3862:2:8;3847:18;;3840:46;3918:3;3903:19;;3690:238::o;3933:356::-;4135:2;4117:21;;;4154:18;;;4147:30;4213:34;4208:2;4193:18;;4186:62;4280:2;4265:18;;4107:182::o;4294:401::-;4496:2;4478:21;;;4535:2;4515:18;;;4508:30;4574:34;4569:2;4554:18;;4547:62;-1:-1:-1;;;4640:2:8;4625:18;;4618:35;4685:3;4670:19;;4468:227::o;4700:400::-;4902:2;4884:21;;;4941:2;4921:18;;;4914:30;4980:34;4975:2;4960:18;;4953:62;-1:-1:-1;;;5046:2:8;5031:18;;5024:34;5090:3;5075:19;;4874:226::o;5105:177::-;5251:25;;;5239:2;5224:18;;5206:76::o;5287:184::-;5459:4;5447:17;;;;5429:36;;5417:2;5402:18;;5384:87::o;5476:128::-;;5547:1;5543:6;5540:1;5537:13;5534:2;;;5553:18;;:::i;:::-;-1:-1:-1;5589:9:8;;5524:80::o;5609:217::-;;5675:1;5665:2;;-1:-1:-1;;;5700:31:8;;5754:4;5751:1;5744:15;5782:4;5707:1;5772:15;5665:2;-1:-1:-1;5811:9:8;;5655:171::o;5831:168::-;;5937:1;5933;5929:6;5925:14;5922:1;5919:21;5914:1;5907:9;5900:17;5896:45;5893:2;;;5944:18;;:::i;:::-;-1:-1:-1;5984:9:8;;5883:116::o;6004:125::-;;6072:1;6069;6066:8;6063:2;;;6077:18;;:::i;:::-;-1:-1:-1;6114:9:8;;6053:76::o;6134:380::-;6219:1;6209:12;;6266:1;6256:12;;;6277:2;;6331:4;6323:6;6319:17;6309:27;;6277:2;6384;6376:6;6373:14;6353:18;6350:38;6347:2;;;6430:10;6425:3;6421:20;6418:1;6411:31;6465:4;6462:1;6455:15;6493:4;6490:1;6483:15;6347:2;;6189:325;;;:::o;6519:127::-;6580:10;6575:3;6571:20;6568:1;6561:31;6611:4;6608:1;6601:15;6635:4;6632:1;6625:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "663400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "22629",
								"balanceOf(address)": "infinite",
								"decimals()": "1091",
								"decreaseAllowance(address,uint256)": "infinite",
								"increaseAllowance(address,uint256)": "infinite",
								"name()": "infinite",
								"owner()": "1115",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "1096",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "23811"
							},
							"internal": {
								"_approve(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "C0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "52657665727365204372616D657220546F6B656E000000000000000000000000"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "A0"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 446,
									"end": 491,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 446,
									"end": 491,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH",
									"source": 7,
									"value": "9"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2922AB21A920A6A2A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "B9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 498,
									"end": 534,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "tag",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 498,
									"end": 534,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 541,
									"end": 569,
									"name": "PUSH",
									"source": 7,
									"value": "3"
								},
								{
									"begin": 541,
									"end": 569,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 541,
									"end": 569,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 541,
									"end": 569,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 567,
									"end": 569,
									"name": "PUSH",
									"source": 7,
									"value": "12"
								},
								{
									"begin": 541,
									"end": 569,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 541,
									"end": 569,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 541,
									"end": 569,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 609,
									"end": 625,
									"name": "PUSH",
									"source": 7,
									"value": "D3C21BCECCEDA1000000"
								},
								{
									"begin": 578,
									"end": 625,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 578,
									"end": 625,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "tag",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1002,
									"end": 1137,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 936,
									"end": 968,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 965,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "10"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "tag",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 955,
									"end": 967,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 936,
									"end": 954,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "tag",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 936,
									"end": 968,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1053,
									"end": 1065,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1053,
									"end": 1065,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1036,
									"name": "PUSH",
									"source": 7,
									"value": "5"
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 1037,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 1037,
									"end": 1047,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 1037,
									"end": 1049,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1037,
									"end": 1049,
									"name": "tag",
									"source": 7,
									"value": "13"
								},
								{
									"begin": 1037,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 1027,
									"end": 1050,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 1027,
									"end": 1065,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 1102,
									"end": 1114,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 1102,
									"end": 1112,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "10"
								},
								{
									"begin": 1102,
									"end": 1114,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1102,
									"end": 1114,
									"name": "tag",
									"source": 7,
									"value": "14"
								},
								{
									"begin": 1102,
									"end": 1114,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1098,
									"end": 1099,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "PUSH",
									"source": 7,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 1116,
									"end": 1128,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 1116,
									"end": 1128,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "15"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "16"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "tag",
									"source": 7,
									"value": "15"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "SUB",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 1081,
									"end": 1129,
									"name": "LOG3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "31"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 640,
									"end": 736,
									"name": "tag",
									"source": 5,
									"value": "10"
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 719,
									"end": 729,
									"name": "CALLER",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 640,
									"end": 736,
									"name": "JUMP",
									"source": 5,
									"value": "[out]"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "tag",
									"source": 0,
									"value": "11"
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "DUP5",
									"source": 0
								},
								{
									"begin": 2541,
									"end": 2558,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 2525,
									"end": 2531,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 2506,
									"end": 2522,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2573,
									"end": 2613,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2433,
									"end": 2620,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "2"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SLOAD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "21"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "KECCAK256",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DIV",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "26"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "23"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "1F"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "LT",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "FF"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "NOT",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "AND",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP4",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "OR",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "26"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP6",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "26"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "25"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "GT",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "26"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "25"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "26"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "27"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "28"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7,
									"value": "[in]"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "27"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7,
									"value": "[out]"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "28"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "tag",
									"source": 7,
									"value": "29"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "GT",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "27"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "SSTORE",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "29"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 14,
									"end": 191,
									"name": "tag",
									"source": 8,
									"value": "16"
								},
								{
									"begin": 14,
									"end": 191,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 160,
									"end": 185,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 160,
									"end": 185,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 160,
									"end": 185,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 148,
									"end": 150,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 133,
									"end": 151,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 133,
									"end": 151,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 115,
									"end": 191,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 196,
									"end": 576,
									"name": "tag",
									"source": 8,
									"value": "21"
								},
								{
									"begin": 196,
									"end": 576,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 281,
									"end": 282,
									"name": "PUSH",
									"source": 8,
									"value": "2"
								},
								{
									"begin": 271,
									"end": 283,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 271,
									"end": 283,
									"name": "DIV",
									"source": 8
								},
								{
									"begin": 328,
									"end": 329,
									"name": "PUSH",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 318,
									"end": 330,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 318,
									"end": 330,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 318,
									"end": 330,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 339,
									"end": 341,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 339,
									"end": 341,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 393,
									"end": 397,
									"name": "PUSH",
									"source": 8,
									"value": "7F"
								},
								{
									"begin": 385,
									"end": 391,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 381,
									"end": 398,
									"name": "AND",
									"source": 8
								},
								{
									"begin": 371,
									"end": 398,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 371,
									"end": 398,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 339,
									"end": 341,
									"name": "tag",
									"source": 8,
									"value": "34"
								},
								{
									"begin": 339,
									"end": 341,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 446,
									"end": 448,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 438,
									"end": 444,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 435,
									"end": 449,
									"name": "LT",
									"source": 8
								},
								{
									"begin": 415,
									"end": 433,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 412,
									"end": 450,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 409,
									"end": 411,
									"name": "ISZERO",
									"source": 8
								},
								{
									"begin": 409,
									"end": 411,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 409,
									"end": 411,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 492,
									"end": 502,
									"name": "PUSH",
									"source": 8,
									"value": "4E487B71"
								},
								{
									"begin": 487,
									"end": 490,
									"name": "PUSH",
									"source": 8,
									"value": "E0"
								},
								{
									"begin": 483,
									"end": 503,
									"name": "SHL",
									"source": 8
								},
								{
									"begin": 480,
									"end": 481,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 473,
									"end": 504,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 527,
									"end": 531,
									"name": "PUSH",
									"source": 8,
									"value": "22"
								},
								{
									"begin": 524,
									"end": 525,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 517,
									"end": 532,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 555,
									"end": 559,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 552,
									"end": 553,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 545,
									"end": 560,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 409,
									"end": 411,
									"name": "tag",
									"source": 8,
									"value": "35"
								},
								{
									"begin": 409,
									"end": 411,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 409,
									"end": 411,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 251,
									"end": 576,
									"name": "SWAP2",
									"source": 8
								},
								{
									"begin": 251,
									"end": 576,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 251,
									"end": 576,
									"name": "POP",
									"source": 8
								},
								{
									"begin": 251,
									"end": 576,
									"name": "JUMP",
									"source": 8,
									"value": "[out]"
								},
								{
									"begin": 251,
									"end": 576,
									"name": "tag",
									"source": 8,
									"value": "31"
								},
								{
									"begin": 251,
									"end": 576,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 358,
									"end": 4265,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204f2e71cfc02479edbc366567d711fd2dd50ce131639b43a37e0a28a13e91489a64736f6c63430008000033",
									".code": [
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 358,
											"end": 4265,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "tag",
											"source": 7,
											"value": "39"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "tag",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1182,
											"end": 1195,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1215,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "tag",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "tag",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "tag",
											"source": 7,
											"value": "81"
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1208,
											"end": 1220,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1145,
											"end": 1228,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2058,
											"end": 2062,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2075,
											"end": 2114,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 2084,
											"end": 2096,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 2084,
											"end": 2094,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2084,
											"end": 2096,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2084,
											"end": 2096,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 2084,
											"end": 2096,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2098,
											"end": 2105,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2113,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2075,
											"end": 2083,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 2075,
											"end": 2114,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2075,
											"end": 2114,
											"name": "tag",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 2075,
											"end": 2114,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2132,
											"end": 2136,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1983,
											"end": 2144,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "tag",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1502,
											"end": 1514,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1502,
											"end": 1514,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1422,
											"end": 1522,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "tag",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2250,
											"end": 2254,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2267,
											"end": 2303,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2277,
											"end": 2283,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2285,
											"end": 2294,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2296,
											"end": 2302,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2267,
											"end": 2276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2267,
											"end": 2303,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2267,
											"end": 2303,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2267,
											"end": 2303,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2314,
											"end": 2435,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 2323,
											"end": 2329,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2331,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 2331,
											"end": 2341,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2331,
											"end": 2343,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2331,
											"end": 2343,
											"name": "tag",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 2331,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2383,
											"end": 2389,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH data",
											"source": 7,
											"value": "974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "PUSH",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2356,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2364,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2365,
											"end": 2377,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 2365,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2365,
											"end": 2377,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2365,
											"end": 2377,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 2365,
											"end": 2377,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2378,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2345,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2345,
											"end": 2434,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 2314,
											"end": 2435,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2314,
											"end": 2435,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 2314,
											"end": 2435,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2453,
											"end": 2457,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2152,
											"end": 2465,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1397,
											"end": 1406,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1397,
											"end": 1406,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1397,
											"end": 1406,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1397,
											"end": 1406,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1331,
											"end": 1414,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2473,
											"end": 2683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2553,
											"end": 2557,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2570,
											"end": 2653,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2579,
											"end": 2589,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2579,
											"end": 2591,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2593,
											"end": 2600,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2652,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2641,
											"end": 2651,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2613,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2614,
											"end": 2626,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 2614,
											"end": 2624,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2614,
											"end": 2626,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2614,
											"end": 2626,
											"name": "tag",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 2614,
											"end": 2626,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2627,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2636,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2602,
											"end": 2640,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 2602,
											"end": 2652,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "tag",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1596,
											"end": 1603,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1632,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1623,
											"end": 1641,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "tag",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1530,
											"end": 1649,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1922,
											"end": 1923,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1895,
											"end": 1913,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "tag",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1895,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1831,
											"end": 1932,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "tag",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1247,
											"end": 1254,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1273,
											"end": 1279,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1201,
											"end": 1286,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 1236,
											"end": 1323,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1275,
											"end": 1288,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1308,
											"end": 1315,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 1301,
											"end": 1315,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2691,
											"end": 2952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2776,
											"end": 2780,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2793,
											"end": 2922,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 2802,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 2802,
											"end": 2812,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2802,
											"end": 2814,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2802,
											"end": 2814,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 2802,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2816,
											"end": 2823,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2864,
											"end": 2879,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH data",
											"source": 7,
											"value": "F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "PUSH",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2836,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2837,
											"end": 2849,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 2837,
											"end": 2847,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2837,
											"end": 2849,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2837,
											"end": 2849,
											"name": "tag",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 2837,
											"end": 2849,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2850,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "DUP14",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2859,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2825,
											"end": 2863,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 2825,
											"end": 2921,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "tag",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1657,
											"end": 1824,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1735,
											"end": 1739,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1752,
											"end": 1794,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1762,
											"end": 1774,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 1762,
											"end": 1772,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 1762,
											"end": 1774,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1762,
											"end": 1774,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 1762,
											"end": 1774,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1776,
											"end": 1785,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1787,
											"end": 1793,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1752,
											"end": 1761,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 1752,
											"end": 1794,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1913,
											"end": 1920,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1951,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1958,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1940,
											"end": 1967,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1832,
											"end": 1975,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1094,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1094,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2169,
											"end": 2191,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "133"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "tag",
											"source": 0,
											"value": "131"
										},
										{
											"begin": 2161,
											"end": 2234,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2263,
											"end": 2271,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2244,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 2244,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2081,
											"end": 2279,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "tag",
											"source": 5,
											"value": "87"
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 640,
											"end": 736,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4018,
											"end": 4037,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4018,
											"end": 4037,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "139"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "tag",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 4010,
											"end": 4078,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4097,
											"end": 4118,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4097,
											"end": 4118,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "142"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "tag",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 4089,
											"end": 4157,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4181,
											"name": "PUSH",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4188,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4197,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4206,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4206,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4170,
											"end": 4206,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "PUSH",
											"source": 7,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4200,
											"end": 4206,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4200,
											"end": 4206,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4222,
											"end": 4254,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3924,
											"end": 4262,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3058,
											"end": 3078,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "147"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "tag",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 3050,
											"end": 3120,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3139,
											"end": 3162,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3139,
											"end": 3162,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 3131,
											"end": 3202,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3230,
											"end": 3231,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3221,
											"end": 3227,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3221,
											"end": 3231,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 3213,
											"end": 3284,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3297,
											"end": 3315,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3318,
											"end": 3348,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 3344,
											"end": 3347,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 3318,
											"end": 3339,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 3318,
											"end": 3324,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 854,
											"end": 855,
											"name": "PUSH",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 3318,
											"end": 3328,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 3318,
											"end": 3339,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3318,
											"end": 3339,
											"name": "tag",
											"source": 7,
											"value": "155"
										},
										{
											"begin": 3318,
											"end": 3339,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3318,
											"end": 3343,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3318,
											"end": 3343,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 3318,
											"end": 3348,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3318,
											"end": 3348,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 3318,
											"end": 3348,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3297,
											"end": 3348,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3297,
											"end": 3348,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 941,
											"end": 954,
											"name": "PUSH",
											"source": 7,
											"value": "10F0CF064DD59200000"
										},
										{
											"begin": 3388,
											"end": 3398,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3388,
											"end": 3415,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3384,
											"end": 3471,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3384,
											"end": 3471,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 3384,
											"end": 3471,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 941,
											"end": 954,
											"name": "PUSH",
											"source": 7,
											"value": "10F0CF064DD59200000"
										},
										{
											"begin": 3384,
											"end": 3471,
											"name": "tag",
											"source": 7,
											"value": "158"
										},
										{
											"begin": 3384,
											"end": 3471,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3483,
											"end": 3505,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3508,
											"end": 3530,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 3508,
											"end": 3514,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3519,
											"end": 3529,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3508,
											"end": 3518,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 3508,
											"end": 3530,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3508,
											"end": 3530,
											"name": "tag",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 3508,
											"end": 3530,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3483,
											"end": 3530,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3483,
											"end": 3530,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 3614,
											"end": 3620,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH data",
											"source": 7,
											"value": "4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "PUSH",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "CODECOPY",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3601,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3609,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3592,
											"end": 3613,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "tag",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 3592,
											"end": 3663,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3581,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3589,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3663,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3663,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3663,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 3572,
											"end": 3663,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3717,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3737,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 3697,
											"end": 3737,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3722,
											"end": 3736,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 3697,
											"end": 3737,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3697,
											"end": 3737,
											"name": "tag",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 3697,
											"end": 3737,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3683,
											"name": "PUSH",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3694,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3674,
											"end": 3737,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3763,
											"end": 3775,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3763,
											"end": 3775,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3763,
											"end": 3791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3763,
											"end": 3791,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3780,
											"end": 3790,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3763,
											"end": 3779,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 3763,
											"end": 3791,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3763,
											"end": 3791,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3763,
											"end": 3791,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3748,
											"end": 3760,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3748,
											"end": 3791,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3748,
											"end": 3791,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3748,
											"end": 3791,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3748,
											"end": 3791,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 3826,
											"end": 3835,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3818,
											"end": 3824,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 3837,
											"end": 3851,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3809,
											"end": 3852,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 3893,
											"end": 3894,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3877,
											"end": 3883,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "PUSH",
											"source": 7,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 3897,
											"end": 3907,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "tag",
											"source": 7,
											"value": "165"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3868,
											"end": 3908,
											"name": "LOG3",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2960,
											"end": 3916,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4959,
											"end": 5190,
											"name": "tag",
											"source": 6,
											"value": "97"
										},
										{
											"begin": 4959,
											"end": 5190,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 5075,
											"end": 5082,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 5134,
											"end": 5146,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5126,
											"end": 5132,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5126,
											"end": 5132,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 5126,
											"end": 5132,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 5126,
											"end": 5132,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "132"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "23"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 5118,
											"end": 5147,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5168,
											"end": 5173,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 5168,
											"end": 5173,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 5168,
											"end": 5173,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 4959,
											"end": 5190,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "tag",
											"source": 6,
											"value": "104"
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2813,
											"end": 2820,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2843,
											"end": 2844,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "171"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "tag",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2839,
											"end": 2844,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2832,
											"end": 2844,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2755,
											"end": 2851,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 1359,
											"end": 1489,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1433,
											"end": 1443,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1433,
											"end": 1445,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1422,
											"end": 1427,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "55"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "tag",
											"source": 0,
											"value": "174"
										},
										{
											"begin": 1422,
											"end": 1429,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1422,
											"end": 1445,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "110"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "132"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 1414,
											"end": 1482,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2541,
											"end": 2558,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2525,
											"end": 2531,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2506,
											"end": 2522,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2573,
											"end": 2613,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2433,
											"end": 2620,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "tag",
											"source": 6,
											"value": "156"
										},
										{
											"begin": 3465,
											"end": 3561,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3523,
											"end": 3530,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 3553,
											"end": 3554,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3550,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "181"
										},
										{
											"begin": 3549,
											"end": 3554,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3850,
											"end": 3946,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 3850,
											"end": 3946,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3908,
											"end": 3915,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3934,
											"end": 3939,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 3938,
											"end": 3939,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3934,
											"end": 3935,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3934,
											"end": 3939,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "184"
										},
										{
											"begin": 3934,
											"end": 3939,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "tag",
											"source": 6,
											"value": "160"
										},
										{
											"begin": 3122,
											"end": 3218,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3180,
											"end": 3187,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 3210,
											"end": 3211,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3206,
											"end": 3207,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "187"
										},
										{
											"begin": 3206,
											"end": 3211,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "105"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 8,
											"value": "49"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "tag",
											"source": 8,
											"value": "71"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 397,
											"end": 671,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 671,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 526,
											"end": 528,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 514,
											"end": 523,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 505,
											"end": 512,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 501,
											"end": 524,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 497,
											"end": 529,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 547,
											"end": 553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 539,
											"end": 545,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 532,
											"end": 554,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 494,
											"end": 496,
											"name": "tag",
											"source": 8,
											"value": "196"
										},
										{
											"begin": 494,
											"end": 496,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 596,
											"end": 605,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 575,
											"end": 606,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "tag",
											"source": 8,
											"value": "197"
										},
										{
											"begin": 575,
											"end": 606,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 565,
											"end": 606,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 565,
											"end": 606,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 661,
											"end": 663,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 646,
											"end": 664,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 625,
											"end": 665,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "tag",
											"source": 8,
											"value": "198"
										},
										{
											"begin": 625,
											"end": 665,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 615,
											"end": 665,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 615,
											"end": 665,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 484,
											"end": 671,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "tag",
											"source": 8,
											"value": "36"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 676,
											"end": 1018,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 824,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 810,
											"end": 819,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 801,
											"end": 808,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 797,
											"end": 820,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 793,
											"end": 825,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 843,
											"end": 849,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 835,
											"end": 841,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 828,
											"end": 850,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 790,
											"end": 792,
											"name": "tag",
											"source": 8,
											"value": "200"
										},
										{
											"begin": 790,
											"end": 792,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 892,
											"end": 901,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 871,
											"end": 902,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 871,
											"end": 902,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 861,
											"end": 902,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 861,
											"end": 902,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 957,
											"end": 959,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 946,
											"end": 955,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 942,
											"end": 960,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 921,
											"end": 961,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 921,
											"end": 961,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 911,
											"end": 961,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 911,
											"end": 961,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1008,
											"end": 1010,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1006,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 993,
											"end": 1011,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 980,
											"end": 1012,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 970,
											"end": 1012,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 780,
											"end": 1018,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1023,
											"end": 1289,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1152,
											"end": 1154,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1140,
											"end": 1149,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1131,
											"end": 1138,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1127,
											"end": 1150,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1123,
											"end": 1155,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1173,
											"end": 1179,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1165,
											"end": 1171,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1158,
											"end": 1180,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 1120,
											"end": 1122,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 1222,
											"end": 1231,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "tag",
											"source": 8,
											"value": "205"
										},
										{
											"begin": 1201,
											"end": 1232,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1191,
											"end": 1232,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1279,
											"end": 1281,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1264,
											"end": 1282,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1251,
											"end": 1283,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1289,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1294,
											"end": 1497,
											"name": "tag",
											"source": 8,
											"value": "57"
										},
										{
											"begin": 1294,
											"end": 1497,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1458,
											"end": 1490,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1490,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1490,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1490,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1440,
											"end": 1491,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1440,
											"end": 1491,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1428,
											"end": 1430,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1413,
											"end": 1431,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1413,
											"end": 1431,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1395,
											"end": 1497,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1502,
											"end": 1689,
											"name": "tag",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 1502,
											"end": 1689,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1667,
											"end": 1681,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1667,
											"end": 1681,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1682,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1642,
											"end": 1683,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1642,
											"end": 1683,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1630,
											"end": 1632,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1615,
											"end": 1633,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1615,
											"end": 1633,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1597,
											"end": 1689,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1694,
											"end": 2297,
											"name": "tag",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 1694,
											"end": 2297,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1694,
											"end": 2297,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1835,
											"end": 1837,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1864,
											"end": 1866,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1853,
											"end": 1862,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1846,
											"end": 1867,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1896,
											"end": 1902,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1903,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1939,
											"end": 1945,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1934,
											"end": 1936,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1923,
											"end": 1932,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1919,
											"end": 1937,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1912,
											"end": 1946,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1964,
											"end": 1968,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "tag",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1991,
											"end": 1997,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1988,
											"end": 1989,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1985,
											"end": 1998,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2086,
											"end": 2100,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2086,
											"end": 2100,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2086,
											"end": 2100,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2082,
											"end": 2105,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2082,
											"end": 2105,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2076,
											"end": 2106,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2052,
											"end": 2069,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2052,
											"end": 2069,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2052,
											"end": 2069,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2071,
											"end": 2073,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2048,
											"end": 2074,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2041,
											"end": 2107,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2006,
											"end": 2016,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2006,
											"end": 2016,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "209"
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 1977,
											"end": 2117,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2135,
											"end": 2141,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2132,
											"end": 2133,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2129,
											"end": 2142,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2128,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 2126,
											"end": 2128,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2205,
											"end": 2209,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2200,
											"end": 2202,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2191,
											"end": 2197,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2180,
											"end": 2189,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2176,
											"end": 2198,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2172,
											"end": 2203,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2165,
											"end": 2210,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2126,
											"end": 2128,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 2126,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2281,
											"end": 2283,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 2260,
											"end": 2275,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2256,
											"end": 2285,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2241,
											"end": 2286,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2241,
											"end": 2286,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2241,
											"end": 2286,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2241,
											"end": 2286,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2288,
											"end": 2290,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2237,
											"end": 2291,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2291,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1815,
											"end": 2297,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1815,
											"end": 2297,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2302,
											"end": 2701,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 2302,
											"end": 2701,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2504,
											"end": 2506,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2486,
											"end": 2507,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2486,
											"end": 2507,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2486,
											"end": 2507,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2543,
											"end": 2545,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 2523,
											"end": 2541,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2523,
											"end": 2541,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2523,
											"end": 2541,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2516,
											"end": 2546,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2582,
											"end": 2616,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 2577,
											"end": 2579,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2562,
											"end": 2580,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2562,
											"end": 2580,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2555,
											"end": 2617,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2648,
											"end": 2650,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2633,
											"end": 2651,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2633,
											"end": 2651,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2626,
											"end": 2659,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2691,
											"end": 2694,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 2676,
											"end": 2695,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2676,
											"end": 2695,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2476,
											"end": 2701,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2706,
											"end": 3108,
											"name": "tag",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 2706,
											"end": 3108,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2908,
											"end": 2910,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2890,
											"end": 2911,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2890,
											"end": 2911,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2890,
											"end": 2911,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2947,
											"end": 2949,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2927,
											"end": 2945,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2920,
											"end": 2950,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2986,
											"end": 3020,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 2981,
											"end": 2983,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2966,
											"end": 2984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2966,
											"end": 2984,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2959,
											"end": 3021,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3052,
											"end": 3054,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3037,
											"end": 3055,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3037,
											"end": 3055,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3030,
											"end": 3066,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3098,
											"end": 3101,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3083,
											"end": 3102,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3083,
											"end": 3102,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2880,
											"end": 3108,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3113,
											"end": 3511,
											"name": "tag",
											"source": 8,
											"value": "142"
										},
										{
											"begin": 3113,
											"end": 3511,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3315,
											"end": 3317,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3297,
											"end": 3318,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3297,
											"end": 3318,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3354,
											"end": 3356,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 3334,
											"end": 3352,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3352,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3334,
											"end": 3352,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3327,
											"end": 3357,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3393,
											"end": 3427,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 3388,
											"end": 3390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3373,
											"end": 3391,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3373,
											"end": 3391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3366,
											"end": 3428,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3459,
											"end": 3461,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3444,
											"end": 3462,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3444,
											"end": 3462,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3437,
											"end": 3469,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3501,
											"end": 3504,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3486,
											"end": 3505,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3486,
											"end": 3505,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3287,
											"end": 3511,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3516,
											"end": 3928,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 3516,
											"end": 3928,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3718,
											"end": 3720,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3700,
											"end": 3721,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3721,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3721,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3757,
											"end": 3759,
											"name": "PUSH",
											"source": 8,
											"value": "30"
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3737,
											"end": 3755,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3730,
											"end": 3760,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3796,
											"end": 3830,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E74206D7573742062652067"
										},
										{
											"begin": 3791,
											"end": 3793,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3776,
											"end": 3794,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3776,
											"end": 3794,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3769,
											"end": 3831,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "726561746572207468616E207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3862,
											"end": 3864,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3847,
											"end": 3865,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3847,
											"end": 3865,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3840,
											"end": 3886,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3918,
											"end": 3921,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 3903,
											"end": 3922,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3903,
											"end": 3922,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3690,
											"end": 3928,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3933,
											"end": 4289,
											"name": "tag",
											"source": 8,
											"value": "177"
										},
										{
											"begin": 3933,
											"end": 4289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4135,
											"end": 4137,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4117,
											"end": 4138,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4117,
											"end": 4138,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4117,
											"end": 4138,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4154,
											"end": 4172,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4154,
											"end": 4172,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4154,
											"end": 4172,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4147,
											"end": 4177,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4213,
											"end": 4247,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 4208,
											"end": 4210,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4193,
											"end": 4211,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4193,
											"end": 4211,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4186,
											"end": 4248,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4280,
											"end": 4282,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4265,
											"end": 4283,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4265,
											"end": 4283,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4107,
											"end": 4289,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4294,
											"end": 4695,
											"name": "tag",
											"source": 8,
											"value": "147"
										},
										{
											"begin": 4294,
											"end": 4695,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4496,
											"end": 4498,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4478,
											"end": 4499,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4499,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4478,
											"end": 4499,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4535,
											"end": 4537,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4515,
											"end": 4533,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4515,
											"end": 4533,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4515,
											"end": 4533,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4508,
											"end": 4538,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4574,
											"end": 4608,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4569,
											"end": 4571,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4554,
											"end": 4572,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4547,
											"end": 4609,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4640,
											"end": 4642,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4625,
											"end": 4643,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4625,
											"end": 4643,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4618,
											"end": 4653,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4685,
											"end": 4688,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4670,
											"end": 4689,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4670,
											"end": 4689,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4468,
											"end": 4695,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4700,
											"end": 5100,
											"name": "tag",
											"source": 8,
											"value": "139"
										},
										{
											"begin": 4700,
											"end": 5100,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4902,
											"end": 4904,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4884,
											"end": 4905,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4884,
											"end": 4905,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4884,
											"end": 4905,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4941,
											"end": 4943,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4921,
											"end": 4939,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4921,
											"end": 4939,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4921,
											"end": 4939,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4914,
											"end": 4944,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4980,
											"end": 5014,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 4975,
											"end": 4977,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4960,
											"end": 4978,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4960,
											"end": 4978,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4953,
											"end": 5015,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5046,
											"end": 5048,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5031,
											"end": 5049,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5031,
											"end": 5049,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5024,
											"end": 5058,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5090,
											"end": 5093,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 5075,
											"end": 5094,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5075,
											"end": 5094,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4874,
											"end": 5100,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5105,
											"end": 5282,
											"name": "tag",
											"source": 8,
											"value": "33"
										},
										{
											"begin": 5105,
											"end": 5282,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5251,
											"end": 5276,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5251,
											"end": 5276,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5251,
											"end": 5276,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5224,
											"end": 5242,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5224,
											"end": 5242,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5206,
											"end": 5282,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5287,
											"end": 5471,
											"name": "tag",
											"source": 8,
											"value": "42"
										},
										{
											"begin": 5287,
											"end": 5471,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5459,
											"end": 5463,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 5447,
											"end": 5464,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5447,
											"end": 5464,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5447,
											"end": 5464,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 5447,
											"end": 5464,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5465,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5429,
											"end": 5465,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5417,
											"end": 5419,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5402,
											"end": 5420,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5402,
											"end": 5420,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5384,
											"end": 5471,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5476,
											"end": 5604,
											"name": "tag",
											"source": 8,
											"value": "171"
										},
										{
											"begin": 5476,
											"end": 5604,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5476,
											"end": 5604,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5547,
											"end": 5548,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5543,
											"end": 5549,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5540,
											"end": 5541,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5537,
											"end": 5550,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5534,
											"end": 5536,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5534,
											"end": 5536,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 5534,
											"end": 5536,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5553,
											"end": 5571,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 5553,
											"end": 5571,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 5553,
											"end": 5571,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5553,
											"end": 5571,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 5553,
											"end": 5571,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5589,
											"end": 5598,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5589,
											"end": 5598,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5524,
											"end": 5604,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5609,
											"end": 5826,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 5609,
											"end": 5826,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5609,
											"end": 5826,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5675,
											"end": 5676,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5665,
											"end": 5667,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 5665,
											"end": 5667,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5700,
											"end": 5731,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5700,
											"end": 5731,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5754,
											"end": 5758,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 5751,
											"end": 5752,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 5744,
											"end": 5759,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5782,
											"end": 5786,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5707,
											"end": 5708,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5772,
											"end": 5787,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 5665,
											"end": 5667,
											"name": "tag",
											"source": 8,
											"value": "227"
										},
										{
											"begin": 5665,
											"end": 5667,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5811,
											"end": 5820,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5811,
											"end": 5820,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5655,
											"end": 5826,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5831,
											"end": 5999,
											"name": "tag",
											"source": 8,
											"value": "181"
										},
										{
											"begin": 5831,
											"end": 5999,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5831,
											"end": 5999,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5937,
											"end": 5938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 5933,
											"end": 5934,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5929,
											"end": 5935,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 5925,
											"end": 5939,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 5922,
											"end": 5923,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 5919,
											"end": 5940,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 5914,
											"end": 5915,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5907,
											"end": 5916,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5900,
											"end": 5917,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5896,
											"end": 5941,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 5893,
											"end": 5895,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 5944,
											"end": 5962,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5984,
											"end": 5993,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 5984,
											"end": 5993,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5883,
											"end": 5999,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6004,
											"end": 6129,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 6004,
											"end": 6129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6004,
											"end": 6129,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6072,
											"end": 6073,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6069,
											"end": 6070,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6066,
											"end": 6074,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6063,
											"end": 6065,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6063,
											"end": 6065,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 6063,
											"end": 6065,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 6077,
											"end": 6095,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6114,
											"end": 6123,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 6114,
											"end": 6123,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6053,
											"end": 6129,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6134,
											"end": 6514,
											"name": "tag",
											"source": 8,
											"value": "79"
										},
										{
											"begin": 6134,
											"end": 6514,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6219,
											"end": 6220,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 6209,
											"end": 6221,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6209,
											"end": 6221,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 6266,
											"end": 6267,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 6256,
											"end": 6268,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6256,
											"end": 6268,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6256,
											"end": 6268,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6279,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 6277,
											"end": 6279,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6331,
											"end": 6335,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 6323,
											"end": 6329,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6319,
											"end": 6336,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6309,
											"end": 6336,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6309,
											"end": 6336,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6279,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 6277,
											"end": 6279,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6384,
											"end": 6386,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6376,
											"end": 6382,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6373,
											"end": 6387,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 6353,
											"end": 6371,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6350,
											"end": 6388,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6430,
											"end": 6440,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 6425,
											"end": 6428,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 6421,
											"end": 6441,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 6418,
											"end": 6419,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6411,
											"end": 6442,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6465,
											"end": 6469,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 6462,
											"end": 6463,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6455,
											"end": 6470,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6493,
											"end": 6497,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6490,
											"end": 6491,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6483,
											"end": 6498,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6347,
											"end": 6349,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6189,
											"end": 6514,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 6189,
											"end": 6514,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6189,
											"end": 6514,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6189,
											"end": 6514,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6519,
											"end": 6646,
											"name": "tag",
											"source": 8,
											"value": "225"
										},
										{
											"begin": 6519,
											"end": 6646,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6580,
											"end": 6590,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 6575,
											"end": 6578,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 6571,
											"end": 6591,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 6568,
											"end": 6569,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6561,
											"end": 6592,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6611,
											"end": 6615,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 6608,
											"end": 6609,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6601,
											"end": 6616,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6635,
											"end": 6639,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6632,
											"end": 6633,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6625,
											"end": 6640,
											"name": "REVERT",
											"source": 8
										}
									],
									".data": {
										"4107E8A8B9E94BF8FF83080DDEC1C0BFFE897EBC2241B89D44F66B3D274088B6": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
										"974D1B4421DA69CC60B481194F0DAD36A5BB4E23DA810DA7A7FB30CDBA178330": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
										"F8B476F7D28209D77D4A4AC1FE36B9F8259AA1BB6BDDFA6E89DE7E51615CF8A8": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f"
									}
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"memetoken.sol\":\"ReverseCramerTest\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ce8dfb62d0c4fa260d6eec8f1cd47f5f2a044e11bde5b31d18072fa6e7d9010\",\"dweb:/ipfs/QmTyFztU3tLEcEDnqqiaW4UJetqsU77LXc6pjc9oTXCK5u\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://15f52f51413a9de1ff191e2f6367c62178e1df7806d7880fe857a98b0b66253d\",\"dweb:/ipfs/QmaQG1fwfgUt5E9nu2cccFiV47B2V78MM1tCy1qB7n4MsH\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65\",\"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN\"]},\"memetoken.sol\":{\"keccak256\":\"0x9bdba2621ec1a47381ca203279f7a7412fec820ad7b260146ac21787e54f51a7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6afbb82ce044b548e3d9c4113dbf60cb14e8481d8eec2ad6548d898fa4219445\",\"dweb:/ipfs/QmeUHq8oebnMotoXmZQvazPzGApPCVjdP9928PdFBvXr2u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 7,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							},
							{
								"astId": 1207,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_name",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 1210,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_symbol",
								"offset": 0,
								"slot": "2",
								"type": "t_string_storage"
							},
							{
								"astId": 1213,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_decimals",
								"offset": 0,
								"slot": "3",
								"type": "t_uint8"
							},
							{
								"astId": 1220,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							},
							{
								"astId": 1224,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_balances",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 1230,
								"contract": "memetoken.sol:ReverseCramerTest",
								"label": "_allowances",
								"offset": 0,
								"slot": "6",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							878
						],
						"Ownable": [
							112
						]
					},
					"id": 113,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "102:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 113,
							"sourceUnit": 879,
							"src": "127:30:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 878,
										"src": "683:7:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "683:7:0"
								}
							],
							"contractDependencies": [
								878
							],
							"contractKind": "contract",
							"documentation": {
								"id": 3,
								"nodeType": "StructuredDocumentation",
								"src": "159:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 112,
							"linearizedBaseContracts": [
								112,
								878
							],
							"name": "Ownable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 7,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 112,
									"src": "697:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 6,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "697:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 13,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 9,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "753:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 8,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "753:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "784:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "784:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "752:57:0"
									},
									"src": "726:84:0"
								},
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "926:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "955:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "955:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 17,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "936:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "936:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "936:32:0"
											}
										]
									},
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "816:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 23,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "923:2:0"
									},
									"returnParameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:0"
									},
									"scope": 112,
									"src": "912:63:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 30,
										"nodeType": "Block",
										"src": "1084:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 26,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 54,
														"src": "1094:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 27,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 28,
												"nodeType": "ExpressionStatement",
												"src": "1094:13:0"
											},
											{
												"id": 29,
												"nodeType": "PlaceholderStatement",
												"src": "1117:1:0"
											}
										]
									},
									"documentation": {
										"id": 24,
										"nodeType": "StructuredDocumentation",
										"src": "981:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 31,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1081:2:0"
									},
									"src": "1063:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1256:30:0",
										"statements": [
											{
												"expression": {
													"id": 37,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1273:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 36,
												"id": 38,
												"nodeType": "Return",
												"src": "1266:13:0"
											}
										]
									},
									"documentation": {
										"id": 32,
										"nodeType": "StructuredDocumentation",
										"src": "1131:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1215:2:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "1247:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1247:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1246:9:0"
									},
									"scope": 112,
									"src": "1201:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1404:85:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 49,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 45,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 40,
																	"src": "1422:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1422:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 47,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 868,
																	"src": "1433:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1433:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1422:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 50,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1447:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 44,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1414:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "ExpressionStatement",
												"src": "1414:68:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1292:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1379:2:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1404:0:0"
									},
									"scope": 112,
									"src": "1359:130:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1885:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 63,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1922:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1914:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 61,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1914:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1914:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 60,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "1895:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1895:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1895:30:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1495:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 58,
											"modifierName": {
												"id": 57,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "1875:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1875:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1857:2:0"
									},
									"returnParameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1885:0:0"
									},
									"scope": 112,
									"src": "1831:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "2151:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 82,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 77,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "2169:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 80,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2189:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2181:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 78,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2181:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 81,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2181:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2169:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 83,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2193:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 76,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 84,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2161:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 85,
												"nodeType": "ExpressionStatement",
												"src": "2161:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 87,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 71,
															"src": "2263:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 86,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "2244:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2244:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "ExpressionStatement",
												"src": "2244:28:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1938:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 74,
											"modifierName": {
												"id": 73,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 31,
												"src": "2141:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2141:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "2108:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2108:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2107:18:0"
									},
									"returnParameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2151:0:0"
									},
									"scope": 112,
									"src": "2081:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 110,
										"nodeType": "Block",
										"src": "2496:124:0",
										"statements": [
											{
												"assignments": [
													98
												],
												"declarations": [
													{
														"constant": false,
														"id": 98,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 110,
														"src": "2506:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 97,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2506:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 100,
												"initialValue": {
													"id": 99,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "2525:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:25:0"
											},
											{
												"expression": {
													"id": 103,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 101,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 7,
														"src": "2541:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 102,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 94,
														"src": "2550:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2541:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 104,
												"nodeType": "ExpressionStatement",
												"src": "2541:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 106,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 98,
															"src": "2594:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 94,
															"src": "2604:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 105,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "2573:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2573:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "EmitStatement",
												"src": "2568:45:0"
											}
										]
									},
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "2285:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "2461:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2461:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2460:18:0"
									},
									"returnParameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2496:0:0"
									},
									"scope": 112,
									"src": "2433:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 113,
							"src": "654:1968:0"
						}
					],
					"src": "102:2521:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
					"exportedSymbols": {
						"ReentrancyGuard": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 114,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 115,
								"nodeType": "StructuredDocumentation",
								"src": "137:750:1",
								"text": " @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."
							},
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166
							],
							"name": "ReentrancyGuard",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 118,
									"mutability": "constant",
									"name": "_NOT_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1676:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 116,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1676:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 117,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1716:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 121,
									"mutability": "constant",
									"name": "_ENTERED",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1723:37:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 119,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1723:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 120,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1759:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 123,
									"mutability": "mutable",
									"name": "_status",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "1767:23:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 122,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1767:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1811:39:1",
										"statements": [
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "1821:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 127,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "1831:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1821:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1821:22:1"
											}
										]
									},
									"id": 131,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1808:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1811:0:1"
									},
									"scope": 166,
									"src": "1797:53:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 141,
										"nodeType": "Block",
										"src": "2251:79:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 134,
														"name": "_nonReentrantBefore",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 157,
														"src": "2261:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 135,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2261:21:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 136,
												"nodeType": "ExpressionStatement",
												"src": "2261:21:1"
											},
											{
												"id": 137,
												"nodeType": "PlaceholderStatement",
												"src": "2292:1:1"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 138,
														"name": "_nonReentrantAfter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 165,
														"src": "2303:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "2303:20:1"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "1856:366:1",
										"text": " @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."
									},
									"id": 142,
									"name": "nonReentrant",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2248:2:1"
									},
									"src": "2227:103:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 156,
										"nodeType": "Block",
										"src": "2375:248:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 148,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 146,
																"name": "_status",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 123,
																"src": "2468:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 147,
																"name": "_ENTERED",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 121,
																"src": "2479:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2468:19:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2489:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															},
															"value": "ReentrancyGuard: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
																"typeString": "literal_string \"ReentrancyGuard: reentrant call\""
															}
														],
														"id": 145,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2460:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2460:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "2460:63:1"
											},
											{
												"expression": {
													"id": 154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 152,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2598:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 153,
														"name": "_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 121,
														"src": "2608:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2598:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 155,
												"nodeType": "ExpressionStatement",
												"src": "2598:18:1"
											}
										]
									},
									"id": 157,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantBefore",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2364:2:1"
									},
									"returnParameters": {
										"id": 144,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2375:0:1"
									},
									"scope": 166,
									"src": "2336:287:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "2667:171:1",
										"statements": [
											{
												"expression": {
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 160,
														"name": "_status",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 123,
														"src": "2809:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 161,
														"name": "_NOT_ENTERED",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 118,
														"src": "2819:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2809:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 163,
												"nodeType": "ExpressionStatement",
												"src": "2809:22:1"
											}
										]
									},
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_nonReentrantAfter",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 158,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2656:2:1"
									},
									"returnParameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2667:0:1"
									},
									"scope": 166,
									"src": "2629:209:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 167,
							"src": "888:1952:1"
						}
					],
					"src": "112:2729:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							878
						],
						"ERC20": [
							753
						],
						"IERC20": [
							831
						],
						"IERC20Metadata": [
							856
						]
					},
					"id": 754,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 168,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 169,
							"nodeType": "ImportDirective",
							"scope": 754,
							"sourceUnit": 832,
							"src": "130:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 170,
							"nodeType": "ImportDirective",
							"scope": 754,
							"sourceUnit": 857,
							"src": "153:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 171,
							"nodeType": "ImportDirective",
							"scope": 754,
							"sourceUnit": 879,
							"src": "195:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 173,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 878,
										"src": "1419:7:2"
									},
									"id": 174,
									"nodeType": "InheritanceSpecifier",
									"src": "1419:7:2"
								},
								{
									"baseName": {
										"id": 175,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 831,
										"src": "1428:6:2"
									},
									"id": 176,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:6:2"
								},
								{
									"baseName": {
										"id": 177,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 856,
										"src": "1436:14:2"
									},
									"id": 178,
									"nodeType": "InheritanceSpecifier",
									"src": "1436:14:2"
								}
							],
							"contractDependencies": [
								831,
								856,
								878
							],
							"contractKind": "contract",
							"documentation": {
								"id": 172,
								"nodeType": "StructuredDocumentation",
								"src": "230:1170:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 753,
							"linearizedBaseContracts": [
								753,
								856,
								831,
								878
							],
							"name": "ERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 182,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1457:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 181,
										"keyType": {
											"id": 179,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1465:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1457:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 180,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1476:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 188,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1509:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 187,
										"keyType": {
											"id": 183,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1517:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1509:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 186,
											"keyType": {
												"id": 184,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1536:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1528:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 185,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1547:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 190,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1583:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 189,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1583:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 192,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1618:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 191,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1618:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 194,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 753,
									"src": "1644:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 193,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1644:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "2032:57:2",
										"statements": [
											{
												"expression": {
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 202,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 192,
														"src": "2042:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 203,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 197,
														"src": "2050:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2042:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 205,
												"nodeType": "ExpressionStatement",
												"src": "2042:13:2"
											},
											{
												"expression": {
													"id": 208,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 206,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "2065:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 207,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 199,
														"src": "2075:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2065:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 209,
												"nodeType": "ExpressionStatement",
												"src": "2065:17:2"
											}
										]
									},
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1673:298:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 211,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "name_",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "1988:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 196,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1988:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "symbol_",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "2009:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 198,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:44:2"
									},
									"returnParameters": {
										"id": 201,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2032:0:2"
									},
									"scope": 753,
									"src": "1976:113:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										843
									],
									"body": {
										"id": 220,
										"nodeType": "Block",
										"src": "2223:29:2",
										"statements": [
											{
												"expression": {
													"id": 218,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 192,
													"src": "2240:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 217,
												"id": 219,
												"nodeType": "Return",
												"src": "2233:12:2"
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "2095:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 214,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2190:8:2"
									},
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2167:2:2"
									},
									"returnParameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 221,
												"src": "2208:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 215,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2208:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:15:2"
									},
									"scope": 753,
									"src": "2154:98:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										849
									],
									"body": {
										"id": 230,
										"nodeType": "Block",
										"src": "2436:31:2",
										"statements": [
											{
												"expression": {
													"id": 228,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 194,
													"src": "2453:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 227,
												"id": 229,
												"nodeType": "Return",
												"src": "2446:14:2"
											}
										]
									},
									"documentation": {
										"id": 222,
										"nodeType": "StructuredDocumentation",
										"src": "2258:102:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 231,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 224,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2403:8:2"
									},
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2380:2:2"
									},
									"returnParameters": {
										"id": 227,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 231,
												"src": "2421:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 225,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2421:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:15:2"
									},
									"scope": 753,
									"src": "2365:102:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										855
									],
									"body": {
										"id": 240,
										"nodeType": "Block",
										"src": "3156:26:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 238,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3173:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 237,
												"id": 239,
												"nodeType": "Return",
												"src": "3166:9:2"
											}
										]
									},
									"documentation": {
										"id": 232,
										"nodeType": "StructuredDocumentation",
										"src": "2473:613:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 234,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3131:8:2"
									},
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3108:2:2"
									},
									"returnParameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "3149:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 235,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3149:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3148:7:2"
									},
									"scope": 753,
									"src": "3091:91:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										780
									],
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "3312:36:2",
										"statements": [
											{
												"expression": {
													"id": 248,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 190,
													"src": "3329:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 247,
												"id": 249,
												"nodeType": "Return",
												"src": "3322:19:2"
											}
										]
									},
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "3188:49:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 244,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3285:8:2"
									},
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3262:2:2"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 246,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3303:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 245,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3303:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3302:9:2"
									},
									"scope": 753,
									"src": "3242:106:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										788
									],
									"body": {
										"id": 264,
										"nodeType": "Block",
										"src": "3489:42:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 260,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "3506:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 262,
													"indexExpression": {
														"id": 261,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 254,
														"src": "3516:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3506:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 259,
												"id": 263,
												"nodeType": "Return",
												"src": "3499:25:2"
											}
										]
									},
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3354:47:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 265,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 256,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3462:8:2"
									},
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3425:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3425:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3424:17:2"
									},
									"returnParameters": {
										"id": 259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 258,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 265,
												"src": "3480:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 257,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3480:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3479:9:2"
									},
									"scope": 753,
									"src": "3406:125:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										798
									],
									"body": {
										"id": 289,
										"nodeType": "Block",
										"src": "3812:104:2",
										"statements": [
											{
												"assignments": [
													277
												],
												"declarations": [
													{
														"constant": false,
														"id": 277,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 289,
														"src": "3822:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 276,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3822:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 280,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 278,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "3838:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3838:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3822:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 282,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 277,
															"src": "3870:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 283,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "3877:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 284,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "3881:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 281,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "3860:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3860:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 286,
												"nodeType": "ExpressionStatement",
												"src": "3860:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3905:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 275,
												"id": 288,
												"nodeType": "Return",
												"src": "3898:11:2"
											}
										]
									},
									"documentation": {
										"id": 266,
										"nodeType": "StructuredDocumentation",
										"src": "3537:185:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 290,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 272,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3788:8:2"
									},
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "3745:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 267,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3745:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "3757:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3757:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3744:28:2"
									},
									"returnParameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 290,
												"src": "3806:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 273,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3806:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3805:6:2"
									},
									"scope": 753,
									"src": "3727:189:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										808
									],
									"body": {
										"id": 307,
										"nodeType": "Block",
										"src": "4072:51:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 301,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 188,
															"src": "4089:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 303,
														"indexExpression": {
															"id": 302,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 293,
															"src": "4101:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4089:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 305,
													"indexExpression": {
														"id": 304,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 295,
														"src": "4108:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4089:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 300,
												"id": 306,
												"nodeType": "Return",
												"src": "4082:34:2"
											}
										]
									},
									"documentation": {
										"id": 291,
										"nodeType": "StructuredDocumentation",
										"src": "3922:47:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 297,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4045:8:2"
									},
									"parameters": {
										"id": 296,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "3993:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3993:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "4008:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3992:32:2"
									},
									"returnParameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "4063:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4063:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4062:9:2"
									},
									"scope": 753,
									"src": "3974:149:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										818
									],
									"body": {
										"id": 332,
										"nodeType": "Block",
										"src": "4520:108:2",
										"statements": [
											{
												"assignments": [
													320
												],
												"declarations": [
													{
														"constant": false,
														"id": 320,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 332,
														"src": "4530:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 319,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4530:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 323,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 321,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "4546:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4546:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4530:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 325,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 320,
															"src": "4577:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 326,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 311,
															"src": "4584:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 327,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 313,
															"src": "4593:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 324,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 687,
														"src": "4568:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 328,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4568:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 329,
												"nodeType": "ExpressionStatement",
												"src": "4568:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 330,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4617:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 318,
												"id": 331,
												"nodeType": "Return",
												"src": "4610:11:2"
											}
										]
									},
									"documentation": {
										"id": 309,
										"nodeType": "StructuredDocumentation",
										"src": "4129:297:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 333,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 315,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4496:8:2"
									},
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4448:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4448:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4465:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4465:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4447:33:2"
									},
									"returnParameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "4514:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 316,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4514:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4513:6:2"
									},
									"scope": 753,
									"src": "4431:197:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										830
									],
									"body": {
										"id": 365,
										"nodeType": "Block",
										"src": "5323:153:2",
										"statements": [
											{
												"assignments": [
													347
												],
												"declarations": [
													{
														"constant": false,
														"id": 347,
														"mutability": "mutable",
														"name": "spender",
														"nodeType": "VariableDeclaration",
														"scope": 365,
														"src": "5333:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 346,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5333:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 350,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 348,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "5351:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5351:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5333:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 352,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "5389:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 353,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "5395:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 354,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "5404:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 351,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 730,
														"src": "5373:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 355,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5373:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 356,
												"nodeType": "ExpressionStatement",
												"src": "5373:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 358,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 336,
															"src": "5431:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 359,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "5437:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 360,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "5441:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 357,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 513,
														"src": "5421:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5421:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 362,
												"nodeType": "ExpressionStatement",
												"src": "5421:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 363,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5465:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 345,
												"id": 364,
												"nodeType": "Return",
												"src": "5458:11:2"
											}
										]
									},
									"documentation": {
										"id": 334,
										"nodeType": "StructuredDocumentation",
										"src": "4634:551:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 366,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 342,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5299:8:2"
									},
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5221:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5221:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 338,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5243:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 337,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5243:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5263:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5263:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5211:72:2"
									},
									"returnParameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 366,
												"src": "5317:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 343,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5317:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5316:6:2"
									},
									"scope": 753,
									"src": "5190:286:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 394,
										"nodeType": "Block",
										"src": "5965:140:2",
										"statements": [
											{
												"assignments": [
													377
												],
												"declarations": [
													{
														"constant": false,
														"id": 377,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 394,
														"src": "5975:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 376,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5975:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 380,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 378,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "5991:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 379,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5991:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5975:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 382,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 377,
															"src": "6022:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 383,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 369,
															"src": "6029:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 385,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 377,
																		"src": "6048:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 386,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 369,
																		"src": "6055:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 384,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 308,
																	"src": "6038:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 387,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6038:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 388,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 371,
																"src": "6066:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6038:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 381,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 687,
														"src": "6013:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6013:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "ExpressionStatement",
												"src": "6013:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 392,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6094:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 375,
												"id": 393,
												"nodeType": "Return",
												"src": "6087:11:2"
											}
										]
									},
									"documentation": {
										"id": 367,
										"nodeType": "StructuredDocumentation",
										"src": "5482:384:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 369,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "5898:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 368,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "5915:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5915:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:37:2"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 395,
												"src": "5959:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5959:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5958:6:2"
									},
									"scope": 753,
									"src": "5871:234:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 435,
										"nodeType": "Block",
										"src": "6691:328:2",
										"statements": [
											{
												"assignments": [
													406
												],
												"declarations": [
													{
														"constant": false,
														"id": 406,
														"mutability": "mutable",
														"name": "owner",
														"nodeType": "VariableDeclaration",
														"scope": 435,
														"src": "6701:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 405,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6701:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 409,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 407,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 868,
														"src": "6717:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6717:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6701:28:2"
											},
											{
												"assignments": [
													411
												],
												"declarations": [
													{
														"constant": false,
														"id": 411,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 435,
														"src": "6739:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 410,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6739:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [
														{
															"id": 413,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "6776:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 414,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "6783:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 412,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "6766:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6766:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6739:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 418,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 411,
																"src": "6809:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 419,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 400,
																"src": "6829:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6809:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6846:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 417,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6801:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6801:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "6801:85:2"
											},
											{
												"id": 432,
												"nodeType": "UncheckedBlock",
												"src": "6896:95:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 425,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 406,
																	"src": "6929:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 426,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 398,
																	"src": "6936:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 427,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 411,
																		"src": "6945:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 428,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 400,
																		"src": "6964:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6945:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 424,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 687,
																"src": "6920:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6920:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 431,
														"nodeType": "ExpressionStatement",
														"src": "6920:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 433,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7008:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 404,
												"id": 434,
												"nodeType": "Return",
												"src": "7001:11:2"
											}
										]
									},
									"documentation": {
										"id": 396,
										"nodeType": "StructuredDocumentation",
										"src": "6111:476:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 436,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "6619:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 397,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6619:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "6636:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6636:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6618:42:2"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "6685:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 402,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6685:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6684:6:2"
									},
									"scope": 753,
									"src": "6592:427:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 512,
										"nodeType": "Block",
										"src": "7581:710:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 447,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 439,
																"src": "7599:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 450,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7615:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7607:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 448,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7607:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 451,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7607:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7599:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7619:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 446,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7591:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7591:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 455,
												"nodeType": "ExpressionStatement",
												"src": "7591:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 457,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 441,
																"src": "7677:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 460,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7691:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 459,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7683:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 458,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7683:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 461,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7683:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7677:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 463,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7695:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 456,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7669:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7669:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "7669:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 467,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "7765:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "7771:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "7775:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 466,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 741,
														"src": "7744:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7744:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "7744:38:2"
											},
											{
												"assignments": [
													473
												],
												"declarations": [
													{
														"constant": false,
														"id": 473,
														"mutability": "mutable",
														"name": "fromBalance",
														"nodeType": "VariableDeclaration",
														"scope": 512,
														"src": "7793:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 472,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7793:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 477,
												"initialValue": {
													"baseExpression": {
														"id": 474,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "7815:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 476,
													"indexExpression": {
														"id": 475,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 439,
														"src": "7825:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7815:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7793:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 479,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "7848:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 480,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 443,
																"src": "7863:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7848:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 482,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7871:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 478,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7840:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7840:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 484,
												"nodeType": "ExpressionStatement",
												"src": "7840:72:2"
											},
											{
												"id": 499,
												"nodeType": "UncheckedBlock",
												"src": "7922:273:2",
												"statements": [
													{
														"expression": {
															"id": 491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 485,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 182,
																	"src": "7946:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 487,
																"indexExpression": {
																	"id": 486,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 439,
																	"src": "7956:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7946:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 490,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 488,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 473,
																	"src": "7964:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 489,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 443,
																	"src": "7978:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7964:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7946:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 492,
														"nodeType": "ExpressionStatement",
														"src": "7946:38:2"
													},
													{
														"expression": {
															"id": 497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 493,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 182,
																	"src": "8161:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 495,
																"indexExpression": {
																	"id": 494,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 441,
																	"src": "8171:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8161:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 496,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 443,
																"src": "8178:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8161:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 498,
														"nodeType": "ExpressionStatement",
														"src": "8161:23:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 501,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "8219:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 502,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "8225:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 503,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "8229:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 500,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "8210:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8210:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 505,
												"nodeType": "EmitStatement",
												"src": "8205:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 507,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "8267:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 508,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "8273:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 509,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "8277:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 506,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "8247:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8247:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "8247:37:2"
											}
										]
									},
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "7025:443:2",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "7501:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7501:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "7523:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7523:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 513,
												"src": "7543:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 442,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7543:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7491:72:2"
									},
									"returnParameters": {
										"id": 445,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7581:0:2"
									},
									"scope": 753,
									"src": "7473:818:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 569,
										"nodeType": "Block",
										"src": "8632:470:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 522,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 516,
																"src": "8650:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8669:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 524,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8661:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 523,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8661:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8661:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8650:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8673:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 521,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8642:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8642:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 530,
												"nodeType": "ExpressionStatement",
												"src": "8642:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 534,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8747:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 533,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8739:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 532,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8739:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 535,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8739:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 536,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "8751:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 537,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "8760:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 531,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 741,
														"src": "8718:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8718:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "8718:49:2"
											},
											{
												"expression": {
													"id": 542,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 540,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "8778:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 541,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 518,
														"src": "8794:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8778:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 543,
												"nodeType": "ExpressionStatement",
												"src": "8778:22:2"
											},
											{
												"id": 550,
												"nodeType": "UncheckedBlock",
												"src": "8810:175:2",
												"statements": [
													{
														"expression": {
															"id": 548,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 544,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 182,
																	"src": "8946:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 546,
																"indexExpression": {
																	"id": 545,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 516,
																	"src": "8956:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8946:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 547,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 518,
																"src": "8968:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8946:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 549,
														"nodeType": "ExpressionStatement",
														"src": "8946:28:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9016:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9008:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 552,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9008:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9008:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 556,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "9020:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 557,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "9029:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 551,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "8999:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8999:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 559,
												"nodeType": "EmitStatement",
												"src": "8994:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 563,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9075:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 562,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9067:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 561,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9067:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9067:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 565,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 516,
															"src": "9079:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 566,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 518,
															"src": "9088:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 560,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "9047:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9047:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 568,
												"nodeType": "ExpressionStatement",
												"src": "9047:48:2"
											}
										]
									},
									"documentation": {
										"id": 514,
										"nodeType": "StructuredDocumentation",
										"src": "8297:265:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 570,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "8582:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 515,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8582:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 518,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 570,
												"src": "8599:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 517,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8599:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8581:33:2"
									},
									"returnParameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8632:0:2"
									},
									"scope": 753,
									"src": "8567:535:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 641,
										"nodeType": "Block",
										"src": "9487:594:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 579,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 573,
																"src": "9505:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 582,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9524:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9516:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 580,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9516:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 583,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9516:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9505:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 585,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9528:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 578,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9497:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9497:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 587,
												"nodeType": "ExpressionStatement",
												"src": "9497:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 589,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "9596:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9613:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 591,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9605:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 590,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9605:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 593,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9605:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 594,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "9617:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 588,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 741,
														"src": "9575:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9575:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 596,
												"nodeType": "ExpressionStatement",
												"src": "9575:49:2"
											},
											{
												"assignments": [
													598
												],
												"declarations": [
													{
														"constant": false,
														"id": 598,
														"mutability": "mutable",
														"name": "accountBalance",
														"nodeType": "VariableDeclaration",
														"scope": 641,
														"src": "9635:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 597,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9635:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 602,
												"initialValue": {
													"baseExpression": {
														"id": 599,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 182,
														"src": "9660:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 601,
													"indexExpression": {
														"id": 600,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "9670:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9660:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9635:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 606,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 604,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 598,
																"src": "9696:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 605,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "9714:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9696:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9722:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 603,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9688:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9688:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 609,
												"nodeType": "ExpressionStatement",
												"src": "9688:71:2"
											},
											{
												"id": 622,
												"nodeType": "UncheckedBlock",
												"src": "9769:194:2",
												"statements": [
													{
														"expression": {
															"id": 616,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 610,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 182,
																	"src": "9793:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 612,
																"indexExpression": {
																	"id": 611,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "9803:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9793:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 615,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 613,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 598,
																	"src": "9814:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 614,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 575,
																	"src": "9831:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9814:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9793:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 617,
														"nodeType": "ExpressionStatement",
														"src": "9793:44:2"
													},
													{
														"expression": {
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 618,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 190,
																"src": "9930:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 619,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "9946:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9930:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 621,
														"nodeType": "ExpressionStatement",
														"src": "9930:22:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 624,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "9987:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 627,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10004:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9996:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 625,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9996:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9996:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 629,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "10008:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 623,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "9978:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9978:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 631,
												"nodeType": "EmitStatement",
												"src": "9973:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 633,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 573,
															"src": "10046:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 636,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10063:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 635,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10055:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 634,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10055:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10055:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 638,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "10067:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 632,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 752,
														"src": "10026:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10026:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "10026:48:2"
											}
										]
									},
									"documentation": {
										"id": 571,
										"nodeType": "StructuredDocumentation",
										"src": "9108:309:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 642,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 576,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "9437:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 572,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9437:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 642,
												"src": "9454:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 574,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9454:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9436:33:2"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9487:0:2"
									},
									"scope": 753,
									"src": "9422:659:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 686,
										"nodeType": "Block",
										"src": "10617:257:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 653,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 645,
																"src": "10635:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 656,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10652:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 655,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10644:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 654,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10644:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 657,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10644:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10635:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 659,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10656:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 652,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10627:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10627:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "10627:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 663,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 647,
																"src": "10713:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 666,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10732:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 665,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10724:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 664,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10724:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 667,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10724:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10713:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10736:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 662,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10705:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 670,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10705:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 671,
												"nodeType": "ExpressionStatement",
												"src": "10705:68:2"
											},
											{
												"expression": {
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 672,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 188,
																"src": "10784:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 675,
															"indexExpression": {
																"id": 673,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 645,
																"src": "10796:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10784:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 676,
														"indexExpression": {
															"id": 674,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "10803:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10784:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 677,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "10814:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10784:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "10784:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 681,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "10844:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 682,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 647,
															"src": "10851:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 683,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 649,
															"src": "10860:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 680,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "10835:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10835:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 685,
												"nodeType": "EmitStatement",
												"src": "10830:37:2"
											}
										]
									},
									"documentation": {
										"id": 643,
										"nodeType": "StructuredDocumentation",
										"src": "10087:412:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "10531:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10531:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "10554:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10554:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 649,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "10579:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10579:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10521:78:2"
									},
									"returnParameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10617:0:2"
									},
									"scope": 753,
									"src": "10504:370:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 729,
										"nodeType": "Block",
										"src": "11275:321:2",
										"statements": [
											{
												"assignments": [
													698
												],
												"declarations": [
													{
														"constant": false,
														"id": 698,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 729,
														"src": "11285:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 697,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11285:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 703,
												"initialValue": {
													"arguments": [
														{
															"id": 700,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 690,
															"src": "11322:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "11329:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 699,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 308,
														"src": "11312:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 702,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11312:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11285:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 710,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 704,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 698,
														"src": "11351:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11376:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 706,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "11376:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 705,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "11371:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 708,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11371:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 709,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "11371:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11351:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 728,
												"nodeType": "IfStatement",
												"src": "11347:243:2",
												"trueBody": {
													"id": 727,
													"nodeType": "Block",
													"src": "11390:200:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 714,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 712,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 698,
																			"src": "11412:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 713,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 694,
																			"src": "11432:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "11412:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11440:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 711,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "11404:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 716,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11404:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 717,
															"nodeType": "ExpressionStatement",
															"src": "11404:68:2"
														},
														{
															"id": 726,
															"nodeType": "UncheckedBlock",
															"src": "11486:94:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 719,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 690,
																				"src": "11523:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 720,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 692,
																				"src": "11530:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 723,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 721,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 698,
																					"src": "11539:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 722,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 694,
																					"src": "11558:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11539:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 718,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 687,
																			"src": "11514:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 724,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11514:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 725,
																	"nodeType": "ExpressionStatement",
																	"src": "11514:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 688,
										"nodeType": "StructuredDocumentation",
										"src": "10880:270:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 730,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 730,
												"src": "11189:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 689,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11189:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 730,
												"src": "11212:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 691,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11212:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 730,
												"src": "11237:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 693,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11237:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11179:78:2"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11275:0:2"
									},
									"scope": 753,
									"src": "11155:441:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 740,
										"nodeType": "Block",
										"src": "12299:2:2",
										"statements": []
									},
									"documentation": {
										"id": 731,
										"nodeType": "StructuredDocumentation",
										"src": "11602:573:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 741,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 738,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 733,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "12219:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 732,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12219:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 735,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "12241:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 734,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12241:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 737,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 741,
												"src": "12261:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12261:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12209:72:2"
									},
									"returnParameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12299:0:2"
									},
									"scope": 753,
									"src": "12180:121:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 751,
										"nodeType": "Block",
										"src": "13007:2:2",
										"statements": []
									},
									"documentation": {
										"id": 742,
										"nodeType": "StructuredDocumentation",
										"src": "12307:577:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 752,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "12927:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 743,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12927:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "12949:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12949:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 752,
												"src": "12969:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 747,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12969:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12917:72:2"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13007:0:2"
									},
									"scope": 753,
									"src": "12889:120:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 754,
							"src": "1401:11610:2"
						}
					],
					"src": "105:12907:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							831
						]
					},
					"id": 832,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 755,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 756,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 831,
							"linearizedBaseContracts": [
								831
							],
							"name": "IERC20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 757,
										"nodeType": "StructuredDocumentation",
										"src": "225:158:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 765,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 759,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "403:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 758,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "403:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 761,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "425:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 760,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "425:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 763,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 765,
												"src": "445:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "402:57:3"
									},
									"src": "388:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 766,
										"nodeType": "StructuredDocumentation",
										"src": "466:148:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 774,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 773,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 768,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "634:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 767,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "634:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "657:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 769,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 772,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 774,
												"src": "682:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 771,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "682:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "633:63:3"
									},
									"src": "619:78:3"
								},
								{
									"documentation": {
										"id": 775,
										"nodeType": "StructuredDocumentation",
										"src": "703:66:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 780,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 776,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:3"
									},
									"returnParameters": {
										"id": 779,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 780,
												"src": "820:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 777,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:3"
									},
									"scope": 831,
									"src": "774:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 781,
										"nodeType": "StructuredDocumentation",
										"src": "835:72:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 788,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "931:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:3"
									},
									"returnParameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 786,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 788,
												"src": "971:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 785,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:3"
									},
									"scope": 831,
									"src": "912:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 789,
										"nodeType": "StructuredDocumentation",
										"src": "986:202:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 798,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "1211:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 790,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "1223:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 792,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:28:3"
									},
									"returnParameters": {
										"id": 797,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 796,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 798,
												"src": "1257:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 795,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1257:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1256:6:3"
									},
									"scope": 831,
									"src": "1193:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 799,
										"nodeType": "StructuredDocumentation",
										"src": "1269:264:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 808,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1557:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 800,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1557:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1572:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 802,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1556:32:3"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 808,
												"src": "1612:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1612:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:9:3"
									},
									"scope": 831,
									"src": "1538:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 809,
										"nodeType": "StructuredDocumentation",
										"src": "1627:642:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 818,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2291:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2291:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2308:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2308:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2290:33:3"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2342:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 815,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2342:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2341:6:3"
									},
									"scope": 831,
									"src": "2274:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 819,
										"nodeType": "StructuredDocumentation",
										"src": "2354:287:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 830,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 821,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2677:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 820,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2677:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2699:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 822,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2699:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2719:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 824,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2719:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2667:72:3"
									},
									"returnParameters": {
										"id": 829,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 830,
												"src": "2758:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 827,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2758:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2757:6:3"
									},
									"scope": 831,
									"src": "2646:118:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 832,
							"src": "202:2564:3"
						}
					],
					"src": "106:2661:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							831
						],
						"IERC20Metadata": [
							856
						]
					},
					"id": 857,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 833,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 834,
							"nodeType": "ImportDirective",
							"scope": 857,
							"sourceUnit": 832,
							"src": "135:23:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 836,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 831,
										"src": "305:6:4"
									},
									"id": 837,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:4"
								}
							],
							"contractDependencies": [
								831
							],
							"contractKind": "interface",
							"documentation": {
								"id": 835,
								"nodeType": "StructuredDocumentation",
								"src": "160:116:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 856,
							"linearizedBaseContracts": [
								856,
								831
							],
							"name": "IERC20Metadata",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 838,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 843,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 839,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:4"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 841,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 843,
												"src": "416:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 840,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:4"
									},
									"scope": 856,
									"src": "377:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 844,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 849,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 845,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:4"
									},
									"returnParameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "539:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 846,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:4"
									},
									"scope": 856,
									"src": "498:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 850,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 855,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:4"
									},
									"returnParameters": {
										"id": 854,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 853,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 855,
												"src": "673:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 852,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:4"
									},
									"scope": 856,
									"src": "630:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 857,
							"src": "277:405:4"
						}
					],
					"src": "110:573:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							878
						]
					},
					"id": 879,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 858,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 859,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 878,
							"linearizedBaseContracts": [
								878
							],
							"name": "Context",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 867,
										"nodeType": "Block",
										"src": "702:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 864,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 865,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 863,
												"id": 866,
												"nodeType": "Return",
												"src": "712:17:5"
											}
										]
									},
									"id": 868,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 860,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:5"
									},
									"returnParameters": {
										"id": 863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 868,
												"src": "693:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:5"
									},
									"scope": 878,
									"src": "640:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "809:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 873,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 872,
												"id": 875,
												"nodeType": "Return",
												"src": "819:15:5"
											}
										]
									},
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 869,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:5"
									},
									"returnParameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "793:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 870,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:5"
									},
									"scope": 878,
									"src": "742:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 879,
							"src": "608:235:5"
						}
					],
					"src": "86:758:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/utils/math/SafeMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
					"exportedSymbols": {
						"SafeMath": [
							1190
						]
					},
					"id": 1191,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 880,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "107:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 881,
								"nodeType": "StructuredDocumentation",
								"src": "285:196:6",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1190,
							"linearizedBaseContracts": [
								1190
							],
							"name": "SafeMath",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 912,
										"nodeType": "Block",
										"src": "717:140:6",
										"statements": [
											{
												"id": 911,
												"nodeType": "UncheckedBlock",
												"src": "727:124:6",
												"statements": [
													{
														"assignments": [
															894
														],
														"declarations": [
															{
																"constant": false,
																"id": 894,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 911,
																"src": "751:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 893,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "751:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 898,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 897,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 895,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 884,
																"src": "763:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 896,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 886,
																"src": "767:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "763:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "751:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 901,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 899,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 894,
																"src": "786:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 900,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 884,
																"src": "790:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "786:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 906,
														"nodeType": "IfStatement",
														"src": "782:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 902,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "801:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 903,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "808:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 904,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "800:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 892,
															"id": 905,
															"nodeType": "Return",
															"src": "793:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 907,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "832:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 908,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 894,
																	"src": "838:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 909,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "831:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 892,
														"id": 910,
														"nodeType": "Return",
														"src": "824:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 882,
										"nodeType": "StructuredDocumentation",
										"src": "505:131:6",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 913,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 887,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "657:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "657:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 886,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "668:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "656:22:6"
									},
									"returnParameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "702:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 888,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "702:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 913,
												"src": "708:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 890,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "708:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "701:15:6"
									},
									"scope": 1190,
									"src": "641:216:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 940,
										"nodeType": "Block",
										"src": "1078:113:6",
										"statements": [
											{
												"id": 939,
												"nodeType": "UncheckedBlock",
												"src": "1088:97:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 925,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 918,
																"src": "1116:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 926,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 916,
																"src": "1120:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1116:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 932,
														"nodeType": "IfStatement",
														"src": "1112:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 928,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1131:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 929,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1138:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 930,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1130:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 924,
															"id": 931,
															"nodeType": "Return",
															"src": "1123:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 933,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1162:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 934,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 916,
																		"src": "1168:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 935,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 918,
																		"src": "1172:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1168:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 937,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1161:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 924,
														"id": 938,
														"nodeType": "Return",
														"src": "1154:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "863:134:6",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 941,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1018:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 918,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1029:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:22:6"
									},
									"returnParameters": {
										"id": 924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1063:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 920,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1063:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 941,
												"src": "1069:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1069:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1062:15:6"
									},
									"scope": 1190,
									"src": "1002:189:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 982,
										"nodeType": "Block",
										"src": "1415:417:6",
										"statements": [
											{
												"id": 981,
												"nodeType": "UncheckedBlock",
												"src": "1425:401:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 955,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 953,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "1683:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 954,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1688:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1683:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 960,
														"nodeType": "IfStatement",
														"src": "1679:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 956,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1699:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1705:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 958,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1698:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 952,
															"id": 959,
															"nodeType": "Return",
															"src": "1691:16:6"
														}
													},
													{
														"assignments": [
															962
														],
														"declarations": [
															{
																"constant": false,
																"id": 962,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 981,
																"src": "1721:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 961,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1721:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 966,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 965,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 963,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 944,
																"src": "1733:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 964,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 946,
																"src": "1737:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1733:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1721:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 969,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 967,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 962,
																	"src": "1756:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 968,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 944,
																	"src": "1760:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1756:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 970,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 946,
																"src": "1765:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1756:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 976,
														"nodeType": "IfStatement",
														"src": "1752:33:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1776:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 973,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1783:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 974,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1775:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 952,
															"id": 975,
															"nodeType": "Return",
															"src": "1768:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1807:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 978,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 962,
																	"src": "1813:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 979,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1806:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 952,
														"id": 980,
														"nodeType": "Return",
														"src": "1799:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 942,
										"nodeType": "StructuredDocumentation",
										"src": "1197:137:6",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 983,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "1355:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 943,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1355:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "1366:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 945,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1366:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1354:22:6"
									},
									"returnParameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "1400:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 948,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1400:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 983,
												"src": "1406:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 950,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1406:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1399:15:6"
									},
									"scope": 1190,
									"src": "1339:493:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1010,
										"nodeType": "Block",
										"src": "2057:114:6",
										"statements": [
											{
												"id": 1009,
												"nodeType": "UncheckedBlock",
												"src": "2067:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 997,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 995,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 988,
																"src": "2095:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 996,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2095:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1002,
														"nodeType": "IfStatement",
														"src": "2091:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2111:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2118:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1000,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2110:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 994,
															"id": 1001,
															"nodeType": "Return",
															"src": "2103:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1003,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2142:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1006,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1004,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 986,
																		"src": "2148:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 1005,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 988,
																		"src": "2152:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2148:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1007,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2141:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 994,
														"id": 1008,
														"nodeType": "Return",
														"src": "2134:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 984,
										"nodeType": "StructuredDocumentation",
										"src": "1838:138:6",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1011,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 986,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "1997:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 985,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1997:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "2008:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 987,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2008:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1996:22:6"
									},
									"returnParameters": {
										"id": 994,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 991,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "2042:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 990,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2042:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 993,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1011,
												"src": "2048:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 992,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2048:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2041:15:6"
									},
									"scope": 1190,
									"src": "1981:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1038,
										"nodeType": "Block",
										"src": "2406:114:6",
										"statements": [
											{
												"id": 1037,
												"nodeType": "UncheckedBlock",
												"src": "2416:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1023,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1016,
																"src": "2444:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1024,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2449:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2444:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1030,
														"nodeType": "IfStatement",
														"src": "2440:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1026,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2460:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1027,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2467:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1028,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2459:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1022,
															"id": 1029,
															"nodeType": "Return",
															"src": "2452:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1031,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2491:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1034,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1032,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1014,
																		"src": "2497:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 1033,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1016,
																		"src": "2501:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2497:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1035,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2490:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1022,
														"id": 1036,
														"nodeType": "Return",
														"src": "2483:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1012,
										"nodeType": "StructuredDocumentation",
										"src": "2177:148:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 1039,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1017,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2346:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1013,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2346:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2357:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1015,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2357:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2345:22:6"
									},
									"returnParameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2391:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1018,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2391:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1021,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1039,
												"src": "2397:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1020,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2397:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2390:15:6"
									},
									"scope": 1190,
									"src": "2330:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1053,
										"nodeType": "Block",
										"src": "2822:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1049,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "2839:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 1050,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1044,
														"src": "2843:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2839:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1048,
												"id": 1052,
												"nodeType": "Return",
												"src": "2832:12:6"
											}
										]
									},
									"documentation": {
										"id": 1040,
										"nodeType": "StructuredDocumentation",
										"src": "2526:224:6",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 1054,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1045,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "2768:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1041,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2768:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "2779:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1043,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2779:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2767:22:6"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1054,
												"src": "2813:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2813:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2812:9:6"
									},
									"scope": 1190,
									"src": "2755:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1068,
										"nodeType": "Block",
										"src": "3189:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1064,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1057,
														"src": "3206:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 1065,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1059,
														"src": "3210:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3206:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1063,
												"id": 1067,
												"nodeType": "Return",
												"src": "3199:12:6"
											}
										]
									},
									"documentation": {
										"id": 1055,
										"nodeType": "StructuredDocumentation",
										"src": "2857:260:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1060,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "3135:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3135:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1059,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "3146:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1058,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3146:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3134:22:6"
									},
									"returnParameters": {
										"id": 1063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1069,
												"src": "3180:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3180:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3179:9:6"
									},
									"scope": 1190,
									"src": "3122:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1083,
										"nodeType": "Block",
										"src": "3532:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1079,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1072,
														"src": "3549:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 1080,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1074,
														"src": "3553:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3549:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1078,
												"id": 1082,
												"nodeType": "Return",
												"src": "3542:12:6"
											}
										]
									},
									"documentation": {
										"id": 1070,
										"nodeType": "StructuredDocumentation",
										"src": "3224:236:6",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 1084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "3478:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1071,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3478:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "3489:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3489:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3477:22:6"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "3523:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3522:9:6"
									},
									"scope": 1190,
									"src": "3465:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1098,
										"nodeType": "Block",
										"src": "3917:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1096,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1094,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1087,
														"src": "3934:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 1095,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1089,
														"src": "3938:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3934:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1093,
												"id": 1097,
												"nodeType": "Return",
												"src": "3927:12:6"
											}
										]
									},
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "3567:278:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1090,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3863:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3863:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3874:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3874:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3862:22:6"
									},
									"returnParameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1099,
												"src": "3908:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1091,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3908:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3907:9:6"
									},
									"scope": 1190,
									"src": "3850:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1113,
										"nodeType": "Block",
										"src": "4466:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1109,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1102,
														"src": "4483:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 1110,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1104,
														"src": "4487:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4483:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1108,
												"id": 1112,
												"nodeType": "Return",
												"src": "4476:12:6"
											}
										]
									},
									"documentation": {
										"id": 1100,
										"nodeType": "StructuredDocumentation",
										"src": "3952:442:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1114,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1102,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4412:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1101,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4412:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1104,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4423:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1103,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4411:22:6"
									},
									"returnParameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1107,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1114,
												"src": "4457:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4457:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4456:9:6"
									},
									"scope": 1190,
									"src": "4399:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1138,
										"nodeType": "Block",
										"src": "5084:106:6",
										"statements": [
											{
												"id": 1137,
												"nodeType": "UncheckedBlock",
												"src": "5094:90:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1127,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1119,
																		"src": "5126:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1128,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1117,
																		"src": "5131:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5126:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1130,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1121,
																	"src": "5134:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1126,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5118:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1131,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5118:29:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1132,
														"nodeType": "ExpressionStatement",
														"src": "5118:29:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1133,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1117,
																"src": "5168:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1134,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1119,
																"src": "5172:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5168:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1125,
														"id": 1136,
														"nodeType": "Return",
														"src": "5161:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1115,
										"nodeType": "StructuredDocumentation",
										"src": "4501:453:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "4981:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4981:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "5000:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5000:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "5019:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1120,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5019:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4971:80:6"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1124,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1139,
												"src": "5075:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5074:9:6"
									},
									"scope": 1190,
									"src": "4959:231:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1163,
										"nodeType": "Block",
										"src": "5799:105:6",
										"statements": [
											{
												"id": 1162,
												"nodeType": "UncheckedBlock",
												"src": "5809:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1154,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1152,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1144,
																		"src": "5841:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1153,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5845:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5841:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1155,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1146,
																	"src": "5848:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1151,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5833:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1156,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5833:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1157,
														"nodeType": "ExpressionStatement",
														"src": "5833:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1160,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1158,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1142,
																"src": "5882:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1159,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "5886:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5882:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1150,
														"id": 1161,
														"nodeType": "Return",
														"src": "5875:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1140,
										"nodeType": "StructuredDocumentation",
										"src": "5196:473:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1164,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "5696:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5696:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "5715:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5715:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "5734:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1145,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5734:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5686:80:6"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1149,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1164,
												"src": "5790:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1148,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5790:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5789:9:6"
									},
									"scope": 1190,
									"src": "5674:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1188,
										"nodeType": "Block",
										"src": "6675:105:6",
										"statements": [
											{
												"id": 1187,
												"nodeType": "UncheckedBlock",
												"src": "6685:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1177,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1169,
																		"src": "6717:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1178,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6721:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6717:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1180,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1171,
																	"src": "6724:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1176,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6709:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1181,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6709:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1182,
														"nodeType": "ExpressionStatement",
														"src": "6709:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1183,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "6758:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1184,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1169,
																"src": "6762:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6758:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1175,
														"id": 1186,
														"nodeType": "Return",
														"src": "6751:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1165,
										"nodeType": "StructuredDocumentation",
										"src": "5910:635:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1189,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1167,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6572:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1166,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6572:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1169,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6591:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1168,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6591:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6610:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1170,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6610:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6562:80:6"
									},
									"returnParameters": {
										"id": 1175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1189,
												"src": "6666:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6665:9:6"
									},
									"scope": 1190,
									"src": "6550:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1191,
							"src": "482:6300:6"
						}
					],
					"src": "107:6676:6"
				},
				"id": 6
			},
			"memetoken.sol": {
				"ast": {
					"absolutePath": "memetoken.sol",
					"exportedSymbols": {
						"Context": [
							878
						],
						"ERC20": [
							753
						],
						"IERC20": [
							831
						],
						"IERC20Metadata": [
							856
						],
						"Ownable": [
							112
						],
						"ReentrancyGuard": [
							166
						],
						"ReverseCramerTest": [
							1609
						],
						"SafeMath": [
							1190
						]
					},
					"id": 1610,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1192,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"id": 1193,
							"nodeType": "ImportDirective",
							"scope": 1610,
							"sourceUnit": 832,
							"src": "62:56:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1194,
							"nodeType": "ImportDirective",
							"scope": 1610,
							"sourceUnit": 754,
							"src": "120:55:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"file": "@openzeppelin/contracts/utils/math/SafeMath.sol",
							"id": 1195,
							"nodeType": "ImportDirective",
							"scope": 1610,
							"sourceUnit": 1191,
							"src": "177:57:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 1196,
							"nodeType": "ImportDirective",
							"scope": 1610,
							"sourceUnit": 113,
							"src": "236:52:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"file": "@openzeppelin/contracts/security/ReentrancyGuard.sol",
							"id": 1197,
							"nodeType": "ImportDirective",
							"scope": 1610,
							"sourceUnit": 167,
							"src": "290:62:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1198,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 831,
										"src": "388:6:7"
									},
									"id": 1199,
									"nodeType": "InheritanceSpecifier",
									"src": "388:6:7"
								},
								{
									"baseName": {
										"id": 1200,
										"name": "Ownable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 112,
										"src": "396:7:7"
									},
									"id": 1201,
									"nodeType": "InheritanceSpecifier",
									"src": "396:7:7"
								}
							],
							"contractDependencies": [
								112,
								831,
								878
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1609,
							"linearizedBaseContracts": [
								1609,
								112,
								878,
								831
							],
							"name": "ReverseCramerTest",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1204,
									"libraryName": {
										"id": 1202,
										"name": "SafeMath",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1190,
										"src": "417:8:7"
									},
									"nodeType": "UsingForDirective",
									"src": "411:27:7",
									"typeName": {
										"id": 1203,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "430:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 1207,
									"mutability": "mutable",
									"name": "_name",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "446:45:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1205,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "446:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "52657665727365204372616d657220546f6b656e",
										"id": 1206,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "469:22:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_6aaf1c1ab96f19b300eeace640d8a87ccd54287dab9176f04c1fdc9be721a38f",
											"typeString": "literal_string \"Reverse Cramer Token\""
										},
										"value": "Reverse Cramer Token"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1210,
									"mutability": "mutable",
									"name": "_symbol",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "498:36:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1208,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "498:6:7",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "5245564352414d4552",
										"id": 1209,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "523:11:7",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_ef535bf22cfc21ddeba541c649237bf44329f8093d539d1e0ed09d8bd64faf3e",
											"typeString": "literal_string \"REVCRAMER\""
										},
										"value": "REVCRAMER"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1213,
									"mutability": "mutable",
									"name": "_decimals",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "541:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1211,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "541:5:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3138",
										"id": 1212,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "567:2:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_18_by_1",
											"typeString": "int_const 18"
										},
										"value": "18"
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1220,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "578:47:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1214,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "578:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000000000"
										},
										"id": 1219,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "31303030303030",
											"id": 1215,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "609:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000_by_1",
												"typeString": "int_const 1000000"
											},
											"value": "1000000"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"commonType": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											},
											"id": 1218,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"hexValue": "3130",
												"id": 1216,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "619:2:7",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_10_by_1",
													"typeString": "int_const 10"
												},
												"value": "10"
											},
											"nodeType": "BinaryOperation",
											"operator": "**",
											"rightExpression": {
												"hexValue": "3138",
												"id": 1217,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "623:2:7",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_18_by_1",
													"typeString": "int_const 18"
												},
												"value": "18"
											},
											"src": "619:6:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											}
										},
										"src": "609:16:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1000000000000000000000000_by_1",
											"typeString": "int_const 1000000000000000000000000"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1224,
									"mutability": "mutable",
									"name": "_balances",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "658:45:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1223,
										"keyType": {
											"id": 1221,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "666:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "658:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1222,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "677:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1230,
									"mutability": "mutable",
									"name": "_allowances",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "710:67:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1229,
										"keyType": {
											"id": 1225,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "718:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "710:47:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1228,
											"keyType": {
												"id": 1226,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "737:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "729:27:7",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1227,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "748:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1233,
									"mutability": "constant",
									"name": "_burnRate",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "817:38:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1231,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "817:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "32",
										"id": 1232,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "854:1:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_2_by_1",
											"typeString": "int_const 2"
										},
										"value": "2"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1240,
									"mutability": "constant",
									"name": "_maxBurnAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1609,
									"src": "899:55:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1234,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "899:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"commonType": {
											"typeIdentifier": "t_rational_5000000000000000000000_by_1",
											"typeString": "int_const 5000000000000000000000"
										},
										"id": 1239,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"lValueRequested": false,
										"leftExpression": {
											"hexValue": "35303030",
											"id": 1235,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "941:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_5000_by_1",
												"typeString": "int_const 5000"
											},
											"value": "5000"
										},
										"nodeType": "BinaryOperation",
										"operator": "*",
										"rightExpression": {
											"commonType": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											},
											"id": 1238,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"leftExpression": {
												"hexValue": "3130",
												"id": 1236,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "948:2:7",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_10_by_1",
													"typeString": "int_const 10"
												},
												"value": "10"
											},
											"nodeType": "BinaryOperation",
											"operator": "**",
											"rightExpression": {
												"hexValue": "3138",
												"id": 1237,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "number",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "952:2:7",
												"typeDescriptions": {
													"typeIdentifier": "t_rational_18_by_1",
													"typeString": "int_const 18"
												},
												"value": "18"
											},
											"src": "948:6:7",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_1000000000000000000_by_1",
												"typeString": "int_const 1000000000000000000"
											}
										},
										"src": "941:13:7",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5000000000000000000000_by_1",
											"typeString": "int_const 5000000000000000000000"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "1016:121:7",
										"statements": [
											{
												"expression": {
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1243,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "1027:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1246,
														"indexExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1244,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "1037:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1245,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1037:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1027:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1247,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1220,
														"src": "1053:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1027:38:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1249,
												"nodeType": "ExpressionStatement",
												"src": "1027:38:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1098:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1252,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1090:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1251,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1090:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1090:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1255,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "1102:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1102:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1257,
															"name": "_totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1220,
															"src": "1116:12:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1250,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "1081:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1081:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1259,
												"nodeType": "EmitStatement",
												"src": "1076:53:7"
											}
										]
									},
									"id": 1261,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:7"
									},
									"returnParameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1016:0:7"
									},
									"scope": 1609,
									"src": "1002:135:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1268,
										"nodeType": "Block",
										"src": "1197:31:7",
										"statements": [
											{
												"expression": {
													"id": 1266,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1207,
													"src": "1215:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1265,
												"id": 1267,
												"nodeType": "Return",
												"src": "1208:12:7"
											}
										]
									},
									"functionSelector": "06fdde03",
									"id": 1269,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1158:2:7"
									},
									"returnParameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1269,
												"src": "1182:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1263,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1182:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1181:15:7"
									},
									"scope": 1609,
									"src": "1145:83:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1276,
										"nodeType": "Block",
										"src": "1290:33:7",
										"statements": [
											{
												"expression": {
													"id": 1274,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1210,
													"src": "1308:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1273,
												"id": 1275,
												"nodeType": "Return",
												"src": "1301:14:7"
											}
										]
									},
									"functionSelector": "95d89b41",
									"id": 1277,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1251:2:7"
									},
									"returnParameters": {
										"id": 1273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1272,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1277,
												"src": "1275:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1271,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1275:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1274:15:7"
									},
									"scope": 1609,
									"src": "1236:87:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1284,
										"nodeType": "Block",
										"src": "1379:35:7",
										"statements": [
											{
												"expression": {
													"id": 1282,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1213,
													"src": "1397:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1281,
												"id": 1283,
												"nodeType": "Return",
												"src": "1390:16:7"
											}
										]
									},
									"functionSelector": "313ce567",
									"id": 1285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1278,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1348:2:7"
									},
									"returnParameters": {
										"id": 1281,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1280,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1285,
												"src": "1372:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1279,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1372:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1371:7:7"
									},
									"scope": 1609,
									"src": "1331:83:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										780
									],
									"body": {
										"id": 1293,
										"nodeType": "Block",
										"src": "1484:38:7",
										"statements": [
											{
												"expression": {
													"id": 1291,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1220,
													"src": "1502:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1290,
												"id": 1292,
												"nodeType": "Return",
												"src": "1495:19:7"
											}
										]
									},
									"functionSelector": "18160ddd",
									"id": 1294,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1287,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1457:8:7"
									},
									"parameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1442:2:7"
									},
									"returnParameters": {
										"id": 1290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1289,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1294,
												"src": "1475:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1475:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1474:9:7"
									},
									"scope": 1609,
									"src": "1422:100:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										788
									],
									"body": {
										"id": 1306,
										"nodeType": "Block",
										"src": "1605:44:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1302,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1224,
														"src": "1623:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1304,
													"indexExpression": {
														"id": 1303,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1296,
														"src": "1633:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1623:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1301,
												"id": 1305,
												"nodeType": "Return",
												"src": "1616:25:7"
											}
										]
									},
									"functionSelector": "70a08231",
									"id": 1307,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1298,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1578:8:7"
									},
									"parameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1296,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1549:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1295,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1549:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1548:17:7"
									},
									"returnParameters": {
										"id": 1301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1300,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1307,
												"src": "1596:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1299,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1596:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1595:9:7"
									},
									"scope": 1609,
									"src": "1530:119:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										798
									],
									"body": {
										"id": 1326,
										"nodeType": "Block",
										"src": "1741:83:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1318,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "1762:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1762:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1320,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1309,
															"src": "1776:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1321,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "1787:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1317,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1564,
														"src": "1752:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1752:42:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1323,
												"nodeType": "ExpressionStatement",
												"src": "1752:42:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1324,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1812:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1316,
												"id": 1325,
												"nodeType": "Return",
												"src": "1805:11:7"
											}
										]
									},
									"functionSelector": "a9059cbb",
									"id": 1327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1313,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1717:8:7"
									},
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "1675:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1675:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "1694:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1310,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1694:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1674:35:7"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1327,
												"src": "1735:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1314,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1735:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1734:6:7"
									},
									"scope": 1609,
									"src": "1657:167:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										808
									],
									"body": {
										"id": 1343,
										"nodeType": "Block",
										"src": "1922:53:7",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1337,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1230,
															"src": "1940:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1339,
														"indexExpression": {
															"id": 1338,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1329,
															"src": "1952:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1940:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1341,
													"indexExpression": {
														"id": 1340,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1331,
														"src": "1959:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1940:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1336,
												"id": 1342,
												"nodeType": "Return",
												"src": "1933:34:7"
											}
										]
									},
									"functionSelector": "dd62ed3e",
									"id": 1344,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1333,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1895:8:7"
									},
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "1851:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1851:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1331,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "1866:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1866:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1850:32:7"
									},
									"returnParameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1335,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1344,
												"src": "1913:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1334,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1913:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1912:9:7"
									},
									"scope": 1609,
									"src": "1832:143:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										818
									],
									"body": {
										"id": 1363,
										"nodeType": "Block",
										"src": "2064:80:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1355,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2084:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2084:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1357,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1346,
															"src": "2098:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1358,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1348,
															"src": "2107:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1354,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1608,
														"src": "2075:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2075:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1360,
												"nodeType": "ExpressionStatement",
												"src": "2075:39:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2132:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1353,
												"id": 1362,
												"nodeType": "Return",
												"src": "2125:11:7"
											}
										]
									},
									"functionSelector": "095ea7b3",
									"id": 1364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1350,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2040:8:7"
									},
									"parameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1346,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "2000:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2000:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "2017:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2017:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1999:33:7"
									},
									"returnParameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1364,
												"src": "2058:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1351,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2058:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2057:6:7"
									},
									"scope": 1609,
									"src": "1983:161:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										830
									],
									"body": {
										"id": 1400,
										"nodeType": "Block",
										"src": "2256:209:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1377,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1366,
															"src": "2277:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1378,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1368,
															"src": "2285:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1379,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1370,
															"src": "2296:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1376,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1564,
														"src": "2267:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2267:36:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1381,
												"nodeType": "ExpressionStatement",
												"src": "2267:36:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1383,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1366,
															"src": "2323:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1384,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2331:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2331:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1393,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "2383:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365",
																	"id": 1394,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2391:42:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	},
																	"value": "ERC20: transfer amount exceeds allowance"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330",
																		"typeString": "literal_string \"ERC20: transfer amount exceeds allowance\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1386,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1230,
																			"src": "2345:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1388,
																		"indexExpression": {
																			"id": 1387,
																			"name": "sender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1366,
																			"src": "2357:6:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2345:19:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1391,
																	"indexExpression": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1389,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 868,
																			"src": "2365:10:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1390,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2365:12:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2345:33:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1139,
																"src": "2345:37:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 1395,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2345:89:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1382,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1608,
														"src": "2314:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2314:121:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1397,
												"nodeType": "ExpressionStatement",
												"src": "2314:121:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1398,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2453:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1375,
												"id": 1399,
												"nodeType": "Return",
												"src": "2446:11:7"
											}
										]
									},
									"functionSelector": "23b872dd",
									"id": 1401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1372,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2232:8:7"
									},
									"parameters": {
										"id": 1371,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1366,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "2174:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2174:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1368,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "2190:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1367,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2190:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1370,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "2209:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2209:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2173:51:7"
									},
									"returnParameters": {
										"id": 1375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1374,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1401,
												"src": "2250:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1373,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2250:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2249:6:7"
									},
									"scope": 1609,
									"src": "2152:313:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1427,
										"nodeType": "Block",
										"src": "2559:124:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1411,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2579:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1412,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2579:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1413,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1403,
															"src": "2593:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1421,
																	"name": "addedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1405,
																	"src": "2641:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1414,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1230,
																			"src": "2602:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1417,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1415,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 868,
																				"src": "2614:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 1416,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2614:12:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2602:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1419,
																	"indexExpression": {
																		"id": 1418,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1403,
																		"src": "2628:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2602:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "add",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1054,
																"src": "2602:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2602:50:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1410,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1608,
														"src": "2570:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2570:83:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1424,
												"nodeType": "ExpressionStatement",
												"src": "2570:83:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1425,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2671:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1409,
												"id": 1426,
												"nodeType": "Return",
												"src": "2664:11:7"
											}
										]
									},
									"functionSelector": "39509351",
									"id": 1428,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1403,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "2500:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1402,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2500:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"mutability": "mutable",
												"name": "addedValue",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "2517:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2517:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2499:37:7"
									},
									"returnParameters": {
										"id": 1409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1408,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1428,
												"src": "2553:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1407,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2553:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2552:6:7"
									},
									"scope": 1609,
									"src": "2473:210:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1455,
										"nodeType": "Block",
										"src": "2782:170:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1438,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 868,
																"src": "2802:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2802:12:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1440,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1430,
															"src": "2816:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1448,
																	"name": "subtractedValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1432,
																	"src": "2864:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 1449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2881:39:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	},
																	"value": "ERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																		"typeString": "literal_string \"ERC20: decreased allowance below zero\""
																	}
																],
																"expression": {
																	"baseExpression": {
																		"baseExpression": {
																			"id": 1441,
																			"name": "_allowances",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1230,
																			"src": "2825:11:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																				"typeString": "mapping(address => mapping(address => uint256))"
																			}
																		},
																		"id": 1444,
																		"indexExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1442,
																				"name": "_msgSender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 868,
																				"src": "2837:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																					"typeString": "function () view returns (address)"
																				}
																			},
																			"id": 1443,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2837:12:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "2825:25:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																			"typeString": "mapping(address => uint256)"
																		}
																	},
																	"id": 1446,
																	"indexExpression": {
																		"id": 1445,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1430,
																		"src": "2851:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2825:34:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1447,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sub",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1139,
																"src": "2825:38:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
																}
															},
															"id": 1450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2825:96:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1437,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1608,
														"src": "2793:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2793:129:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1452,
												"nodeType": "ExpressionStatement",
												"src": "2793:129:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1453,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2940:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1436,
												"id": 1454,
												"nodeType": "Return",
												"src": "2933:11:7"
											}
										]
									},
									"functionSelector": "a457c2d7",
									"id": 1456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "2718:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1429,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "2735:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2735:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:42:7"
									},
									"returnParameters": {
										"id": 1436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1435,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "2776:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1434,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2776:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2775:6:7"
									},
									"scope": 1609,
									"src": "2691:261:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1563,
										"nodeType": "Block",
										"src": "3039:877:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1471,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1466,
																"name": "sender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1458,
																"src": "3058:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1469,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3076:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3068:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1467,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3068:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1470,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3068:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3058:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1472,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3080:39:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1465,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3050:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1473,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3050:70:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1474,
												"nodeType": "ExpressionStatement",
												"src": "3050:70:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1481,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1476,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1460,
																"src": "3139:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1479,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3160:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3152:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1477,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "3152:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1480,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3152:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3139:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1482,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3164:37:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1475,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3131:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1483,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3131:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1484,
												"nodeType": "ExpressionStatement",
												"src": "3131:71:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1488,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1486,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1462,
																"src": "3221:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1487,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3230:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "3221:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e74206d7573742062652067726561746572207468616e207a65726f",
															"id": 1489,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3233:50:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5411d640b7078a89e049550651843b3a0ae45aa28987be3a3e649daad0239f21",
																"typeString": "literal_string \"ERC20: transfer amount must be greater than zero\""
															},
															"value": "ERC20: transfer amount must be greater than zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5411d640b7078a89e049550651843b3a0ae45aa28987be3a3e649daad0239f21",
																"typeString": "literal_string \"ERC20: transfer amount must be greater than zero\""
															}
														],
														"id": 1485,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3213:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3213:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1491,
												"nodeType": "ExpressionStatement",
												"src": "3213:71:7"
											},
											{
												"assignments": [
													1493
												],
												"declarations": [
													{
														"constant": false,
														"id": 1493,
														"mutability": "mutable",
														"name": "burnAmount",
														"nodeType": "VariableDeclaration",
														"scope": 1563,
														"src": "3297:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1492,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3297:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1501,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "313030",
															"id": 1499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3344:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															},
															"value": "100"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_100_by_1",
																"typeString": "int_const 100"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1496,
																	"name": "_burnRate",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1233,
																	"src": "3329:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1494,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1462,
																	"src": "3318:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1495,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1084,
																"src": "3318:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1497,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3318:21:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1498,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1099,
														"src": "3318:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3318:30:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3297:51:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1502,
														"name": "burnAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1493,
														"src": "3388:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1503,
														"name": "_maxBurnAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1240,
														"src": "3401:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3388:27:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1510,
												"nodeType": "IfStatement",
												"src": "3384:87:7",
												"trueBody": {
													"id": 1509,
													"nodeType": "Block",
													"src": "3417:54:7",
													"statements": [
														{
															"expression": {
																"id": 1507,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1505,
																	"name": "burnAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1493,
																	"src": "3432:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1506,
																	"name": "_maxBurnAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1240,
																	"src": "3445:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3432:27:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1508,
															"nodeType": "ExpressionStatement",
															"src": "3432:27:7"
														}
													]
												}
											},
											{
												"assignments": [
													1512
												],
												"declarations": [
													{
														"constant": false,
														"id": 1512,
														"mutability": "mutable",
														"name": "transferAmount",
														"nodeType": "VariableDeclaration",
														"scope": 1563,
														"src": "3483:22:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1511,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3483:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1517,
												"initialValue": {
													"arguments": [
														{
															"id": 1515,
															"name": "burnAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1493,
															"src": "3519:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1513,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1462,
															"src": "3508:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1514,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "sub",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1069,
														"src": "3508:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3508:22:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3483:47:7"
											},
											{
												"expression": {
													"id": 1528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1518,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3572:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1520,
														"indexExpression": {
															"id": 1519,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "3582:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3572:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1525,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1462,
																"src": "3614:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
																"id": 1526,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3622:40:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																},
																"value": "ERC20: transfer amount exceeds balance"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																	"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1521,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "3592:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1523,
																"indexExpression": {
																	"id": 1522,
																	"name": "sender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1458,
																	"src": "3602:6:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3592:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1139,
															"src": "3592:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256,string memory) pure returns (uint256)"
															}
														},
														"id": 1527,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3592:71:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3572:91:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1529,
												"nodeType": "ExpressionStatement",
												"src": "3572:91:7"
											},
											{
												"expression": {
													"id": 1539,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1530,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1224,
															"src": "3674:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1532,
														"indexExpression": {
															"id": 1531,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "3684:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3674:20:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1537,
																"name": "transferAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1512,
																"src": "3722:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1533,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "3697:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1535,
																"indexExpression": {
																	"id": 1534,
																	"name": "recipient",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1460,
																	"src": "3707:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3697:20:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1054,
															"src": "3697:24:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1538,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3697:40:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3674:63:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1540,
												"nodeType": "ExpressionStatement",
												"src": "3674:63:7"
											},
											{
												"expression": {
													"id": 1546,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1541,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1220,
														"src": "3748:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1544,
																"name": "burnAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1493,
																"src": "3780:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1542,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1220,
																"src": "3763:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1543,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sub",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1069,
															"src": "3763:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1545,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3763:28:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3748:43:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1547,
												"nodeType": "ExpressionStatement",
												"src": "3748:43:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1549,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "3818:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1550,
															"name": "recipient",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1460,
															"src": "3826:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1551,
															"name": "transferAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1512,
															"src": "3837:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1548,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "3809:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3809:43:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1553,
												"nodeType": "EmitStatement",
												"src": "3804:48:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1555,
															"name": "sender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1458,
															"src": "3877:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1558,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3893:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1557,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3885:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1556,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3885:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1559,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3885:10:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1560,
															"name": "burnAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1493,
															"src": "3897:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1554,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 765,
														"src": "3868:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3868:40:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1562,
												"nodeType": "EmitStatement",
												"src": "3863:45:7"
											}
										]
									},
									"id": 1564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1463,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "2979:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1457,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2979:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1460,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "2995:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1459,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2995:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1462,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1564,
												"src": "3014:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1461,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3014:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2978:51:7"
									},
									"returnParameters": {
										"id": 1464,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3039:0:7"
									},
									"scope": 1609,
									"src": "2960:956:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1607,
										"nodeType": "Block",
										"src": "3999:263:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1579,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1574,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1566,
																"src": "4018:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1577,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4035:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1576,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4027:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1575,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4027:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1578,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4027:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4018:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 1580,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4039:38:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1573,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4010:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4010:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1582,
												"nodeType": "ExpressionStatement",
												"src": "4010:68:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1589,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1584,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1568,
																"src": "4097:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4116:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1586,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4108:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1585,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4108:7:7",
																		"typeDescriptions": {}
																	}
																},
																"id": 1588,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4108:10:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4097:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 1590,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4120:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 1583,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4089:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1591,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4089:68:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1592,
												"nodeType": "ExpressionStatement",
												"src": "4089:68:7"
											},
											{
												"expression": {
													"id": 1599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1593,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1230,
																"src": "4170:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 1596,
															"indexExpression": {
																"id": 1594,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1566,
																"src": "4182:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "4170:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1597,
														"indexExpression": {
															"id": 1595,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1568,
															"src": "4189:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4170:27:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1598,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1570,
														"src": "4200:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4170:36:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1600,
												"nodeType": "ExpressionStatement",
												"src": "4170:36:7"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1602,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1566,
															"src": "4231:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1603,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1568,
															"src": "4238:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1604,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1570,
															"src": "4247:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1601,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 774,
														"src": "4222:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1605,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4222:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1606,
												"nodeType": "EmitStatement",
												"src": "4217:37:7"
											}
										]
									},
									"id": 1608,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1566,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "3942:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3942:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1568,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "3957:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1567,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3957:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 1608,
												"src": "3974:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3974:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3941:48:7"
									},
									"returnParameters": {
										"id": 1572,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3999:0:7"
									},
									"scope": 1609,
									"src": "3924:338:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1610,
							"src": "358:3907:7"
						}
					],
					"src": "35:4232:7"
				},
				"id": 7
			}
		}
	}
}